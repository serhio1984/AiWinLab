// prediction-generator.js
const axios = require('axios');
const OpenAI = require('openai');
const { MongoClient } = require('mongodb');
const { getTranslatedTeams } = require('./translate-teams');

// === ENV / API KEYS ===
const FOOTBALL_API_KEY = process.env.FOOTBALL_API_KEY || '548e45339f74b3a936d49be6786124b0';
const OPENAI_KEY = process.env.OPENAI_API_KEY;
const MONGODB_URI =
  process.env.MONGODB_URI ||
  'mongodb+srv://aiwinuser:aiwinsecure123@cluster0.detso80.mongodb.net/predictionsDB?retryWrites=true&w=majority&tls=true';

const openai = new OpenAI({ apiKey: OPENAI_KEY });

// === API URLs ===
const FIXTURES_URL = 'https://v3.football.api-sports.io/fixtures';
const ODDS_URL = 'https://v3.football.api-sports.io/odds';

// ‚Äî‚Äî‚Äî –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã/–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Äî‚Äî‚Äî

// –ü–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–∫–ª—é—á–∞–µ–º —Å—Ç—Ä–∞–Ω—ã:
const EXCLUDED_COUNTRIES = new Set(['Russia', 'Belarus']);

// –ú–∞–ª–µ–Ω—å–∫–∏–µ –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏–µ —Å—Ç—Ä–∞–Ω—ã –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –±–ª–æ–∫–∞ ¬´–û—Å—Ç–∞–ª—å–Ω–∞—è –ï–≤—Ä–æ–ø–∞¬ª
const SMALL_EURO_STATES = new Set([
  'Andorra','Faroe Islands','Gibraltar','Liechtenstein','Luxembourg','Malta','Monaco','San Marino'
]);

// –°–ø–∏—Å–∫–∏ —Å—Ç—Ä–∞–Ω –ø–æ –∫–æ–Ω—Ñ–µ–¥–µ—Ä–∞—Ü–∏—è–º (—É–ø—Ä–æ—â—ë–Ω–Ω–æ)
const UEFA_COUNTRIES = new Set([
  'England','Scotland','Wales','Northern Ireland','Ireland',
  'Spain','Italy','Germany','France','Netherlands','Portugal',
  'Belgium','Switzerland','Austria','Turkey','Greece','Denmark',
  'Norway','Sweden','Poland','Czech Republic','Czechia','Croatia',
  'Serbia','Romania','Hungary','Slovakia','Slovenia','Bulgaria',
  'Bosnia and Herzegovina','North Macedonia','Albania','Kosovo',
  'Montenegro','Moldova','Ukraine','Lithuania','Latvia','Estonia',
  'Finland','Iceland','Georgia','Armenia','Azerbaijan','Cyprus',
  'Andorra','Faroe Islands','Gibraltar','Luxembourg','Liechtenstein',
  'Malta','Monaco','San Marino','Israel','Kazakhstan'
]);

const CONMEBOL_COUNTRIES = new Set([
  'Argentina','Brazil','Uruguay','Paraguay','Chile','Bolivia','Peru','Ecuador','Colombia','Venezuela'
]);

const CONCACAF_COUNTRIES = new Set([
  'Mexico','United States','USA','Canada','Costa Rica','Honduras','Panama','Guatemala','El Salvador',
  'Jamaica','Trinidad and Tobago','Haiti','Cuba','Dominican Republic','Nicaragua','Belize','Grenada',
  'Curacao','Suriname','Guyana','Martinique','Guadeloupe','Bermuda','Aruba','Antigua and Barbuda',
  'Bahamas','Barbados','Dominica','Saint Lucia','Saint Kitts and Nevis','Saint Vincent and the Grenadines',
  'Puerto Rico'
]);

const CAF_COUNTRIES = new Set([
  'Morocco','Algeria','Tunisia','Egypt','Libya',
  'Ghana','Nigeria','Senegal','Cameroon','Ivory Coast',"C√¥te d'Ivoire",
  'South Africa','Ethiopia','Kenya','Uganda','Tanzania','Zambia','Zimbabwe',
  'Mali','Burkina Faso','Guinea','Guinea-Bissau','Cape Verde','Sierra Leone',
  'Liberia','Gambia','Benin','Togo','Niger','Chad','Central African Republic',
  'Sudan','South Sudan','Eritrea','Somalia','Djibouti','Equatorial Guinea',
  'Gabon','Congo','DR Congo','Angola','Mozambique','Madagascar','Lesotho',
  'Eswatini','Botswana','Namibia','Mauritania','Sao Tome and Principe',
  'Comoros','Seychelles','Mauritius','Rwanda','Burundi'
]);

// –¢–û–ü‚Äë–ª–∏–≥–∏ –ï–≤—Ä–æ–ø—ã (–≤—ã—Å—à–∏–µ –¥–∏–≤–∏–∑–∏–æ–Ω—ã)
const TOP_LEAGUE_BY_COUNTRY = {
  "England":     ["Premier League"],
  "Spain":       ["La Liga"],
  "Italy":       ["Serie A"],
  "Germany":     ["Bundesliga"],
  "France":      ["Ligue 1"],
  "Netherlands": ["Eredivisie"],
  "Portugal":    ["Primeira Liga"]
};

// –ñ—ë—Å—Ç–∫–∏–π –ø–æ—Ä—è–¥–æ–∫ —Å—Ç—Ä–∞–Ω –¥–ª—è –¢–û–ü‚Äë–ª–∏–≥
const TOP_MAJOR_ORDER = ["England","Spain","Italy","Germany","France","Netherlands","Portugal"];

// –í—ã—Å—à–∏–µ –¥–∏–≤–∏–∑–∏–æ–Ω—ã –ø—Ä–æ—á–∏—Ö —Å—Ç—Ä–∞–Ω –£–ï–§–ê (–±–µ–∑ ¬´–º–∞–ª–µ–Ω—å–∫–∏—Ö¬ª)
const OTHER_TOP_DIVISIONS_UEFA = {
  "Scotland":    ["Premiership","Scottish Premiership"],
  "Turkey":      ["Super Lig","S√ºper Lig"],
  "Greece":      ["Super League 1","Super League Greece"],
  "Belgium":     ["Pro League","Jupiler Pro League","First Division A"],
  "Austria":     ["Bundesliga","Austrian Bundesliga"],
  "Switzerland": ["Super League","Swiss Super League"],
  "Poland":      ["Ekstraklasa"],
  "Ukraine":     ["Premier League","Ukrainian Premier League"],
  "Norway":      ["Eliteserien"],
  "Sweden":      ["Allsvenskan"],
  "Denmark":     ["Superliga","Danish Superliga"],
  "Czech Republic": ["Czech Liga","1. Liga","Fortuna Liga"],
  "Czechia":     ["Czech Liga","1. Liga","Fortuna Liga"],
  "Croatia":     ["1. HNL","HNL","SuperSport HNL"],
  "Serbia":      ["SuperLiga","Super Liga"],
  "Romania":     ["Liga I","Superliga"],
  "Hungary":     ["NB I"],
  "Slovakia":    ["Super Liga","Fortuna Liga"],
  "Slovenia":    ["PrvaLiga","Prva Liga"],
  "Bulgaria":    ["Parva Liga","First League"],
  "Finland":     ["Veikkausliiga"],
  "Iceland":     ["√örvalsdeild","Urvalsdeild"],
  "Cyprus":      ["First Division"],
  "Ireland":     ["Premier Division"],
  "Wales":       ["Cymru Premier"],
  "Northern Ireland": ["Premiership"],
  "Israel":      ["Ligat ha'Al","Premier League"],
  "Kazakhstan":  ["Premier League"]
};

// –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤
const UEFA_KEYS = ['uefa','champions league','europa league','europe conference','conference league','european championship','nations league','super cup','qualifying','qualification'];
const CONMEBOL_KEYS = ['conmebol','copa america','libertadores','sudamericana','recopa'];
const CONCACAF_KEYS = ['concacaf','gold cup','leagues cup','champions cup','champions league'];
const CAF_KEYS = ['africa','caf','african cup','africa cup of nations','afcon'];

// ‚Äî‚Äî‚Äî –£—Ç–∏–ª–∏—Ç—ã ‚Äî‚Äî‚Äî
const lc = (s) => (s || '').toLowerCase().normalize('NFKD');

function isFriendlyMatch(m) {
  const name = lc(m.league?.name);
  const type = lc(m.league?.type);
  return /friendly|friendlies|—Ç–æ–≤–∞—Ä–∏—â–µ—Å/i.test(m.league?.name || '') ||
         /friendly/i.test(type);
}

function detectConfedByLeagueName(name='') {
  const n = lc(name);
  if (UEFA_KEYS.some(k => n.includes(k))) return 'UEFA';
  if (CONMEBOL_KEYS.some(k => n.includes(k))) return 'CONMEBOL';
  if (CONCACAF_KEYS.some(k => n.includes(k))) return 'CONCACAF';
  if (CAF_KEYS.some(k => n.includes(k))) return 'CAF';
  return 'OTHER';
}

function confedOf(country, leagueName) {
  if (UEFA_COUNTRIES.has(country)) return 'UEFA';
  if (CONMEBOL_COUNTRIES.has(country)) return 'CONMEBOL';
  if (CONCACAF_COUNTRIES.has(country)) return 'CONCACAF';
  if (CAF_COUNTRIES.has(country)) return 'CAF';
  // –µ—Å–ª–∏ country = International/World/Europe ‚Äî –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–Ω—è—Ç—å –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ª–∏–≥–∏
  return detectConfedByLeagueName(leagueName);
}

function inListByCountry(map, country, league) {
  const arr = map[country];
  if (!arr || !arr.length) return false;
  return arr.includes(league);
}

function ddmmyy(dateIso) {
  const d = new Date(dateIso);
  const dd = String(d.getDate()).padStart(2,'0');
  const mm = String(d.getMonth()+1).padStart(2,'0');
  const yy = String(d.getFullYear()).slice(2);
  return `${dd}.${mm}.${yy}`;
}

// ‚Äî‚Äî‚Äî –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π GET ‚Äî‚Äî‚Äî
async function safeGet(url, params) {
  try {
    const res = await axios.get(url, {
      headers: { 'x-apisports-key': FOOTBALL_API_KEY },
      params
    });
    const list = res.data?.response || [];
    console.log(`üîé GET ${url} ok | items=${list.length} | params=${JSON.stringify(params)}`);
    return list;
  } catch (e) {
    console.error(`‚ùå GET ${url} fail | status=${e.response?.status} | data=${JSON.stringify(e.response?.data) || e.message}`);
    return [];
  }
}

// ‚Äî‚Äî‚Äî –ó–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å –ø–æ –ö–∏–µ–≤—É ‚Äî‚Äî‚Äî
function getKievDateRangeForTomorrow() {
  const tz = 'Europe/Kiev';
  const kievNow = new Date(new Date().toLocaleString('en-US', { timeZone: tz }));
  const start = new Date(kievNow);
  start.setDate(start.getDate() + 1);
  start.setHours(0,0,0,0);
  const end = new Date(start);
  end.setDate(end.getDate() + 1);
  const from = start.toISOString().split('T')[0];
  const to   = end.toISOString().split('T')[0];
  return { from, to };
}

function getRandomOdds() {
  const odds = [1.5,1.7,1.9,2.0,2.3,2.5,3.0,3.5];
  return odds[Math.floor(Math.random()*odds.length)].toFixed(2);
}

// ‚Äî‚Äî‚Äî –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ –∫–æ—Ä–∑–∏–Ω–∞–º ‚Äî‚Äî‚Äî
// EURO (–µ–≤—Ä–æ–∫—É–±–∫–∏), TOP_MAJOR, REST_EURO, CONMEBOL, CONCACAF, CAF
function classifyBucket(m) {
  const country = m.league?.country || '';
  const league  = m.league?.name || '';

  // –∏—Å–∫–ª—é—á–µ–Ω–∏—è
  if (EXCLUDED_COUNTRIES.has(country)) return null;

  // —Ç–æ–≤–∞—Ä–∏—â–µ—Å–∫–∏–µ ‚Äî –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–∫–ª—é—á–∞–µ–º
  if (isFriendlyMatch(m)) return null;

  // –µ–≤—Ä–æ–∫—É–±–∫–∏ –£–ï–§–ê (—Å—Ç—Ä–æ–≥–æ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º!)
  const confByLeague = detectConfedByLeagueName(league);
  if (confByLeague === 'UEFA' && /(champions|europa|conference|nations|european|qualif)/i.test(league)) {
    return 'EURO';
  }

  // –ö–æ–Ω—Ñ–µ–¥–µ—Ä–∞—Ü–∏—è
  const conf = confedOf(country, league);

  // –¢–û–ü‚Äë–ª–∏–≥–∏ –ï–≤—Ä–æ–ø—ã
  if (conf === 'UEFA' && inListByCountry(TOP_LEAGUE_BY_COUNTRY, country, league)) {
    return 'TOP_MAJOR';
  }

  // –û—Å—Ç–∞–ª—å–Ω–∞—è –ï–≤—Ä–æ–ø–∞ (—Ç–æ–ª—å–∫–æ –≤—ã—Å—à–∏–µ –¥–∏–≤–∏–∑–∏–æ–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞, –±–µ–∑ ¬´–º–∞–ª–µ–Ω—å–∫–∏—Ö¬ª)
  if (conf === 'UEFA' &&
      !SMALL_EURO_STATES.has(country) &&
      inListByCountry(OTHER_TOP_DIVISIONS_UEFA, country, league)) {
    return 'REST_EURO';
  }

  // –í–Ω–µ –ï–≤—Ä–æ–ø—ã –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É
  if (conf === 'CONMEBOL') return 'CONMEBOL';
  if (conf === 'CONCACAF') return 'CONCACAF';
  if (conf === 'CAF') return 'CAF';

  // –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
  return null;
}

// ‚Äî‚Äî‚Äî –°—Ç–∞–±–∏–ª—å–Ω—ã–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤—â–∏–∫–∏ ‚Äî‚Äî‚Äî
function sortByCountryStable(arr, getCountry) {
  return arr
    .map((m, idx) => ({ m, idx }))
    .sort((a, b) => {
      const ca = (getCountry(a.m) || '').localeCompare(getCountry(b.m) || '');
      if (ca !== 0) return ca;
      return a.idx - b.idx;
    })
    .map(x => x.m);
}

function sortTopMajor(arr) {
  const orderMap = new Map(TOP_MAJOR_ORDER.map((c, i) => [c, i]));
  return arr
    .map((m, idx) => ({ m, idx }))
    .sort((a, b) => {
      const oa = orderMap.has(mCountry(a.m)) ? orderMap.get(mCountry(a.m)) : 999;
      const ob = orderMap.has(mCountry(b.m)) ? orderMap.get(mCountry(b.m)) : 999;
      if (oa !== ob) return oa - ob;
      return a.idx - b.idx;
    })
    .map(x => x.m);
}

function mCountry(m){ return m.league?.country || ''; }

// ‚Äî‚Äî‚Äî –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ç—á–µ–π –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ ‚Äî‚Äî‚Äî
async function fetchMatches(maxCount=80) {
  const tz = 'Europe/Kiev';
  const { from, to } = getKievDateRangeForTomorrow();

  let all = await safeGet(FIXTURES_URL, { date: from, timezone: tz });
  if (all.length === 0) all = await safeGet(FIXTURES_URL, { from, to, timezone: tz });
  if (all.length === 0) {
    const next = await safeGet(FIXTURES_URL, { next: 400, timezone: tz });
    if (next.length) {
      const zStart = new Date(`${from}T00:00:00.000Z`);
      const zEnd   = new Date(`${to}T00:00:00.000Z`);
      all = next.filter(m => {
        const dt = new Date(m.fixture.date);
        return dt >= zStart && dt < zEnd;
      });
      console.log(`üß© –§–æ–ª–±—ç–∫ next=400 ‚Üí –Ω–∞ –∑–∞–≤—Ç—Ä–∞: ${all.length}`);
    }
  }

  // –†–∞—Å–∫–ª–∞–¥—ã–≤–∞–µ–º –ø–æ –∫–æ—Ä–∑–∏–Ω–∞–º
  const EURO = [];
  const TOP_MAJOR = [];
  const REST_EURO = [];
  const CONMEBOL = [];
  const CONCACAF = [];
  const CAF = [];

  for (const m of all) {
    const b = classifyBucket(m);
    if (!b) continue;
    if (b === 'EURO') EURO.push(m);
    else if (b === 'TOP_MAJOR') TOP_MAJOR.push(m);
    else if (b === 'REST_EURO') REST_EURO.push(m);
    else if (b === 'CONMEBOL') CONMEBOL.push(m);
    else if (b === 'CONCACAF') CONCACAF.push(m);
    else if (b === 'CAF') CAF.push(m);
  }

  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤–Ω—É—Ç—Ä–∏ –∫–æ—Ä–∑–∏–Ω (–ù–ï –ø–æ –≤—Ä–µ–º–µ–Ω–∏)
  const EURO_sorted      = EURO.map((m,idx)=>({m,idx}))
    .sort((a,b)=> (a.m.league?.name||'').localeCompare(b.m.league?.name||'') || (a.idx-b.idx))
    .map(x=>x.m);
  const TOP_MAJOR_sorted = sortTopMajor(TOP_MAJOR);
  const REST_EURO_sorted = sortByCountryStable(REST_EURO, mCountry);
  const CONMEBOL_sorted  = sortByCountryStable(CONMEBOL, mCountry);
  const CONCACAF_sorted  = sortByCountryStable(CONCACAF, mCountry);
  const CAF_sorted       = sortByCountryStable(CAF, mCountry);

  // –§–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
  const result = [
    ...EURO_sorted,
    ...TOP_MAJOR_sorted,
    ...REST_EURO_sorted,
    ...CONMEBOL_sorted,
    ...CONCACAF_sorted,
    ...CAF_sorted
  ];

  const final = result.slice(0, maxCount);
  console.log(`‚úÖ –ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: EURO=${EURO_sorted.length}, TOP=${TOP_MAJOR_sorted.length}, REST_EURO=${REST_EURO_sorted.length}, CONMEBOL=${CONMEBOL_sorted.length}, CONCACAF=${CONCACAF_sorted.length}, CAF=${CAF_sorted.length} | total=${final.length}`);
  return final;
}

// ‚Äî‚Äî‚Äî –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ò–ò (—Å—Ç—Ä–æ–≥–æ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã) ‚Äî‚Äî‚Äî
async function generateAllPredictions(matches) {
  const list = matches.map((m,i)=>`${i+1}. ${m.teams.home.name} vs ${m.teams.away.name}`).join('\n');
  const prompt = `
–¢—ã —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫.
–°–ì–ï–ù–ï–†–ò–†–£–ô –ø–æ –æ–¥–Ω–æ–º—É –ø—Ä–æ–≥–Ω–æ–∑—É –Ω–∞ –∫–∞–∂–¥—ã–π –º–∞—Ç—á –°–¢–†–û–ì–û –≤ –æ–¥–Ω–æ–º –∏–∑ —à–∞–±–ª–æ–Ω–æ–≤ (—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫). –û–î–ù–ê —Å—Ç—Ä–æ–∫–∞ –Ω–∞ –º–∞—Ç—á, –±–µ–∑ —Ç–æ—á–µ–∫/—Ö–≤–æ—Å—Ç–æ–≤:

1) "–ü–æ–±–µ–¥–∞ <—Ç–æ—á–Ω–æ–µ –∏–º—è –∫–æ–º–∞–Ω–¥—ã>"
2) "–¢–æ—Ç–∞–ª –±–æ–ª—å—à–µ <—á–∏—Å–ª–æ>"
3) "–¢–æ—Ç–∞–ª –º–µ–Ω—å—à–µ <—á–∏—Å–ª–æ>"
4) "–û–±–µ –∑–∞–±—å—é—Ç-–¥–∞"
5) "–û–±–µ –∑–∞–±—å—é—Ç-–Ω–µ—Ç"
6) "<—Ç–æ—á–Ω–æ–µ –∏–º—è –∫–æ–º–∞–Ω–¥—ã> –§–æ—Ä–∞ <+/-—á–∏—Å–ª–æ>"

–ó–∞–ø—Ä–µ—â–µ–Ω—ã "–î–≤–æ–π–Ω–æ–π —à–∞–Ω—Å", "–ù–∏—á—å—è" –∏ –ª—é–±—ã–µ —Ö–≤–æ—Å—Ç—ã/–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è.

–°–ø–∏—Å–æ–∫:
${list}
`.trim();

  try {
    const r = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: [{ role: 'user', content: prompt }],
      temperature: 0.7
    });
    return (r.choices?.[0]?.message?.content || '')
      .split('\n')
      .map(s => s.trim())
      .filter(Boolean)
      .map(s => s.replace(/^\d+\.\s*/, ''));
  } catch (e) {
    console.error('AI error:', e.message);
    return matches.map(m => `–ü–æ–±–µ–¥–∞ ${m.teams.home.name}`);
  }
}

// ‚Äî‚Äî‚Äî –ü–æ—Å—Ç‚Äë–æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ ‚Äî‚Äî‚Äî
function normalize(s) {
  return (s||'').toLowerCase().replace(/[‚Äì‚Äî‚àí]/g,'-').replace(/\s+/g,' ').trim();
}
function stripContext(raw) {
  return (raw||'')
    .replace(/\s*(?:–≤|–Ω–∞)\s+(?:–º–∞—Ç—á–µ|–∏–≥—Ä–µ)\b[^]*$/i,'')
    .replace(/\s*–ø—Ä–æ—Ç–∏–≤\s+.+$/i,'')
    .replace(/\s*—Å\s+.+$/i,'')
    .replace(/[\.„ÄÇ]+$/,'')
    .trim();
}
function sanitizePredictionText(text, homeName, awayName, favoriteName) {
  if (!text) return text;
  const orig = text.trim();
  const core = stripContext(orig);
  const t = normalize(core);
  const home = normalize(homeName);
  const away = normalize(awayName);

  // –î–≤–æ–π–Ω–æ–π —à–∞–Ω—Å/–Ω–µ –ø—Ä–æ–∏–≥—Ä–∞–µ—Ç ‚Üí –ü–æ–±–µ–¥–∞ –Ω—É–∂–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
  let m =
    t.match(/^–¥–≤–æ–π–Ω–æ–π\s+—à–∞–Ω—Å[:\-\s]*(.+?)\s+–∏–ª–∏\s+–Ω–∏—á—å—è$/i) ||
    t.match(/^–Ω–∏—á—å—è\s+–∏–ª–∏\s+(.+?)$/i) ||
    t.match(/^(.+?)\s+–∏–ª–∏\s+–Ω–∏—á—å—è$/i);
  if (m) {
    const who = normalize(m[1]);
    if (who.includes(home)) return `–ü–æ–±–µ–¥–∞ ${homeName}`;
    if (who.includes(away)) return `–ü–æ–±–µ–¥–∞ ${awayName}`;
    return `–ü–æ–±–µ–¥–∞ ${favoriteName}`;
  }
  m = t.match(/^(.+?)\s+–Ω–µ\s+–ø—Ä–æ–∏–≥—Ä–∞–µ—Ç$/i);
  if (m) {
    const who = normalize(m[1]);
    if (who.includes(home)) return `–ü–æ–±–µ–¥–∞ ${homeName}`;
    if (who.includes(away)) return `–ü–æ–±–µ–¥–∞ ${awayName}`;
    return `–ü–æ–±–µ–¥–∞ ${favoriteName}`;
  }

  // –û–±–µ –∑–∞–±—å—é—Ç
  m = t.match(/^–æ–±–µ(?:\s+–∫–æ–º–∞–Ω–¥—ã)?\s+–∑–∞–±—å—é—Ç\s*[-:() ]*\s*(–¥–∞|–Ω–µ—Ç)$/i);
  if (m) return `–û–±–µ –∑–∞–±—å—é—Ç-${m[1].toLowerCase()}`;

  // –¢–æ—Ç–∞–ª—ã
  m = core.match(/–¢–æ—Ç–∞–ª\s+–±–æ–ª—å—à–µ\s+([0-9]+(?:[.,][0-9]+)?)/i);
  if (m) return `–¢–æ—Ç–∞–ª –±–æ–ª—å—à–µ ${m[1].replace(',', '.')}`;
  m = core.match(/–¢–æ—Ç–∞–ª\s+–º–µ–Ω—å—à–µ\s+([0-9]+(?:[.,][0-9]+)?)/i);
  if (m) return `–¢–æ—Ç–∞–ª –º–µ–Ω—å—à–µ ${m[1].replace(',', '.')}`;
  m = core.match(/\b–¢–ë\s*([0-9]+(?:[.,][0-9]+)?)\b/i);
  if (m) return `–¢–æ—Ç–∞–ª –±–æ–ª—å—à–µ ${m[1].replace(',', '.')}`;
  m = core.match(/\b–¢–ú\s*([0-9]+(?:[.,][0-9]+)?)\b/i);
  if (m) return `–¢–æ—Ç–∞–ª –º–µ–Ω—å—à–µ ${m[1].replace(',', '.')}`;

  // –ü–æ–±–µ–¥–∞
  m = core.match(/^–ü–æ–±–µ–¥–∞\s+(.+)$/i);
  if (m) {
    const who = normalize(m[1]);
    if (who.includes(home)) return `–ü–æ–±–µ–¥–∞ ${homeName}`;
    if (who.includes(away)) return `–ü–æ–±–µ–¥–∞ ${awayName}`;
    return `–ü–æ–±–µ–¥–∞ ${favoriteName}`;
  }
  m = core.match(/^(.+?)\s+–ü–æ–±–µ–¥–∞$/i);
  if (m) {
    const who = normalize(m[1]);
    if (who.includes(home)) return `–ü–æ–±–µ–¥–∞ ${homeName}`;
    if (who.includes(away)) return `–ü–æ–±–µ–¥–∞ ${awayName}`;
    return `–ü–æ–±–µ–¥–∞ ${favoriteName}`;
  }

  // –§–æ—Ä–∞
  m = core.match(/^–§–æ—Ä–∞\s*([+\-]?[0-9]+(?:[.,][0-9]+)?)\s*–Ω–∞\s+(.+)$/i);
  if (m) {
    const sign = m[1].replace(',', '.');
    const who = normalize(m[2]);
    const out = who.includes(home) ? homeName : who.includes(away) ? awayName : favoriteName;
    const s = sign.startsWith('+') || sign.startsWith('-') ? sign : `+${sign}`;
    return `${out} –§–æ—Ä–∞ ${s}`;
  }
  m = core.match(/^(.+?)\s+–§–æ—Ä–∞\s*([+\-]?[0-9]+(?:[.,][0-9]+)?)$/i);
  if (m) {
    const who = normalize(m[1]);
    const sign = m[2].replace(',', '.');
    const out = who.includes(home) ? homeName : who.includes(away) ? awayName : favoriteName;
    const s = sign.startsWith('+') || sign.startsWith('-') ? sign : `+${sign}`;
    return `${out} –§–æ—Ä–∞ ${s}`;
  }

  // ¬´–ù–∏—á—å—è¬ª ‚Üí –ü–æ–±–µ–¥–∞ —Ñ–∞–≤–æ—Ä–∏—Ç–∞
  if (/^–Ω–∏—á—å—è$/i.test(core)) return `–ü–æ–±–µ–¥–∞ ${favoriteName}`;

  return `–ü–æ–±–µ–¥–∞ ${favoriteName}`;
}

// ‚Äî‚Äî‚Äî Favbet –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏ –≤—ã–±–æ—Ä –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ ‚Äî‚Äî‚Äî
function isFavbet(name='') { return String(name).toLowerCase().includes('fav'); }

function extract1x2FromPack(pack) {
  const books = pack?.bookmakers || [];
  const ordered = [...books.filter(b=>isFavbet(b.name)), ...books.filter(b=>!isFavbet(b.name))];
  for (const b of ordered) {
    const bet = (b.bets||[]).find(bt =>
      ['Match Winner','1X2','Full Time Result'].some(alias => String(bt.name).toLowerCase() === alias.toLowerCase())
    );
    if (!bet || !bet.values?.length) continue;
    const out = {};
    for (const v of bet.values) {
      const nm = String(v.value||'').toLowerCase();
      if (nm === 'home' || nm === '1') out.home = Number(v.odd);
      else if (nm === 'away' || nm === '2') out.away = Number(v.odd);
      else if (nm === 'draw' || nm === 'x') out.draw = Number(v.odd);
    }
    if (out.home || out.away) return out;
  }
  return null;
}

function chooseFavoriteName(homeName, awayName, pack) {
  const one = extract1x2FromPack(pack);
  if (one && typeof one.home==='number' && typeof one.away==='number') {
    return one.home <= one.away ? homeName : awayName;
  }
  return homeName; // —Ñ–æ–ª–±—ç–∫
}

function pickOddFromBook(book, market, outcome) {
  const bets = book.bets || [];
  const aliases = {
    '1X2': ['Match Winner','1X2','Full Time Result'],
    'Both Teams To Score': ['Both Teams Score','Both Teams to Score','Both Teams To Score'],
    'Total Goals': ['Over/Under','Total Goals'],
    'Handicap': ['Asian Handicap','Handicap','Spread']
  };
  const targets = aliases[market] || [market];

  for (const bet of bets) {
    if (!targets.some(a => String(bet.name).toLowerCase() === a.toLowerCase())) continue;
    for (const v of (bet.values || [])) {
      const nm = String(v.value || v.handicap || '').replace(',', '.');
      const odd = v.odd;
      switch (market) {
        case '1X2':
          if ((outcome==='1' && /^(1|home)$/i.test(nm)) ||
              (outcome==='2' && /^(2|away)$/i.test(nm)) ||
              (outcome==='X' && /^(x|draw)$/i.test(nm))) return odd;
          break;
        case 'Both Teams To Score':
          if ((outcome==='Yes' && /^yes$/i.test(nm)) || (outcome==='No' && /^no$/i.test(nm))) return odd;
          break;
        case 'Total Goals': {
          const over = outcome.startsWith('Over ');
          const num  = outcome.split(' ')[1];
          if ((over && /over/i.test(nm) && nm.includes(num)) ||
              (!over && /under/i.test(nm) && nm.includes(num))) return odd;
          break;
        }
        case 'Handicap': {
          const target = outcome.split(' ')[1]; // +1.0
          if (nm === target || nm === target.replace(/\.0$/,'') || target.includes(nm)) return odd;
          break;
        }
      }
    }
  }
  return null;
}

function pickOddFromPack(pack, market, outcome) {
  const books = pack?.bookmakers || [];
  const ordered = [...books.filter(b=>isFavbet(b.name)), ...books.filter(b=>!isFavbet(b.name))];
  for (const b of ordered) {
    const odd = pickOddFromBook(b, market, outcome);
    if (odd) return Number(odd).toFixed(2);
  }
  return null;
}

function detectMarketAndOutcome(predText, homeName, awayName) {
  const raw = predText||'';
  const core = stripContext(raw);
  const t = normalize(core);
  const home = normalize(homeName);
  const away = normalize(awayName);

  // –ü–æ–±–µ–¥–∞
  let m = core.match(/^–ü–æ–±–µ–¥–∞\s+(.+)$/i);
  if (m) {
    const who = normalize(m[1]);
    if (who.includes(home)) return { market:'1X2', outcome:'1' };
    if (who.includes(away)) return { market:'1X2', outcome:'2' };
    return { market:'1X2', outcome:'1' };
  }

  // –û–±–µ –∑–∞–±—å—é—Ç
  m = t.match(/^–æ–±–µ(?:\s+–∫–æ–º–∞–Ω–¥—ã)?\s+–∑–∞–±—å—é—Ç\s*[-:() ]*\s*(–¥–∞|–Ω–µ—Ç)$/i);
  if (m) return { market:'Both Teams To Score', outcome: m[1]==='–¥–∞'?'Yes':'No' };

  // –¢–æ—Ç–∞–ª—ã
  m = core.match(/^–¢–æ—Ç–∞–ª\s+–±–æ–ª—å—à–µ\s+([0-9]+(?:[.,][0-9]+)?)$/i);
  if (m) return { market:'Total Goals', outcome:`Over ${m[1].replace(',', '.')}` };
  m = core.match(/^–¢–æ—Ç–∞–ª\s+–º–µ–Ω—å—à–µ\s+([0-9]+(?:[.,][0-9]+)?)$/i);
  if (m) return { market:'Total Goals', outcome:`Under ${m[1].replace(',', '.')}` };

  // –§–æ—Ä–∞ "<–ö–æ–º–∞–Ω–¥–∞> –§–æ—Ä–∞ n"
  m = core.match(/^(.+?)\s+–§–æ—Ä–∞\s*([+\-]?[0-9]+(?:[.,][0-9]+)?)$/i);
  if (m) {
    const who = normalize(m[1]);
    const sign = m[2].replace(',', '.');
    const side = who.includes(home) ? 'home' : who.includes(away) ? 'away' : 'home';
    return { market:'Handicap', outcome:`${side} ${sign}` };
  }

  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî 1X2 —Ö–æ–∑—è–µ–≤
  return { market:'1X2', outcome:'1' };
}

// ‚Äî‚Äî‚Äî –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —á–µ—Ä–Ω–æ–≤–∏–∫–∏ ‚Äî‚Äî‚Äî
async function saveToDraft(preds) {
  const client = new MongoClient(MONGODB_URI);
  await client.connect();
  const db = client.db('predictionsDB');
  const coll = db.collection('draft_predictions');
  await coll.deleteMany({});
  if (preds.length) await coll.insertMany(preds);
  await client.close();
}

// ‚Äî‚Äî‚Äî –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ‚Äî‚Äî‚Äî
async function generatePredictions() {
  const matches = await fetchMatches(100);
  if (!matches.length) {
    await saveToDraft([]);
    return [];
  }

  const ai = await generateAllPredictions(matches);

  const cards = [];
  for (let i=0;i<matches.length;i++) {
    const match = matches[i];

    // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º Favbet
    const oddsPack = (await safeGet(ODDS_URL, { fixture: match.fixture.id, timezone: 'Europe/Kiev' }))?.[0] || null;
    const favorite = chooseFavoriteName(match.teams.home.name, match.teams.away.name, oddsPack);

    const raw = ai[i] || '';
    const predText = sanitizePredictionText(raw, match.teams.home.name, match.teams.away.name, favorite);

    const { market, outcome } = detectMarketAndOutcome(predText, match.teams.home.name, match.teams.away.name);
    let odd = pickOddFromPack(oddsPack, market, outcome);
    if (!odd) odd = getRandomOdds();

    cards.push({ match, predText, odd });
  }

  // –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–º–∞–Ω–¥
  const allTeams = matches.flatMap(m => [m.teams.home.name, m.teams.away.name]);
  const teamTranslations = await getTranslatedTeams(allTeams);

  // –ó–∞–ø–∏—Å—å –≤ —á–µ—Ä–Ω–æ–≤–∏–∫–∏
  const predictions = cards.map(({ match, predText, odd }, idx) => ({
    id: Date.now() + idx,
    country: match.league.country || '',
    league:  match.league.name || '',
    date:    ddmmyy(match.fixture.date),
    // —Å—Ç–∞—Ä–æ–µ –ø–æ–ª–µ (–Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ –µ—Å—Ç—å –æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
    tournament: `–§—É—Ç–±–æ–ª.${ddmmyy(match.fixture.date)} ${match.league.name || ''}`,
    team1: teamTranslations[match.teams.home.name] || match.teams.home.name,
    logo1: match.teams.home.logo,
    team2: teamTranslations[match.teams.away.name] || match.teams.away.name,
    logo2: match.teams.away.logo,
    odds: odd,
    predictionText: predText
  }));

  await saveToDraft(predictions);
  return predictions;
}

if (require.main === module) {
  generatePredictions()
    .then(() => console.log('‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞'))
    .catch(e => console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', e));
}

module.exports = { generatePredictions };
