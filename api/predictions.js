const express = require('express');
const { MongoClient } = require('mongodb');
const path = require('path');
const axios = require('axios');

const app = express();
app.use(express.json({ limit: '10mb' }));

const TelegramBot = require('node-telegram-bot-api');
const BOT_TOKEN = process.env.BOT_TOKEN;
const botApi = new TelegramBot(BOT_TOKEN, { polling: false });

const ADMIN_PASSWORD = process.env.ADMIN_PASSWORD || 'admin123';
const rootDir = path.join(__dirname, '..');
console.log('Root directory set to:', rootDir);

// üì© Webhook
app.post('/webhook', express.json({ limit: '10mb' }), async (req, res) => {
    console.log('üì© –í—ã–∑–≤–∞–Ω /webhook!');
    console.log('Headers:', req.headers);
    console.log('Body:', JSON.stringify(req.body, null, 2));

    try {
        if (!db) {
            console.error('‚ùå Database not connected during webhook');
            return res.sendStatus(200);
        }

        const body = req.body;

        // ‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ pre_checkout_query
        if (body.pre_checkout_query) {
            const queryId = body.pre_checkout_query.id;
            try {
                await axios.post(`https://api.telegram.org/bot${BOT_TOKEN}/answerPreCheckoutQuery`, {
                    pre_checkout_query_id: queryId,
                    ok: true
                });
                console.log(`‚úÖ –û—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ pre_checkout_query ${queryId}`);
            } catch (err) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ pre_checkout_query:', err.response?.data || err.message);
            }
            return res.sendStatus(200);
        }

        // ‚úÖ –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞
        if (body.message?.successful_payment) {
            const payload = body.message.successful_payment.invoice_payload;
            if (!payload) return res.sendStatus(200);

            let parsed;
            try {
                parsed = JSON.parse(payload);
            } catch (e) {
                console.error('‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π payload:', payload);
                return res.sendStatus(200);
            }

            const { userId, coins } = parsed;
            if (!userId || typeof coins !== 'number' || coins <= 0) {
                console.warn('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–ø–ª–∞—Ç—ã:', parsed);
                return res.sendStatus(200);
            }

            const users = db.collection('users');
            const result = await users.updateOne(
    { chatId: userId },
    {
        $inc: { coins },
        $setOnInsert: { chatId: userId } // ‚úÖ —É–±–∏—Ä–∞–µ–º coins –æ—Ç—Å—é–¥–∞
    },
    { upsert: true }
);

            console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø–æ–ª—É—á–∏–ª ${coins} –º–æ–Ω–µ—Ç. –†–µ–∑—É–ª—å—Ç–∞—Ç:`, result);
        } else {
            console.log('‚ö†Ô∏è –î—Ä—É–≥–æ–π —Ç–∏–ø webhook:', JSON.stringify(body));
        }

        res.sendStatus(200);
    } catch (e) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ webhook:', e.stack);
        res.sendStatus(200);
    }
});

// üè† –ö–æ—Ä–Ω–µ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
    res.sendFile(path.join(rootDir, 'welcome.html'));
});

// üåê –°—Ç–∞—Ç–∏–∫–∞
app.use(express.static(path.join(__dirname, '../'), { index: 'welcome.html' }));

// üõ†Ô∏è MongoDB
const uri = process.env.MONGODB_URI || "mongodb+srv://aiwinuser:aiwinsecure123@cluster0.detso80.mongodb.net/predictionsDB?retryWrites=true&w=majority&tls=true";
const client = new MongoClient(uri);
let db;

async function connectDB() {
    await client.connect();
    db = client.db("predictionsDB");
    console.log("‚úÖ MongoDB connected");
}
client.on('disconnected', () => connectDB().catch(console.error));
connectDB().then(() => app.listen(process.env.PORT || 3000, () => console.log('üöÄ Server started')));

// üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
app.post('/api/check-password', (req, res) => {
    const { password } = req.body;
    res.json({ success: password === ADMIN_PASSWORD });
});

// üí∞ –ë–∞–ª–∞–Ω—Å
app.post('/balance', async (req, res) => {
    const { userId, action, amount } = req.body;
    if (!userId) return res.status(400).json({ error: 'User ID required' });

    const users = db.collection('users');

    if (action === 'get') {
        let user = await users.findOne({ chatId: userId });
        if (!user) {
            await users.insertOne({ chatId: userId, coins: 5 });
            user = { coins: 5 };
        }
        return res.json({ coins: user.coins });
    }

    if (action === 'update') {
        const result = await users.findOneAndUpdate(
            { chatId: userId },
            { $inc: { coins: amount }, $setOnInsert: { chatId: userId, coins: 0 } },
            { upsert: true, returnDocument: 'after' }
        );
        return res.json({ coins: result.value.coins });
    }

    res.status(400).json({ error: 'Invalid action' });
});

// üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
app.get('/api/predictions', async (req, res) => {
    const userId = parseInt(req.query.userId, 10);
    const preds = await db.collection('predictions').find().toArray();

    if (!userId) {
        return res.json(preds.map(p => ({ ...p, isUnlocked: false })));
    }

    const unlocks = await db.collection('unlocks').find({ userId }).toArray();
    const unlockedIds = new Set(unlocks.map(u => u.predictionId));

    const result = preds.map(p => ({
        ...p,
        isUnlocked: unlockedIds.has(p.id)
    }));

    res.json(result);
});

// üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞
app.post('/api/unlock', async (req, res) => {
    const { userId, predictionId } = req.body;
    if (!userId || predictionId == null) return res.status(400).json({ error: 'Missing data' });

    const users = db.collection('users');
    const unlocks = db.collection('unlocks');

    const user = await users.findOne({ chatId: userId });
    if (!user || user.coins < 1) {
        return res.json({ success: false, message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç' });
    }

    await users.updateOne({ chatId: userId }, { $inc: { coins: -1 } });
    await unlocks.updateOne(
        { userId, predictionId },
        { $set: { userId, predictionId } },
        { upsert: true }
    );

    const updated = await users.findOne({ chatId: userId });
    res.json({ success: true, coins: updated.coins });
});

// üìù –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
app.post('/api/predictions', async (req, res) => {
    const arr = req.body;
    if (!Array.isArray(arr)) return res.status(400).json({ success: false });

    const cleaned = arr.map(p => {
        const { id, tournament, team1, logo1, team2, logo2, odds, predictionText } = p;
        return { id, tournament, team1, logo1, team2, logo2, odds, predictionText };
    });

    const coll = db.collection('predictions');
    await coll.deleteMany({});
    if (cleaned.length > 0) await coll.insertMany(cleaned);

    res.json({ success: true });
});

// üí≥ –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞
app.post('/create-invoice', async (req, res) => {
    if (!db) return res.status(503).json({ ok: false, error: 'DB unavailable' });

    const { userId, coins, stars } = req.body;

    if (!userId || !coins || !stars) {
        return res.status(400).json({ ok: false, error: 'Missing purchase data' });
    }

    try {
        const prices = [{ amount: stars, label: `${coins} –º–æ–Ω–µ—Ç` }];

        const link = await botApi.createInvoiceLink(
            `–ü–æ–∫—É–ø–∫–∞ ${coins} –º–æ–Ω–µ—Ç`,                          // title
            `–í—ã –ø–æ–ª—É—á–∏—Ç–µ ${coins} –º–æ–Ω–µ—Ç`,                     // description
            JSON.stringify({ userId, coins }),                // payload
            'redirect-index',                                 // üëà start_parameter
            'XTR',                                            // currency
            prices                                            // prices
        );

        console.log('üìÑ Invoice link created:', link);
        res.json({ ok: true, url: link });
    } catch (e) {
        console.error('‚ùå Error creating invoice:', e);
        res.status(500).json({ ok: false, error: e.message });
    }
});


// ‚õî –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
process.on('SIGTERM', () => client.close() && process.exit(0));
