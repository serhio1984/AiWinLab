const express = require('express');
const app = express();
app.use(express.json());

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ db —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω)
// –ù–∞–ø—Ä–∏–º–µ—Ä: const { MongoClient } = require('mongodb'); const db = client.db('yourDatabase');

app.post('/balance', async (req, res) => {
    if (!db) return res.status(503).json({ error: 'Database not available' });

    const { userId, action, amount } = req.body;
    console.log('üì© –ó–∞–ø—Ä–æ—Å /balance:', req.body); // –ª–æ–≥ –∑–∞–ø—Ä–æ—Å–∞

    if (!userId) return res.status(400).json({ error: 'User ID required' });

    try {
        const users = db.collection('users');

        if (action === 'update') {
            if (typeof amount !== 'number') {
                return res.status(400).json({ error: 'Amount must be a number' });
            }

            const result = await users.findOneAndUpdate(
                { chatId: userId },
                {
                    $inc: { coins: amount },
                    $setOnInsert: { chatId: userId, coins: 0 }
                },
                { upsert: true, returnDocument: 'after' }
            );

            console.log('‚úÖ –û–±–Ω–æ–≤–ª—ë–Ω –±–∞–ª–∞–Ω—Å:', result.value);
            res.json({ coins: result.value.coins });

        } else {
            const user = await users.findOne({ chatId: userId }) || { coins: 0 };
            console.log('‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω:', user);
            res.json({ coins: user.coins });
        }

    } catch (e) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:', e);
        res.status(500).json({ error: 'Server error' });
    }
});

// –î—Ä—É–≥–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, /api/predictions) –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
app.get('/api/predictions', (req, res) => {
    // –õ–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
    res.json([]);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`);
});

module.exports = app; // –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ –º–æ–¥—É–ª—å