const axios = require('axios');
const OpenAI = require('openai');
const { MongoClient } = require('mongodb');
const { getTranslatedTeams } = require('./translate-teams');

// === ENV / API KEYS ===
const FOOTBALL_API_KEY = process.env.FOOTBALL_API_KEY || '548e45339f74b3a936d49be6786124b0';
const OPENAI_KEY = process.env.OPENAI_API_KEY;
const MONGODB_URI =
  process.env.MONGODB_URI ||
  'mongodb+srv://aiwinuser:aiwinsecure123@cluster0.detso80.mongodb.net/predictionsDB?retryWrites=true&w=majority&tls=true';

// –§–ª–∞–≥: —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ï–≤—Ä–æ–ø—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –í–ö–õ)
const ONLY_EUROPE = process.env.ONLY_EUROPE !== 'false';

const openai = new OpenAI({ apiKey: OPENAI_KEY });

// === API URLs ===
const FIXTURES_URL = 'https://v3.football.api-sports.io/fixtures';
const ODDS_URL = 'https://v3.football.api-sports.io/odds';

// === –ü–µ—Ä–µ–≤–æ–¥—ã –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ (–¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏) ===
const TOURNAMENT_TRANSLATIONS = {
  'UEFA Champions League': '–õ–∏–≥–∞ –ß–µ–º–ø–∏–æ–Ω–æ–≤ –£–ï–§–ê',
  'UEFA Europa League': '–õ–∏–≥–∞ –ï–≤—Ä–æ–ø—ã –£–ï–§–ê',
  'UEFA Europa Conference League': '–õ–∏–≥–∞ –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π –£–ï–§–ê',
  'Premier League': '–ü—Ä–µ–º—å–µ—Ä-–õ–∏–≥–∞ –ê–Ω–≥–ª–∏–∏',
  'La Liga': '–õ–∞ –õ–∏–≥–∞ –ò—Å–ø–∞–Ω–∏–∏',
  'Serie A': '–°–µ—Ä–∏—è –ê –ò—Ç–∞–ª–∏–∏',
  'Bundesliga': '–ë—É–Ω–¥–µ—Å–ª–∏–≥–∞ –ì–µ—Ä–º–∞–Ω–∏–∏',
  'Ligue 1': '–õ–∏–≥–∞ 1 –§—Ä–∞–Ω—Ü–∏–∏',
  Eredivisie: '–≠—Ä–µ–¥–∏–≤–∏–∑–∏ –ù–∏–¥–µ—Ä–ª–∞–Ω–¥–æ–≤',
  'Primeira Liga': '–ü—Ä–∏–º–µ–π—Ä–∞ –õ–∏–≥–∞ –ü–æ—Ä—Ç—É–≥–∞–ª–∏–∏'
};

// === –ï–≤—Ä–æ–ø–∞: —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω/–º–µ—Ç–æ–∫ –∏ –ø—Ä–∞–≤–∏–ª–∞ ===
const EUROPEAN_COUNTRIES = [
  'England','Scotland','Wales','Northern Ireland','Ireland',
  'Spain','Italy','Germany','France','Netherlands','Portugal',
  'Belgium','Switzerland','Austria','Turkey','Greece','Denmark',
  'Norway','Sweden','Poland','Czech Republic','Czechia','Croatia',
  'Serbia','Romania','Hungary','Slovakia','Slovenia','Bulgaria',
  'Bosnia and Herzegovina','Bosnia & Herzegovina','North Macedonia',
  'Albania','Kosovo','Montenegro','Moldova','Ukraine','Belarus',
  'Lithuania','Latvia','Estonia','Finland','Iceland','Georgia',
  'Armenia','Azerbaijan','Cyprus','Malta','Luxembourg',
  'Liechtenstein','Andorra','San Marino','Monaco','Gibraltar',
  'Faroe Islands','Israel','Kazakhstan','Russia','International','World','Europe'
];

const UEFA_KEYWORDS = [
  'uefa','euro','europa','conference','champions league',
  'european championship','qualifying','qualification'
];

const norm = s => (s || '').toLowerCase().normalize('NFKD');

function isEuropeanMatch(m) {
  const country = norm(m.league?.country);
  const league = norm(m.league?.name);
  if (EUROPEAN_COUNTRIES.map(norm).includes(country)) return true;
  if ((country === 'international' || country === 'world' || country === 'europe') &&
      UEFA_KEYWORDS.some(k => league.includes(k))) return true;
  return false;
}

// === –ó–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –ø–æ –ö–∏–µ–≤—É ===
function getKievDateRangeForTomorrow() {
  const tz = 'Europe/Kiev';
  const kievNow = new Date(new Date().toLocaleString('en-US', { timeZone: tz }));
  const start = new Date(kievNow);
  start.setDate(start.getDate() + 1);
  start.setHours(0, 0, 0, 0);
  const end = new Date(start);
  end.setDate(end.getDate() + 1);
  const from = start.toISOString().split('T')[0];
  const to = end.toISOString().split('T')[0];
  return { from, to };
}

function getRandomOdds() {
  const odds = [1.5, 1.7, 1.9, 2.0, 2.3, 2.5, 3.0, 3.5];
  return odds[Math.floor(Math.random() * odds.length)].toFixed(2);
}

function formatTournament(match) {
  const date = new Date(match.fixture.date);
  const d = String(date.getDate()).padStart(2, '0');
  const m = String(date.getMonth() + 1).padStart(2, '0');
  const y = String(date.getFullYear()).slice(2);
  const league = TOURNAMENT_TRANSLATIONS[match.league.name] || match.league.name;
  return `–§—É—Ç–±–æ–ª.${d}.${m}.${y} ${league}`;
}

// === –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π GET —Å –ª–æ–≥–∞–º–∏ ===
async function safeGet(url, params) {
  try {
    const res = await axios.get(url, {
      headers: { 'x-apisports-key': FOOTBALL_API_KEY },
      params
    });
    const list = res.data?.response || [];
    console.log(`üîé GET ${url} ok | items=${list.length} | params=${JSON.stringify(params)}`);
    return list;
  } catch (e) {
    console.error(
      `‚ùå GET ${url} fail | status=${e.response?.status} | data=${JSON.stringify(e.response?.data) || e.message}`
    );
    return [];
  }
}

// === –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ç—á–µ–π –Ω–∞ –∑–∞–≤—Ç—Ä–∞ (—Å –º–Ω–æ–≥–æ—Å—Ç—É–ø–µ–Ω—á–∞—Ç—ã–º —Ñ–æ–ª–±—ç–∫–æ–º) ===
async function fetchMatches(maxCount = 40) {
  const tz = 'Europe/Kiev';
  const { from, to } = getKievDateRangeForTomorrow();

  let all = await safeGet(FIXTURES_URL, { date: from, timezone: tz });
  if (all.length === 0) all = await safeGet(FIXTURES_URL, { from, to, timezone: tz });
  if (all.length === 0) {
    const next = await safeGet(FIXTURES_URL, { next: 200, timezone: tz });
    if (next.length > 0) {
      const zStart = new Date(`${from}T00:00:00.000Z`);
      const zEnd = new Date(`${to}T00:00:00.000Z`);
      all = next.filter(m => {
        const dt = new Date(m.fixture.date);
        return dt >= zStart && dt < zEnd;
      });
      console.log(`üß© –§–æ–ª–±—ç–∫ next=200 ‚Üí –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –Ω–∞ –∑–∞–≤—Ç—Ä–∞: ${all.length}`);
    }
  }

  const leaguesList = [...new Set(all.map(m => `${m.league?.country} ‚Äî ${m.league?.name}`))].sort();
  console.log(`üìÖ –ó–∞–≤—Ç—Ä–∞ (–ö–∏–µ–≤): ${from} | –î–∏–∞–ø–∞–∑–æ–Ω: ${from} ‚Üí ${to}`);
  console.log(`üìä –í—Å–µ–≥–æ –º–∞—Ç—á–µ–π –ø–æ–ª—É—á–µ–Ω–æ: ${all.length}`);
  console.log(`üè∑Ô∏è –õ–∏–≥–∏/—Å—Ç—Ä–∞–Ω—ã (–æ–±—Ä–∞–∑—Ü—ã):\n  - ${leaguesList.slice(0, 80).join('\n  - ')}`);

  let selected = all;
  if (ONLY_EUROPE) {
    selected = all.filter(isEuropeanMatch);
    console.log(`üéØ –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞ –ï–≤—Ä–æ–ø–∞: ${selected.length}`);
  } else {
    console.log('üü° –§–∏–ª—å—Ç—Ä –ï–≤—Ä–æ–ø—ã –æ—Ç–∫–ª—é—á—ë–Ω (ONLY_EUROPE=false): –±–µ—Ä—ë–º –≤—Å–µ –º–∞—Ç—á–∏.');
  }

  // –ü—Ä–∏–æ—Ä–∏—Ç–µ–∑–∞—Ü–∏—è
  const EURO_REGEX = /(uefa|champions league|europa|conference|european championship|qualifying|qualification)/i;
  const FRIENDLY_REGEX = /(friendly|friendlies|club friendlies|—Ç–æ–≤–∞—Ä–∏—â–µ—Å–∫)/i;
  const TOP_LEAGUES = new Set([
    'Premier League','La Liga','Serie A','Bundesliga','Ligue 1','Eredivisie','Primeira Liga',
    'Scottish Premiership','Ukrainian Premier League','Belgian Pro League','Swiss Super League',
    'Austrian Bundesliga','Super Lig','Super League','Danish Superliga','Eliteserien','Allsvenskan',
    'Ekstraklasa','Czech Liga','1. HNL','HNL','NB I','SuperLiga','Liga I'
  ]);

  const leagueName = m => String(m.league?.name || '');
  const leagueType = m => String(m.league?.type || '');
  const isEuroCup = m => {
    const name = leagueName(m);
    const country = String(m.league?.country || '');
    return EURO_REGEX.test(name) || (/International|World|Europe/i.test(country) && EURO_REGEX.test(name));
  };
  const isFriendly = m => FRIENDLY_REGEX.test(leagueName(m)) || /friendly/i.test(leagueType(m));
  const isTopLeague = m => TOP_LEAGUES.has(leagueName(m));

  const priorityOf = m => {
    if (isEuroCup(m)) return 1;
    if (isFriendly(m)) return 2;
    if (isTopLeague(m)) return 3;
    return 4;
  };

  selected.sort((a, b) => {
    const pa = priorityOf(a);
    const pb = priorityOf(b);
    if (pa !== pb) return pa - pb;
    return new Date(a.fixture.date) - new Date(b.fixture.date);
  });

  const minTarget = Math.min(20, maxCount);
  if (selected.length < minTarget) {
    const map = new Map(selected.map(m => [m.fixture.id, m]));
    for (const m of all) {
      if (map.size >= maxCount) break;
      if (!map.has(m.fixture.id)) map.set(m.fixture.id, m);
    }
    selected = [...map.values()].sort((a, b) => {
      const pa = priorityOf(a), pb = priorityOf(b);
      if (pa !== pb) return pa - pb;
      return new Date(a.fixture.date) - new Date(b.fixture.date);
    });
    console.log(`üîÅ –î–æ–±—Ä–∞–ª–∏ –¥–æ: ${selected.length}`);
  }

  const final = selected.slice(0, maxCount);
  console.log(`‚úÖ –ò—Ç–æ–≥–æ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–ø–æ—Å–ª–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞): ${final.length}`);
  return final;
}

// ===================== –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –†–´–ù–ö–ê –î–õ–Ø –ü–†–û–ì–ù–û–ó–ê ======================
function normalize(s) {
  return (s || '').toLowerCase()
    .replace(/[‚Äì‚Äî‚àí]/g, '-')
    .replace(/\s+/g, ' ')
    .trim();
}

function detectMarket(predictionText, homeName, awayName) {
  const t = normalize(predictionText);

  // –ü–æ–±–µ–¥–∞ / –Ω–∏—á—å—è
  if (t.startsWith('–ø–æ–±–µ–¥–∞ ')) {
    if (t.includes(normalize(homeName))) return { market: '1X2', outcome: '1' };
    if (t.includes(normalize(awayName))) return { market: '1X2', outcome: '2' };
    return { market: '1X2', outcome: '1' }; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–æ–º
  }
  if (t === '–Ω–∏—á—å—è') return { market: '1X2', outcome: 'X' };

  // –î–≤–æ–π–Ω–æ–π —à–∞–Ω—Å: "{team} –∏–ª–∏ –Ω–∏—á—å—è" / "–Ω–∏—á—å—è –∏–ª–∏ {team}"
  const home = normalize(homeName), away = normalize(awayName);
  if ((t.includes(home) && t.includes('–∏–ª–∏ –Ω–∏—á—å—è')) || (t.startsWith('–Ω–∏—á—å—è –∏–ª–∏') && t.includes(home))) {
    return { market: 'Double Chance', outcome: '1X' };
  }
  if ((t.includes(away) && t.includes('–∏–ª–∏ –Ω–∏—á—å—è')) || (t.startsWith('–Ω–∏—á—å—è –∏–ª–∏') && t.includes(away))) {
    return { market: 'Double Chance', outcome: 'X2' };
  }
  // "{team} –Ω–µ –ø—Ä–æ–∏–≥—Ä–∞–µ—Ç"
  if (t.endsWith('–Ω–µ –ø—Ä–æ–∏–≥—Ä–∞–µ—Ç')) {
    if (t.includes(home)) return { market: 'Double Chance', outcome: '1X' };
    if (t.includes(away)) return { market: 'Double Chance', outcome: 'X2' };
  }

  // –û–±–µ –∑–∞–±—å—é—Ç (–¥–∞/–Ω–µ—Ç)
  const mBTTS = t.match(/^–æ–±–µ(?:\s+–∫–æ–º–∞–Ω–¥—ã)?\s+–∑–∞–±—å—é—Ç(?:\s*[-:() ]*\s*(–¥–∞|–Ω–µ—Ç))?$/i);
  if (mBTTS) {
    const yn = (mBTTS[1] || '–¥–∞').toLowerCase();
    return { market: 'Both Teams To Score', outcome: yn === '–¥–∞' ? 'Yes' : 'No' };
  }

  // –¢–æ—Ç–∞–ª—ã
  const mOver = t.match(/^—Ç–æ—Ç–∞–ª\s+–±–æ–ª—å—à–µ\s+([0-9]+(?:[.,][0-9]+)?)$/i) || t.match(/^—Ç–±\s*([0-9]+(?:[.,][0-9]+)?)$/i);
  if (mOver) return { market: 'Total Goals', outcome: `Over ${mOver[1].replace(',', '.')}` };
  const mUnder = t.match(/^—Ç–æ—Ç–∞–ª\s+–º–µ–Ω—å—à–µ\s+([0-9]+(?:[.,][0-9]+)?)$/i) || t.match(/^—Ç–º\s*([0-9]+(?:[.,][0-9]+)?)$/i);
  if (mUnder) return { market: 'Total Goals', outcome: `Under ${mUnder[1].replace(',', '.')}` };

  // –§–æ—Ä–∞ (–æ—Å—Ç–∞–≤–∏–º —Ñ–æ–ª–±—ç–∫–æ–º –Ω–∞ 1X2 –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥—ë–º)
  const mHcap = t.match(/^—Ñ–æ—Ä–∞\s*([+\-]?[0-9]+(?:[.,][0-9]+)?)\s*–Ω–∞\s+(.+)$/i);
  if (mHcap) {
    const sign = mHcap[1].replace(',', '.');
    const who = normalize(mHcap[2]);
    const side = who.includes(home) ? 'home' : who.includes(away) ? 'away' : 'home';
    return { market: 'Handicap', outcome: `${side} ${sign}` }; // –ø–æ–ø—ã—Ç–∞–µ–º—Å—è –ø–æ–∑–∂–µ
  }

  // –ù–∏—á–µ–≥–æ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏ ‚Äî –≤–æ–∑—å–º—ë–º 1X2 –¥–æ–º/–Ω–∏—á—å—è/–≥–æ—Å—Ç—å –ø–æ —ç–≤—Ä–∏—Å—Ç–∏–∫–µ
  return { market: '1X2', outcome: '1' };
}

// ================== –ü–†–ò–û–†–ò–¢–ï–¢ –ü–û –ë–£–ö–ú–ï–ö–ï–†–£: FAVBET ==========================
function isFavbet(name = '') {
  const n = String(name).toLowerCase();
  return n.includes('fav') || n.includes('favbet') || n.includes('fav bet');
}

// –ù–∞–π—Ç–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ API-Football –¥–ª—è –Ω—É–∂–Ω–æ–≥–æ market/outcome
function pickOddFromBook(book, wantedMarket, wantedOutcome) {
  const bets = book.bets || [];
  // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Ä—ã–Ω–∫–æ–≤ –≤ API-Football –∫ –Ω–∞—à–∏–º
  const marketAliases = {
    '1X2': ['Match Winner', '1X2', 'Full Time Result'],
    'Double Chance': ['Double Chance'],
    'Both Teams To Score': ['Both Teams Score', 'Both Teams to Score', 'Both Teams To Score'],
    'Total Goals': ['Over/Under', 'Total Goals'],
    'Handicap': ['Asian Handicap', 'Handicap']
  };

  const targets = marketAliases[wantedMarket] || [wantedMarket];
  for (const bet of bets) {
    if (!targets.some(alias => String(bet.name).toLowerCase() === String(alias).toLowerCase())) continue;

    // –ü–æ–∏—Å–∫ –Ω—É–∂–Ω–æ–≥–æ –∏—Å—Ö–æ–¥–∞
    const values = bet.values || [];
    // –ü—Ä–∏–≤–æ–¥–∏–º –ø–æ–¥–ø–∏—Å–∏ –∏—Å—Ö–æ–¥–æ–≤ –∫ –ø–æ–Ω—è—Ç–Ω—ã–º —Ñ–æ—Ä–º–∞–º
    for (const v of values) {
      const valName = String(v.value || v.handicap || '').replace(',', '.');
      const valOdd = v.odd;
      // –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ —Ä—ã–Ω–∫—É
      switch (wantedMarket) {
        case '1X2':
          if (['1','2','X','Home','Away','Draw'].includes(valName)) {
            if ((wantedOutcome === '1' && (valName === '1' || valName === 'Home')) ||
                (wantedOutcome === '2' && (valName === '2' || valName === 'Away')) ||
                (wantedOutcome === 'X' && (valName.toLowerCase() === 'x' || valName === 'Draw'))) {
              return valOdd;
            }
          }
          break;
        case 'Double Chance':
          if (['1X','X2','12'].includes(valName)) {
            if (valName === wantedOutcome) return valOdd;
          }
          break;
        case 'Both Teams To Score':
          if (/yes|no/i.test(valName)) {
            if ((wantedOutcome === 'Yes' && /yes/i.test(valName)) ||
                (wantedOutcome === 'No'  && /no/i.test(valName))) {
              return valOdd;
            }
          }
          break;
        case 'Total Goals': {
          // –ò—â–µ–º Over/Under N
          const over = wantedOutcome.startsWith('Over ');
          const num = wantedOutcome.split(' ')[1];
          if (over && (/Over/i.test(valName) && valName.includes(num))) return valOdd;
          if (!over && (/Under/i.test(valName) && valName.includes(num))) return valOdd;
          break;
        }
        case 'Handicap': {
          // –ü—Ä–æ–±—É–µ–º exact match –ø–æ handicap
          if (valName && wantedOutcome.toLowerCase().includes(valName.toLowerCase())) return valOdd;
          break;
        }
      }
    }
  }
  return null;
}

// –¢—è–Ω–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ –æ—Ç Favbet ‚Üí –∏–Ω–∞—á–µ –ª—é–±–æ–π –±—É–∫–µ—Ä ‚Üí –∏–Ω–∞—á–µ —Å–ª—É—á–∞–π–Ω—ã–π
async function fetchOddsForPrediction(fixtureId, predictionText, homeName, awayName) {
  const data = await safeGet(ODDS_URL, { fixture: fixtureId, timezone: 'Europe/Kiev' });
  if (!data?.length) return getRandomOdds();

  const { market, outcome } = detectMarket(predictionText, homeName, awayName);

  // –í –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –æ—Ç–≤–µ—Ç–∞—Ö –Ω–µ—Å–∫–æ–ª—å–∫–æ ¬´–ø–∞–∫–µ—Ç–æ–≤¬ª –ø–æ —Ä—ã–Ω–∫–∞–º; –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π
  const pack = data[0];
  const books = pack.bookmakers || [];

  // 1) Favbet
  let fav = books.find(b => isFavbet(b.name));
  if (fav) {
    const odd = pickOddFromBook(fav, market, outcome);
    if (odd) return Number(odd).toFixed(2);
  }

  // 2) –õ—é–±–æ–π –¥—Ä—É–≥–æ–π –±—É–∫–µ—Ä ‚Äî –ø–æ –Ω—É–∂–Ω–æ–º—É —Ä—ã–Ω–∫—É
  for (const book of books) {
    const odd = pickOddFromBook(book, market, outcome);
    if (odd) return Number(odd).toFixed(2);
  }

  // 3) –ù–µ –Ω–∞—à–ª–∏ ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π
  return getRandomOdds();
}

// === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ —á–µ—Ä–µ–∑ OpenAI (–¢–ï–ö–°–¢, –±–µ–∑ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤) ===
async function generateAllPredictions(matches) {
  const matchesList = matches
    .map((m, i) => `${i + 1}. ${m.teams.home.name} vs ${m.teams.away.name}`)
    .join('\n');

  const prompt = `
–¢—ã —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫.
–î–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Ç—á–∞ –ø—Ä–∏–¥—É–º–∞–π –∫—Ä–∞—Ç–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç–∞–≤–æ–∫.
–í–ê–ñ–ù–û:
- –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Ç–∏–ø –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è –≤—Å–µ—Ö –º–∞—Ç—á–µ–π.
- –ò–∑–±–µ–≥–∞–π –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —à–∞–±–ª–æ–Ω–æ–≤ –≤—Ä–æ–¥–µ "–ü–æ–±–µ–¥–∞ –∫–æ–º–∞–Ω–¥—ã".
- –ü—Ä–∏–º–µ–Ω–∏ —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å—Ç–∞–≤–æ–∫: —Ç–æ—Ç–∞–ª—ã, —Ñ–æ—Ä—ã, –Ω–∏—á—å–∏, –¥–≤–æ–π–Ω—ã–µ —à–∞–Ω—Å—ã, –æ–±–µ –∑–∞–±—å—é—Ç –∏ —Ç.–¥.
–ü—Ä–∏–º–µ—Ä—ã:
- –ü–æ–±–µ–¥–∞ {–∫–æ–º–∞–Ω–¥–∞}
- –ù–∏—á—å—è
- {–∫–æ–º–∞–Ω–¥–∞} –∏–ª–∏ –Ω–∏—á—å—è
- –î–≤–æ–π–Ω–æ–π —à–∞–Ω—Å {–∫–æ–º–∞–Ω–¥–∞} –∏–ª–∏ –Ω–∏—á—å—è
- –û–±–µ –∑–∞–±—å—é—Ç-–¥–∞ / –û–±–µ –∑–∞–±—å—é—Ç-–Ω–µ—Ç
- –¢–æ—Ç–∞–ª –±–æ–ª—å—à–µ 2.5 / –¢–æ—Ç–∞–ª –º–µ–Ω—å—à–µ 2.5
- –§–æ—Ä–∞ -1.5 –Ω–∞ {–∫–æ–º–∞–Ω–¥–∞}
- –§–æ—Ä–∞ +1.5 –Ω–∞ {–∫–æ–º–∞–Ω–¥–∞}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
1) –ò—Å–ø–æ–ª—å–∑—É–π —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∏—Å—Ö–æ–¥–æ–≤, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –ø–æ–±–µ–¥—É.
2) –û—Ç–≤–µ—Ç —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
1. –ø—Ä–æ–≥–Ω–æ–∑
2. –ø—Ä–æ–≥–Ω–æ–∑
...

–°–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π:
${matchesList}
`.trim();

  try {
    const response = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: [{ role: 'user', content: prompt }]
    });

    const resultText = response.choices?.[0]?.message?.content?.trim() || '';
    const list = resultText
      .split('\n')
      .map(line => line.replace(/^\d+\.\s*/, '').trim())
      .filter(Boolean);
    return list;
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ AI-–ø—Ä–æ–≥–Ω–æ–∑–∞:', e.message);
    return matches.map(m => `–ü–æ–±–µ–¥–∞ ${m.teams.home.name}`);
  }
}

// === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ –≤ MongoDB ===
async function saveToDraft(predictions) {
  const client = new MongoClient(MONGODB_URI);
  await client.connect();
  const db = client.db('predictionsDB');
  const draftColl = db.collection('draft_predictions');

  await draftColl.deleteMany({});
  if (predictions.length > 0) await draftColl.insertMany(predictions);

  await client.close();
  console.log(`üíæ –ß–µ—Ä–Ω–æ–≤–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: ${predictions.length}`);
}

// === –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ===
async function generatePredictions() {
  const matches = await fetchMatches(40);
  if (!matches.length) {
    console.warn('–ù–µ—Ç –º–∞—Ç—á–µ–π –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤.');
    await saveToDraft([]);
    return [];
  }

  // –ü–µ—Ä–µ–≤–æ–¥—ã –∫–æ–º–∞–Ω–¥
  const allTeams = matches.flatMap(m => [m.teams.home.name, m.teams.away.name]);
  const teamTranslations = await getTranslatedTeams(allTeams);

  // –ü—Ä–æ–≥–Ω–æ–∑—ã –ò–ò (—Å–Ω–∞—á–∞–ª–∞ —Ç–µ–∫—Å—Ç!)
  const aiPredictions = await generateAllPredictions(matches);

  // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã (Favbet –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ) ‚Äî –ø–æ–¥ –∫–∞–∂–¥—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞
  const withOdds = [];
  for (let i = 0; i < matches.length; i++) {
    const match = matches[i];
    const predText = aiPredictions[i] || `–ü–æ–±–µ–¥–∞ ${match.teams.home.name}`;
    const odd = await fetchOddsForPrediction(
      match.fixture.id,
      predText,
      match.teams.home.name,
      match.teams.away.name
    );
    withOdds.push({ match, odd, predText });
  }

  // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫
  const predictions = withOdds.map(({ match, odd, predText }, i) => ({
    id: Date.now() + i,
    tournament: formatTournament(match),
    team1: teamTranslations[match.teams.home.name] || match.teams.home.name,
    logo1: match.teams.home.logo,
    team2: teamTranslations[match.teams.away.name] || match.teams.away.name,
    logo2: match.teams.away.logo,
    odds: odd,
    predictionText: predText
  }));

  await saveToDraft(predictions);
  return predictions;
}

// === –ó–∞–ø—É—Å–∫ –Ω–∞–ø—Ä—è–º—É—é ===
if (require.main === module) {
  generatePredictions()
    .then(() => console.log('‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.'))
    .catch(err => console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', err));
}

module.exports = { generatePredictions };
