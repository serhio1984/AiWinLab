const axios = require('axios');
const OpenAI = require('openai');
const { MongoClient } = require('mongodb');
const { getTranslatedTeams } = require('./translate-teams');

// === ENV / API KEYS ===
const FOOTBALL_API_KEY = process.env.FOOTBALL_API_KEY || '548e45339f74b3a936d49be6786124b0';
const OPENAI_KEY = process.env.OPENAI_API_KEY;
const MONGODB_URI =
  process.env.MONGODB_URI ||
  'mongodb+srv://aiwinuser:aiwinsecure123@cluster0.detso80.mongodb.net/predictionsDB?retryWrites=true&w=majority&tls=true';

// –§–ª–∞–≥: —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ï–≤—Ä–æ–ø—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –í–ö–õ)
const ONLY_EUROPE = process.env.ONLY_EUROPE !== 'false';

const openai = new OpenAI({ apiKey: OPENAI_KEY });

// === API URLs ===
const FIXTURES_URL = 'https://v3.football.api-sports.io/fixtures';
const ODDS_URL = 'https://v3.football.api-sports.io/odds';

// === –ü–µ—Ä–µ–≤–æ–¥—ã –ª–∏–≥ —Å —É—á—ë—Ç–æ–º —Å—Ç—Ä–∞–Ω—ã (–ö–õ–Æ–ß: `${country}|${league}`) ===
const LEAGUE_TRANSLATIONS_BY_COUNTRY = {
  'International|UEFA Champions League': '–õ–∏–≥–∞ –ß–µ–º–ø–∏–æ–Ω–æ–≤ –£–ï–§–ê',
  'International|UEFA Europa League': '–õ–∏–≥–∞ –ï–≤—Ä–æ–ø—ã –£–ï–§–ê',
  'International|UEFA Europa Conference League': '–õ–∏–≥–∞ –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π –£–ï–§–ê',
  'Europe|UEFA Champions League': '–õ–∏–≥–∞ –ß–µ–º–ø–∏–æ–Ω–æ–≤ –£–ï–§–ê',
  'Europe|UEFA Europa League': '–õ–∏–≥–∞ –ï–≤—Ä–æ–ø—ã –£–ï–§–ê',
  'Europe|UEFA Europa Conference League': '–õ–∏–≥–∞ –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π –£–ï–§–ê',
  'World|UEFA Champions League': '–õ–∏–≥–∞ –ß–µ–º–ø–∏–æ–Ω–æ–≤ –£–ï–§–ê',
  'World|UEFA Europa League': '–õ–∏–≥–∞ –ï–≤—Ä–æ–ø—ã –£–ï–§–ê',
  'World|UEFA Europa Conference League': '–õ–∏–≥–∞ –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π –£–ï–§–ê',

  'England|Premier League': '–ü—Ä–µ–º—å–µ—Ä-–õ–∏–≥–∞ –ê–Ω–≥–ª–∏–∏',
  'Spain|La Liga': '–õ–∞ –õ–∏–≥–∞ –ò—Å–ø–∞–Ω–∏–∏',
  'Italy|Serie A': '–°–µ—Ä–∏—è –ê –ò—Ç–∞–ª–∏–∏',
  'Germany|Bundesliga': '–ë—É–Ω–¥–µ—Å–ª–∏–≥–∞ –ì–µ—Ä–º–∞–Ω–∏–∏',
  'France|Ligue 1': '–õ–∏–≥–∞ 1 –§—Ä–∞–Ω—Ü–∏–∏',
  'Netherlands|Eredivisie': '–≠—Ä–µ–¥–∏–≤–∏–∑–∏ –ù–∏–¥–µ—Ä–ª–∞–Ω–¥–æ–≤',
  'Portugal|Primeira Liga': '–ü—Ä–∏–º–µ–π—Ä–∞ –õ–∏–≥–∞ –ü–æ—Ä—Ç—É–≥–∞–ª–∏–∏',

  'Scotland|Premiership': '–®–æ—Ç–ª–∞–Ω–¥—Å–∫–∞—è –ü—Ä–µ–º—å–µ—Ä-–õ–∏–≥–∞',
  'Russia|Premier League': '–ü—Ä–µ–º—å–µ—Ä-–õ–∏–≥–∞ –†–æ—Å—Å–∏–∏',
  'Ukraine|Premier League': '–ü—Ä–µ–º—å–µ—Ä-–õ–∏–≥–∞ –£–∫—Ä–∞–∏–Ω—ã',
  'Belgium|Pro League': '–ü—Ä–æ –õ–∏–≥–∞ –ë–µ–ª—å–≥–∏–∏',
  'Austria|Bundesliga': '–ë—É–Ω–¥–µ—Å–ª–∏–≥–∞ –ê–≤—Å—Ç—Ä–∏–∏',
  'Switzerland|Super League': '–°—É–ø–µ—Ä–ª–∏–≥–∞ –®–≤–µ–π—Ü–∞—Ä–∏–∏',
  'Turkey|Super Lig': '–°—É–ø–µ—Ä –õ–∏–≥ –¢—É—Ä—Ü–∏–∏',
  'Greece|Super League 1': '–°—É–ø–µ—Ä–ª–∏–≥–∞ –ì—Ä–µ—Ü–∏–∏',
  'Poland|Ekstraklasa': '–≠–∫—Å—Ç—Ä–∞–∫–ª—è—Å–∞ –ü–æ–ª—å—à–∏'
};

// –ï–≤—Ä–æ–∫—É–±–∫–∏ ‚Äî –¥–µ—Ç–µ–∫—Ç–æ—Ä –ø–æ –∏–º–µ–Ω–∏/—Å—Ç—Ä–∞–Ω–µ
const UEFA_KEYWORDS = [
  'uefa','euro','europa','conference','champions league',
  'european championship','qualifying','qualification'
];

const lc = s => (s || '').toLowerCase().normalize('NFKD');

function isEuropeanMatch(m) {
  const country = lc(m.league?.country);
  const league = lc(m.league?.name);
  const EUROPEAN_COUNTRIES = [
    'england','scotland','wales','northern ireland','ireland',
    'spain','italy','germany','france','netherlands','portugal',
    'belgium','switzerland','austria','turkey','greece','denmark',
    'norway','sweden','poland','czech republic','czechia','croatia',
    'serbia','romania','hungary','slovakia','slovenia','bulgaria',
    'bosnia and herzegovina','north macedonia','albania','kosovo',
    'montenegro','moldova','ukraine','belarus','lithuania','latvia',
    'estonia','finland','iceland','georgia','armenia','azerbaijan',
    'cyprus','malta','luxembourg','liechtenstein','andorra','san marino',
    'monaco','gibraltar','faroe islands','israel','kazakhstan','russia',
    'international','world','europe'
  ];
  if (EUROPEAN_COUNTRIES.includes(country)) return true;
  if ((country === 'international' || country === 'world' || country === 'europe') &&
      UEFA_KEYWORDS.some(k => league.includes(k))) return true;
  return false;
}

// === –ó–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –ø–æ –ö–∏–µ–≤—É ===
function getKievDateRangeForTomorrow() {
  const tz = 'Europe/Kiev';
  const kievNow = new Date(new Date().toLocaleString('en-US', { timeZone: tz }));
  const start = new Date(kievNow);
  start.setDate(start.getDate() + 1);
  start.setHours(0, 0, 0, 0);
  const end = new Date(start);
  end.setDate(end.getDate() + 1);
  const from = start.toISOString().split('T')[0];
  const to = end.toISOString().split('T')[0];
  return { from, to };
}

function getRandomOdds() {
  const odds = [1.5, 1.7, 1.9, 2.0, 2.3, 2.5, 3.0, 3.5];
  return odds[Math.floor(Math.random() * odds.length)].toFixed(2);
}

function translateLeagueNameByCountry(leagueName, country) {
  const key = `${country}|${leagueName}`;
  if (LEAGUE_TRANSLATIONS_BY_COUNTRY[key]) return LEAGUE_TRANSLATIONS_BY_COUNTRY[key];
  // –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ—á–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
  return leagueName;
}

function formatTournament(match) {
  const date = new Date(match.fixture.date);
  const d = String(date.getDate()).padStart(2, '0');
  const m = String(date.getMonth() + 1).padStart(2, '0');
  const y = String(date.getFullYear()).slice(2);

  const leagueName = match.league.name || '';
  const country = match.league.country || '';

  // –ü–µ—Ä–µ–≤–æ–¥ —Å —É—á—ë—Ç–æ–º —Å—Ç—Ä–∞–Ω—ã
  const leagueLabel = translateLeagueNameByCountry(leagueName, country);

  // –û—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–µ–∂–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏ (–∫–ª–∏–µ–Ω—Ç –∑–∞–º–µ–Ω–∏—Ç "–§—É—Ç–±–æ–ª" –Ω–∞ —Å—Ç—Ä–∞–Ω—É)
  return `–§—É—Ç–±–æ–ª.${d}.${m}.${y} ${leagueLabel}`;
}

// === –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π GET —Å –ª–æ–≥–∞–º–∏ ===
async function safeGet(url, params) {
  try {
    const res = await axios.get(url, {
      headers: { 'x-apisports-key': FOOTBALL_API_KEY },
      params
    });
    const list = res.data?.response || [];
    console.log(`üîé GET ${url} ok | items=${list.length} | params=${JSON.stringify(params)}`);
    return list;
  } catch (e) {
    console.error(
      `‚ùå GET ${url} fail | status=${e.response?.status} | data=${JSON.stringify(e.response?.data) || e.message}`
    );
    return [];
  }
}

// === –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ç—á–µ–π –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ===
async function fetchMatches(maxCount = 40) {
  const tz = 'Europe/Kiev';
  const { from, to } = getKievDateRangeForTomorrow();

  let all = await safeGet(FIXTURES_URL, { date: from, timezone: tz });
  if (all.length === 0) all = await safeGet(FIXTURES_URL, { from, to, timezone: tz });
  if (all.length === 0) {
    const next = await safeGet(FIXTURES_URL, { next: 200, timezone: tz });
    if (next.length > 0) {
      const zStart = new Date(`${from}T00:00:00.000Z`);
      const zEnd = new Date(`${to}T00:00:00.000Z`);
      all = next.filter(m => {
        const dt = new Date(m.fixture.date);
        return dt >= zStart && dt < zEnd;
      });
      console.log(`üß© –§–æ–ª–±—ç–∫ next=200 ‚Üí –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: ${all.length}`);
    }
  }

  let selected = all;
  if (ONLY_EUROPE) {
    selected = all.filter(isEuropeanMatch);
    console.log(`üéØ –ï–≤—Ä–æ–ø–∞: ${selected.length}`);
  } else {
    console.log('üü° –§–∏–ª—å—Ç—Ä –ï–≤—Ä–æ–ø—ã –æ—Ç–∫–ª—é—á—ë–Ω');
  }

  // –ü—Ä–∏–æ—Ä–∏—Ç–µ–∑–∞—Ü–∏—è
  const EURO_REGEX = /(uefa|champions league|europa|conference|european championship|qualifying|qualification)/i;
  const FRIENDLY_REGEX = /(friendly|friendlies|club friendlies|—Ç–æ–≤–∞—Ä–∏—â–µ—Å–∫)/i;
  const TOP_LEAGUES = new Set([
    'Premier League','La Liga','Serie A','Bundesliga','Ligue 1','Eredivisie','Primeira Liga',
    'Scottish Premiership','Ukrainian Premier League','Belgian Pro League','Swiss Super League',
    'Austrian Bundesliga','Super Lig','Super League','Danish Superliga','Eliteserien','Allsvenskan',
    'Ekstraklasa','Czech Liga','1. HNL','HNL','NB I','SuperLiga','Liga I'
  ]);
  const leagueName = m => String(m.league?.name || '');
  const leagueType = m => String(m.league?.type || '');
  const isEuroCup = m => {
    const name = leagueName(m);
    const country = String(m.league?.country || '');
    return EURO_REGEX.test(name) || (/International|World|Europe/i.test(country) && EURO_REGEX.test(name));
  };
  const isFriendly = m => FRIENDLY_REGEX.test(leagueName(m)) || /friendly/i.test(leagueType(m));
  const isTopLeague = m => TOP_LEAGUES.has(leagueName(m));
  const priorityOf = m => (isEuroCup(m) ? 1 : isFriendly(m) ? 2 : isTopLeague(m) ? 3 : 4);

  selected.sort((a, b) => {
    const pa = priorityOf(a), pb = priorityOf(b);
    if (pa !== pb) return pa - pb;
    return new Date(a.fixture.date) - new Date(b.fixture.date);
  });

  if (selected.length < Math.min(20, maxCount)) {
    const map = new Map(selected.map(m => [m.fixture.id, m]));
    for (const m of all) {
      if (map.size >= maxCount) break;
      if (!map.has(m.fixture.id)) map.set(m.fixture.id, m);
    }
    selected = [...map.values()].sort((a, b) => {
      const pa = priorityOf(a), pb = priorityOf(b);
      if (pa !== pb) return pa - pb;
      return new Date(a.fixture.date) - new Date(b.fixture.date);
    });
  }

  const final = selected.slice(0, maxCount);
  console.log(`‚úÖ –ò—Ç–æ–≥–æ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${final.length}`);
  return final;
}

// ===================== –¢–ï–ö–°–¢ / –°–ê–ù–ò–¢–ê–ô–ó–ï–† ======================
function normalize(s) {
  return (s || '').toLowerCase()
    .replace(/[‚Äì‚Äî‚àí]/g, '-') // –¥–ª–∏–Ω–Ω—ã–µ —Ç–∏—Ä–µ ‚Üí –¥–µ—Ñ–∏—Å
    .replace(/\s+/g, ' ')
    .trim();
}

// —É–±–∏—Ä–∞–µ–º —Ö–≤–æ—Å—Ç—ã: "–≤/–Ω–∞ –º–∞—Ç—á–µ...", "–ø—Ä–æ—Ç–∏–≤...", "—Å...", —Ç–æ—á–∫–∏
function stripContext(raw) {
  return (raw || '')
    .replace(/\s*(?:–≤|–Ω–∞)\s+(?:–º–∞—Ç—á–µ|–∏–≥—Ä–µ)\b[^]*$/i, '')
    .replace(/\s*–ø—Ä–æ—Ç–∏–≤\s+.+$/i, '')
    .replace(/\s*—Å\s+.+$/i, '')
    .replace(/[\.\u3002]+$/,'')
    .trim();
}

/**
 * –ü—Ä–∏–≤–æ–¥–∏–º –ø—Ä–æ–≥–Ω–æ–∑ –∫ –æ–¥–Ω–æ–º—É –∏–∑ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤.
 * –ï—Å–ª–∏ ¬´–¥–≤–æ–π–Ω–æ–π —à–∞–Ω—Å¬ª/¬´–Ω–µ –ø—Ä–æ–∏–≥—Ä–∞–µ—Ç¬ª/¬´–Ω–∏—á—å—è¬ª/–Ω–µ—è—Å–Ω–æ—Å—Ç—å ‚Äî –≤—ã–±–∏—Ä–∞–µ–º favoriteName.
 */
function sanitizePredictionText(text, homeName, awayName, favoriteName) {
  if (!text) return text;

  const original = text.trim();
  const core = stripContext(original);

  const t = normalize(core);
  const home = normalize(homeName);
  const away = normalize(awayName);

  // –î–≤–æ–π–Ω–æ–π —à–∞–Ω—Å ‚Üí –ü–æ–±–µ–¥–∞ –∫–æ–º–∞–Ω–¥—ã (–∏–ª–∏ —Ñ–∞–≤–æ—Ä–∏—Ç–∞)
  let m =
    t.match(/^–¥–≤–æ–π–Ω–æ–π\s+—à–∞–Ω—Å[:\-\s]*(.+?)\s+–∏–ª–∏\s+–Ω–∏—á—å—è$/i) ||
    t.match(/^–Ω–∏—á—å—è\s+–∏–ª–∏\s+(.+?)$/i) ||
    t.match(/^(.+?)\s+–∏–ª–∏\s+–Ω–∏—á—å—è$/i);
  if (m) {
    const who = normalize(m[1]);
    if (who.includes(home)) return `–ü–æ–±–µ–¥–∞ ${homeName}`;
    if (who.includes(away)) return `–ü–æ–±–µ–¥–∞ ${awayName}`;
    return `–ü–æ–±–µ–¥–∞ ${favoriteName}`;
  }
  m = t.match(/^(.+?)\s+–Ω–µ\s+–ø—Ä–æ–∏–≥—Ä–∞–µ—Ç$/i);
  if (m) {
    const who = normalize(m[1]);
    if (who.includes(home)) return `–ü–æ–±–µ–¥–∞ ${homeName}`;
    if (who.includes(away)) return `–ü–æ–±–µ–¥–∞ ${awayName}`;
    return `–ü–æ–±–µ–¥–∞ ${favoriteName}`;
  }

  // –û–±–µ –∑–∞–±—å—é—Ç
  m = t.match(/^–æ–±–µ(?:\s+–∫–æ–º–∞–Ω–¥—ã)?\s+–∑–∞–±—å—é—Ç\s*[-:() ]*\s*(–¥–∞|–Ω–µ—Ç)$/i);
  if (m) return `–û–±–µ –∑–∞–±—å—é—Ç-${m[1].toLowerCase()}`;

  // –¢–æ—Ç–∞–ª—ã
  m = core.match(/–¢–æ—Ç–∞–ª\s+–±–æ–ª—å—à–µ\s+([0-9]+(?:[.,][0-9]+)?)/i);
  if (m) return `–¢–æ—Ç–∞–ª –±–æ–ª—å—à–µ ${m[1].replace(',', '.')}`;
  m = core.match(/–¢–æ—Ç–∞–ª\s+–º–µ–Ω—å—à–µ\s+([0-9]+(?:[.,][0-9]+)?)/i);
  if (m) return `–¢–æ—Ç–∞–ª –º–µ–Ω—å—à–µ ${m[1].replace(',', '.')}`;
  m = core.match(/\b–¢–ë\s*([0-9]+(?:[.,][0-9]+)?)\b/i);
  if (m) return `–¢–æ—Ç–∞–ª –±–æ–ª—å—à–µ ${m[1].replace(',', '.')}`;
  m = core.match(/\b–¢–ú\s*([0-9]+(?:[.,][0-9]+)?)\b/i);
  if (m) return `–¢–æ—Ç–∞–ª –º–µ–Ω—å—à–µ ${m[1].replace(',', '.')}`;

  // –ü–æ–±–µ–¥–∞ –∫–æ–º–∞–Ω–¥—ã
  m = core.match(/^–ü–æ–±–µ–¥–∞\s+(.+)$/i);
  if (m) {
    const who = normalize(m[1]);
    if (who.includes(home)) return `–ü–æ–±–µ–¥–∞ ${homeName}`;
    if (who.includes(away)) return `–ü–æ–±–µ–¥–∞ ${awayName}`;
    return `–ü–æ–±–µ–¥–∞ ${favoriteName}`;
  }
  m = core.match(/^(.+?)\s+–ü–æ–±–µ–¥–∞$/i);
  if (m) {
    const who = normalize(m[1]);
    if (who.includes(home)) return `–ü–æ–±–µ–¥–∞ ${homeName}`;
    if (who.includes(away)) return `–ü–æ–±–µ–¥–∞ ${awayName}`;
    return `–ü–æ–±–µ–¥–∞ ${favoriteName}`;
  }

  // –§–æ—Ä–∞
  m = core.match(/^–§–æ—Ä–∞\s*([+\-]?[0-9]+(?:[.,][0-9]+)?)\s*–Ω–∞\s+(.+)$/i);
  if (m) {
    const sign = m[1].replace(',', '.');
    const who = normalize(m[2]);
    const outName = who.includes(home) ? homeName : who.includes(away) ? awayName : favoriteName;
    const signNorm = sign.startsWith('+') || sign.startsWith('-') ? sign : `+${sign}`;
    return `${outName} –§–æ—Ä–∞ ${signNorm}`;
  }
  m = core.match(/^(.+?)\s+–§–æ—Ä–∞\s*([+\-]?[0-9]+(?:[.,][0-9]+)?)$/i);
  if (m) {
    const who = normalize(m[1]);
    const outName = who.includes(home) ? homeName : who.includes(away) ? awayName : favoriteName;
    const sign = m[2].replace(',', '.');
    const signNorm = sign.startsWith('+') || sign.startsWith('-') ? sign : `+${sign}`;
    return `${outName} –§–æ—Ä–∞ ${signNorm}`;
  }

  // ¬´–ù–∏—á—å—è¬ª ‚Üí –ü–æ–±–µ–¥–∞ —Ñ–∞–≤–æ—Ä–∏—Ç–∞
  if (/^–Ω–∏—á—å—è$/i.test(core)) return `–ü–æ–±–µ–¥–∞ ${favoriteName}`;

  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –ü–æ–±–µ–¥–∞ —Ñ–∞–≤–æ—Ä–∏—Ç–∞
  return `–ü–æ–±–µ–¥–∞ ${favoriteName}`;
}

// ===================== –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –†–´–ù–ö–ê ======================
function detectMarket(predictionText, homeName, awayName) {
  const raw = predictionText || '';
  const core = stripContext(raw);
  const t = normalize(core);
  const home = normalize(homeName);
  const away = normalize(awayName);

  // –ü–æ–±–µ–¥–∞ –ö–æ–º–∞–Ω–¥–∞
  let m = core.match(/^–ü–æ–±–µ–¥–∞\s+(.+)$/i);
  if (m) {
    const who = normalize(m[1]);
    if (who.includes(home)) return { market: '1X2', outcome: '1' };
    if (who.includes(away)) return { market: '1X2', outcome: '2' };
    return { market: '1X2', outcome: '1' };
  }

  // –û–±–µ –∑–∞–±—å—é—Ç-–¥–∞/–Ω–µ—Ç
  m = t.match(/^–æ–±–µ(?:\s+–∫–æ–º–∞–Ω–¥—ã)?\s+–∑–∞–±—å—é—Ç\s*[-:() ]*\s*(–¥–∞|–Ω–µ—Ç)$/i);
  if (m) return { market: 'Both Teams To Score', outcome: m[1].toLowerCase() === '–¥–∞' ? 'Yes' : 'No' };

  // –¢–æ—Ç–∞–ª—ã
  m = core.match(/^–¢–æ—Ç–∞–ª\s+–±–æ–ª—å—à–µ\s+([0-9]+(?:[.,][0-9]+)?)$/i);
  if (m) return { market: 'Total Goals', outcome: `Over ${m[1].replace(',', '.')}` };
  m = core.match(/^–¢–æ—Ç–∞–ª\s+–º–µ–Ω—å—à–µ\s+([0-9]+(?:[.,][0-9]+)?)$/i);
  if (m) return { market: 'Total Goals', outcome: `Under ${m[1].replace(',', '.')}` };

  // –§–æ—Ä–∞ "<–ö–æ–º–∞–Ω–¥–∞> –§–æ—Ä–∞ n"
  m = core.match(/^(.+?)\s+–§–æ—Ä–∞\s*([+\-]?[0-9]+(?:[.,][0-9]+)?)$/i);
  if (m) {
    const who = normalize(m[1]);
    const sign = m[2].replace(',', '.');
    const side = who.includes(home) ? 'home' : who.includes(away) ? 'away' : 'home';
    return { market: 'Handicap', outcome: `${side} ${sign}` };
  }

  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî 1X2 —Ö–æ–∑—è–µ–≤
  return { market: '1X2', outcome: '1' };
}

// ================== Favbet / 1X2 / —Ñ–∞–≤–æ—Ä–∏—Ç ====================
function isFavbet(name = '') {
  const n = String(name).toLowerCase();
  return n.includes('fav') || n.includes('favbet') || n.includes('fav bet');
}

function pickOddFromBook(book, wantedMarket, wantedOutcome) {
  const bets = book.bets || [];
  const marketAliases = {
    '1X2': ['Match Winner', '1X2', 'Full Time Result'],
    'Both Teams To Score': ['Both Teams Score','Both Teams to Score','Both Teams To Score'],
    'Total Goals': ['Over/Under','Total Goals'],
    'Handicap': ['Asian Handicap','Handicap','Spread']
  };
  const targets = marketAliases[wantedMarket] || [wantedMarket];

  for (const bet of bets) {
    if (!targets.some(alias => String(bet.name).toLowerCase() === String(alias).toLowerCase())) continue;
    const values = bet.values || [];

    for (const v of values) {
      const valName = String(v.value || v.handicap || '').replace(',', '.');
      const odd = v.odd;

      switch (wantedMarket) {
        case '1X2':
          if ((wantedOutcome === '1' && (/^(1|Home)$/i.test(valName))) ||
              (wantedOutcome === '2' && (/^(2|Away)$/i.test(valName))) ||
              (wantedOutcome === 'X' && (/^(X|Draw)$/i.test(valName)))) {
            return odd;
          }
          break;

        case 'Both Teams To Score':
          if (/^yes$/i.test(valName) && wantedOutcome === 'Yes') return odd;
          if (/^no$/i.test(valName)  && wantedOutcome === 'No')  return odd;
          break;

        case 'Total Goals': {
          const over = wantedOutcome.startsWith('Over ');
          const num = wantedOutcome.split(' ')[1];
          if (over && (/Over/i.test(valName) && valName.includes(num))) return odd;
          if (!over && (/Under/i.test(valName) && valName.includes(num))) return odd;
          break;
        }

        case 'Handicap': {
          const targetH = wantedOutcome.split(' ')[1]; // "+1.0"
          if (valName && (valName === targetH || valName === targetH.replace(/\.0$/, '') || targetH.includes(valName))) {
            return odd;
          }
          break;
        }
      }
    }
  }
  return null;
}

function extract1x2FromPack(pack) {
  const books = pack?.bookmakers || [];
  const order = [
    ...books.filter(b => isFavbet(b.name)),
    ...books.filter(b => !isFavbet(b.name))
  ];
  for (const b of order) {
    const bet = (b.bets || []).find(bt =>
      ['Match Winner','1X2','Full Time Result'].some(alias =>
        String(bt.name).toLowerCase() === alias.toLowerCase()
      )
    );
    if (bet && bet.values?.length) {
      const out = {};
      for (const v of bet.values) {
        const name = String(v.value).toLowerCase();
        if (name === 'home' || name === '1') out.home = Number(v.odd);
        else if (name === 'away' || name === '2') out.away = Number(v.odd);
        else if (name === 'draw' || name === 'x') out.draw = Number(v.odd);
      }
      if (out.home || out.away) return out;
    }
  }
  return null;
}

function chooseFavoriteName(homeName, awayName, pack) {
  const oneXTwo = extract1x2FromPack(pack);
  if (oneXTwo && typeof oneXTwo.home === 'number' && typeof oneXTwo.away === 'number') {
    return oneXTwo.home <= oneXTwo.away ? homeName : awayName;
  }
  return homeName;
}

function pickOddFromPack(pack, wantedMarket, wantedOutcome) {
  const books = pack?.bookmakers || [];
  const ordered = [
    ...books.filter(b => isFavbet(b.name)),
    ...books.filter(b => !isFavbet(b.name))
  ];
  for (const b of ordered) {
    const odd = pickOddFromBook(b, wantedMarket, wantedOutcome);
    if (odd) return Number(odd).toFixed(2);
  }
  return null;
}

// === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ (—Å—Ç—Ä–æ–≥–æ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã) ===
async function generateAllPredictions(matches) {
  const matchesList = matches
    .map((m, i) => `${i + 1}. ${m.teams.home.name} vs ${m.teams.away.name}`)
    .join('\n');

  const prompt = `
–¢—ã —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫.
–°–ì–ï–ù–ï–†–ò–†–£–ô –ø–æ –æ–¥–Ω–æ–º—É –ø—Ä–æ–≥–Ω–æ–∑—É –Ω–∞ –∫–∞–∂–¥—ã–π –º–∞—Ç—á –°–¢–†–û–ì–û –≤ –æ–¥–Ω–æ–º –∏–∑ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ (—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫).

–î–û–ü–£–°–¢–ò–ú–´–ï –®–ê–ë–õ–û–ù–´ (—Ä–æ–≤–Ω–æ –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –Ω–∞ –º–∞—Ç—á, –±–µ–∑ —Ç–æ—á–µ–∫/—Ö–≤–æ—Å—Ç–æ–≤):
1) "–ü–æ–±–µ–¥–∞ <—Ç–æ—á–Ω–æ–µ –∏–º—è –∫–æ–º–∞–Ω–¥—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ>"
2) "–¢–æ—Ç–∞–ª –±–æ–ª—å—à–µ <—á–∏—Å–ª–æ>"
3) "–¢–æ—Ç–∞–ª –º–µ–Ω—å—à–µ <—á–∏—Å–ª–æ>"
4) "–û–±–µ –∑–∞–±—å—é—Ç-–¥–∞"
5) "–û–±–µ –∑–∞–±—å—é—Ç-–Ω–µ—Ç"
6) "<—Ç–æ—á–Ω–æ–µ –∏–º—è –∫–æ–º–∞–Ω–¥—ã> –§–æ—Ä–∞ <+/-—á–∏—Å–ª–æ>"

–ó–ê–ü–†–ï–©–ï–ù–û:
- –õ—é–±—ã–µ —Ö–≤–æ—Å—Ç—ã ("–≤ –º–∞—Ç—á–µ ...", "–ø—Ä–æ—Ç–∏–≤ ...", "—Å ..."), –¥–≤–æ–µ—Ç–æ—á–∏—è, —Ç–æ—á–∫–∏.
- –õ—é–±—ã–µ –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã (–≤–∫–ª—é—á–∞—è "–î–≤–æ–π–Ω–æ–π —à–∞–Ω—Å" –∏ "–ù–∏—á—å—è").
- –ù–µ —É–∫–∞–∑—ã–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É —Ç–∞–º, –≥–¥–µ –æ–Ω–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è.

–°–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π:
${matchesList}
`.trim();

  try {
    const response = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: [{ role: 'user', content: prompt }],
      temperature: 0.7
    });

    let lines = (response.choices?.[0]?.message?.content || '')
      .split('\n')
      .map(s => s.trim())
      .filter(Boolean)
      .map(s => s.replace(/^\d+\.\s*/, ''));

    return lines;
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ AI-–ø—Ä–æ–≥–Ω–æ–∑–∞:', e.message);
    // –§–æ–ª–±—ç–∫ ‚Äî –ü–æ–±–µ–¥–∞ —Ö–æ–∑—è–µ–≤
    return matches.map(m => `–ü–æ–±–µ–¥–∞ ${m.teams.home.name}`);
  }
}

// === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ –≤ MongoDB ===
async function saveToDraft(predictions) {
  const client = new MongoClient(MONGODB_URI);
  await client.connect();
  const db = client.db('predictionsDB');
  const draftColl = db.collection('draft_predictions');

  await draftColl.deleteMany({});
  if (predictions.length > 0) await draftColl.insertMany(predictions);

  await client.close();
  console.log(`üíæ –ß–µ—Ä–Ω–æ–≤–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: ${predictions.length}`);
}

// ====== –°–û–†–¢–ò–†–û–í–ö–ê –ü–û –°–¢–†–ê–ù–ï (–¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞) ======
const COUNTRY_ORDER = [
  'England','Spain','Italy','Germany','France','Netherlands','Portugal',
  'Scotland','Turkey','Greece','Belgium','Austria','Switzerland','Poland','Ukraine'
];

function countryRank(countryRaw) {
  const c = String(countryRaw || '').trim();
  const idx = COUNTRY_ORDER.indexOf(c);
  return idx !== -1 ? idx : COUNTRY_ORDER.length + 1;
}

// === –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ===
async function generatePredictions() {
  const matches = await fetchMatches(40);
  if (!matches.length) {
    console.warn('–ù–µ—Ç –º–∞—Ç—á–µ–π –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤.');
    await saveToDraft([]);
    return [];
  }

  // 1) –ß–µ—Ä–Ω–æ–≤—ã–µ —Ç–µ–∫—Å—Ç—ã –æ—Ç –ò–ò
  let aiPredictions = await generateAllPredictions(matches);

  // 2) –°–æ–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ (–º–∞—Ç—á + –ø—Ä–æ–≥–Ω–æ–∑ + –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç)
  const cards = [];

  for (let i = 0; i < matches.length; i++) {
    const match = matches[i];

    // –ü–∞–∫–µ—Ç –∫–æ—Ç–∏—Ä–æ–≤–æ–∫ (–æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞ –º–∞—Ç—á)
    const oddsPacks = await safeGet(ODDS_URL, { fixture: match.fixture.id, timezone: 'Europe/Kiev' });
    const pack = oddsPacks?.[0] || null;

    // –§–∞–≤–æ—Ä–∏—Ç –ø–æ 1X2
    const favoriteName = chooseFavoriteName(match.teams.home.name, match.teams.away.name, pack);

    // –°–∞–Ω–∏—Ç–∞–π–∑–µ—Ä
    const raw = aiPredictions[i] || '';
    const predText = sanitizePredictionText(raw, match.teams.home.name, match.teams.away.name, favoriteName);

    // –î–µ—Ç–µ–∫—Ç —Ä—ã–Ω–∫–∞ –∏ –≤—ã—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞
    const { market, outcome } = detectMarket(predText, match.teams.home.name, match.teams.away.name);
    let odd = pickOddFromPack(pack, market, outcome);
    if (!odd) odd = getRandomOdds();

    cards.push({ match, predText, odd });
  }

  // 3) –°–û–†–¢–ò–†–û–í–ö–ê: –µ–≤—Ä–æ–∫—É–±–∫–∏ ‚Üí —Å—Ç—Ä–∞–Ω—ã ‚Üí –¥–∞—Ç–∞ ‚Üí –ª–∏–≥–∞
  const EURO_REGEX = /(uefa|champions league|europa|conference|european championship|qualifying|qualification)/i;
  cards.sort((a, b) => {
    const la = String(a.match.league?.name || '');
    const lb = String(b.match.league?.name || '');
    const ca = String(a.match.league?.country || '');
    const cb = String(b.match.league?.country || '');

    const aIsEuro = EURO_REGEX.test(la) || /International|World|Europe/i.test(ca) && EURO_REGEX.test(la);
    const bIsEuro = EURO_REGEX.test(lb) || /International|World|Europe/i.test(cb) && EURO_REGEX.test(lb);
    if (aIsEuro !== bIsEuro) return aIsEuro ? -1 : 1;

    if (!aIsEuro && !bIsEuro) {
      const ra = countryRank(ca);
      const rb = countryRank(cb);
      if (ra !== rb) return ra - rb;
    }

    const ta = new Date(a.match.fixture.date).getTime();
    const tb = new Date(b.match.fixture.date).getTime();
    if (ta !== tb) return ta - tb;

    return la.localeCompare(lb);
  });

  // 4) –ü–µ—Ä–µ–≤–æ–¥—ã –∫–æ–º–∞–Ω–¥ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
  const allTeams = matches.flatMap(m => [m.teams.home.name, m.teams.away.name]);
  const teamTranslations = await getTranslatedTeams(allTeams);

  // 5) –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –ë–î ‚Äî –î–û–ë–ê–í–õ–Ø–ï–ú country
  const predictions = cards.map(({ match, predText, odd }, i) => ({
    id: Date.now() + i,
    country: match.league.country || '',                         // <‚Äî –¥–æ–±–∞–≤–∏–ª–∏ —è–≤–Ω—É—é —Å—Ç—Ä–∞–Ω—É
    tournament: formatTournament(match),                         // —Ç–µ–∫—Å—Ç ¬´–§—É—Ç–±–æ–ª.dd.mm.yy ‚Ä¶¬ª (—É–∂–µ –±–µ–∑ –æ—à–∏–±–∫–∏ –ê–Ω–≥–ª–∏–∏)
    team1: teamTranslations[match.teams.home.name] || match.teams.home.name,
    logo1: match.teams.home.logo,
    team2: teamTranslations[match.teams.away.name] || match.teams.away.name,
    logo2: match.teams.away.logo,
    odds: odd,
    predictionText: predText
  }));

  // 6) –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
  await saveToDraft(predictions);
  return predictions;
}

// === –ó–∞–ø—É—Å–∫ –Ω–∞–ø—Ä—è–º—É—é ===
if (require.main === module) {
  generatePredictions()
    .then(() => console.log('‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.'))
    .catch(err => console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', err));
}

module.exports = { generatePredictions };
