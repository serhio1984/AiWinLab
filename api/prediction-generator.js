const axios = require('axios');
const OpenAI = require('openai');

const ODDS_API_KEY = process.env.ODDS_API_KEY || 'd0c08025a01a64651cd3c9d15a29e242';
const OPENAI_KEY = process.env.OPENAI_API_KEY;

const openai = new OpenAI({ apiKey: OPENAI_KEY });

const ODDS_API_URL = `https://api.the-odds-api.com/v4/sports/soccer/odds/?regions=eu&markets=h2h&apiKey=${ODDS_API_KEY}`;

// –°–ª—É—á–∞–π–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã (–µ—Å–ª–∏ –Ω–µ—Ç –æ—Ç API)
function getRandomOdds() {
  const odds = [1.5, 1.7, 1.9, 2.0, 2.3, 2.5, 3.0, 3.5];
  return odds[Math.floor(Math.random() * odds.length)].toFixed(2);
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ç—á–µ–π —Å Odds API
async function fetchMatches() {
  try {
    const res = await axios.get(ODDS_API_URL);
    const games = res.data || [];

    const matches = games.map((g, i) => ({
      id: Date.now() + i,
      tournament: g.sport_title || '–§—É—Ç–±–æ–ª',
      team1: g.home_team,
      logo1: 'https://img.icons8.com/fluency/48/soccer-ball.png', // –∑–∞–≥–ª—É—à–∫–∞
      team2: g.away_team,
      logo2: 'https://img.icons8.com/fluency/48/soccer-ball.png',
      odds: g.bookmakers?.[0]?.markets?.[0]?.outcomes?.[0]?.price || getRandomOdds()
    }));

    console.log(`üéØ –ù–∞–π–¥–µ–Ω–æ –º–∞—Ç—á–µ–π (Odds API): ${matches.length}`);
    return matches;
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ç—á–µ–π —Å The Odds API:', e.message);
    return [];
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
async function generateAllPredictions(matches) {
  const matchesList = matches
    .map((m, i) => `${i + 1}. ${m.team1} vs ${m.team2}`)
    .join("\n");

  const prompt = `
–¢—ã —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫. 
–°–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Ç—á–∞ –Ω–∏–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç–∞–≤–æ–∫ 
(–Ω–∞–ø—Ä–∏–º–µ—Ä: "–ü–æ–±–µ–¥–∞ {team1}", "–¢–æ—Ç–∞–ª –±–æ–ª—å—à–µ 2.5", "–§–æ—Ä–∞ -1.5 –Ω–∞ {team2}", "–î–≤–æ–π–Ω–æ–π —à–∞–Ω—Å {team1} –∏–ª–∏ –Ω–∏—á—å—è", "–ù–∏—á—å—è").
–û—Ç–≤–µ—Ç—å —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–Ω–æ–º–µ—Ä. –ø—Ä–æ–≥–Ω–æ–∑" –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π.
–°–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π:
${matchesList}
  `;

  try {
    const response = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: [{ role: 'user', content: prompt }],
    });

    const resultText = response.choices[0].message.content.trim();
    const predictions = resultText.split("\n").map(line => line.replace(/^\d+\.\s*/, '').trim());
    return predictions;
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ AI-–ø—Ä–æ–≥–Ω–æ–∑–∞:', e.message);
    return matches.map(m => `–ü–æ–±–µ–¥–∞ ${m.team1}`);
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 20 –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
async function generatePredictions() {
  let matches = await fetchMatches();
  if (!matches.length) {
    console.warn('–ù–µ—Ç –º–∞—Ç—á–µ–π —Å The Odds API.');
    return [];
  }

  // –ë–µ—Ä—ë–º –º–∞–∫—Å–∏–º—É–º 20 –º–∞—Ç—á–µ–π
  matches = matches.slice(0, 20);

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã
  const aiPredictions = await generateAllPredictions(matches);

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
  const predictions = matches.map((match, i) => ({
    id: match.id,
    tournament: match.tournament,
    team1: match.team1,
    logo1: match.logo1,
    team2: match.team2,
    logo2: match.logo2,
    odds: match.odds,
    predictionText: aiPredictions[i] || `–ü–æ–±–µ–¥–∞ ${match.team1}`
  }));

  // –ï—Å–ª–∏ –º–∞—Ç—á–µ–π < 20, –¥—É–±–ª–∏—Ä—É–µ–º
  while (predictions.length < 20 && matches.length > 0) {
    const randomMatch = matches[Math.floor(Math.random() * matches.length)];
    predictions.push({
      ...randomMatch,
      id: Date.now() + predictions.length,
      predictionText: `–ü–æ–±–µ–¥–∞ ${randomMatch.team1}`
    });
  }

  console.log(`‚úÖ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: ${predictions.length}`);
  return predictions;
}

module.exports = { generatePredictions };
