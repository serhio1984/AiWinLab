const axios = require('axios');
const OpenAI = require('openai');
const { MongoClient } = require('mongodb');
const { getTranslatedTeams } = require('./translate-teams');

// === API KEYS ===
const FOOTBALL_API_KEY = process.env.FOOTBALL_API_KEY || '548e45339f74b3a936d49be6786124b0';
const OPENAI_KEY = process.env.OPENAI_API_KEY;
const MONGODB_URI = process.env.MONGODB_URI || "mongodb+srv://aiwinuser:aiwinsecure123@cluster0.detso80.mongodb.net/predictionsDB?retryWrites=true&w=majority&tls=true";
const openai = new OpenAI({ apiKey: OPENAI_KEY });

// === API URLs ===
const FIXTURES_URL = 'https://v3.football.api-sports.io/fixtures';
const ODDS_URL = 'https://v3.football.api-sports.io/odds';

// === –ü–µ—Ä–µ–≤–æ–¥—ã —Ç—É—Ä–Ω–∏—Ä–æ–≤ ===
const TOURNAMENT_TRANSLATIONS = {
  "UEFA Champions League": "–õ–∏–≥–∞ –ß–µ–º–ø–∏–æ–Ω–æ–≤ –£–ï–§–ê",
  "UEFA Europa League": "–õ–∏–≥–∞ –ï–≤—Ä–æ–ø—ã –£–ï–§–ê",
  "UEFA Europa Conference League": "–õ–∏–≥–∞ –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π –£–ï–§–ê",
  "Premier League": "–ü—Ä–µ–º—å–µ—Ä-–õ–∏–≥–∞ –ê–Ω–≥–ª–∏–∏",
  "La Liga": "–õ–∞ –õ–∏–≥–∞ –ò—Å–ø–∞–Ω–∏–∏",
  "Serie A": "–°–µ—Ä–∏—è –ê –ò—Ç–∞–ª–∏–∏",
  "Bundesliga": "–ë—É–Ω–¥–µ—Å–ª–∏–≥–∞ –ì–µ—Ä–º–∞–Ω–∏–∏",
  "Ligue 1": "–õ–∏–≥–∞ 1 –§—Ä–∞–Ω—Ü–∏–∏",
  "Eredivisie": "–≠—Ä–µ–¥–∏–≤–∏–∑–∏ –ù–∏–¥–µ—Ä–ª–∞–Ω–¥–æ–≤",
  "Primeira Liga": "–ü—Ä–∏–º–µ–π—Ä–∞ –õ–∏–≥–∞ –ü–æ—Ä—Ç—É–≥–∞–ª–∏–∏"
};

const EUROPEAN_LEAGUES = Object.keys(TOURNAMENT_TRANSLATIONS);
const EUROPEAN_COUNTRIES = [
  "England", "Spain", "Italy", "Germany", "France", "Netherlands", "Portugal",
  "Scotland", "Ukraine", "Belgium", "Switzerland", "Turkey", "Greece",
  "Austria", "Denmark", "Norway", "Sweden", "Poland", "Czech Republic"
];

// === –ó–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ –ö–∏–µ–≤—É ===
function getKievDateRangeForTomorrow() {
  const tz = "Europe/Kiev";
  const tomorrowStart = new Date(new Date().toLocaleString("en-US", { timeZone: tz }));
  tomorrowStart.setDate(tomorrowStart.getDate() + 1);
  tomorrowStart.setHours(0, 0, 0, 0);

  const tomorrowEnd = new Date(tomorrowStart);
  tomorrowEnd.setDate(tomorrowEnd.getDate() + 1);

  const from = tomorrowStart.toISOString().split('T')[0];
  const to = tomorrowEnd.toISOString().split('T')[0];

  return { from, to };
}

function getRandomOdds() {
  const odds = [1.5, 1.7, 1.9, 2.0, 2.3, 2.5, 3.0, 3.5];
  return odds[Math.floor(Math.random() * odds.length)].toFixed(2);
}

function formatTournament(match) {
  const date = new Date(match.fixture.date);
  const d = String(date.getDate()).padStart(2, '0');
  const m = String(date.getMonth() + 1).padStart(2, '0');
  const y = String(date.getFullYear()).slice(2);
  const league = TOURNAMENT_TRANSLATIONS[match.league.name] || match.league.name;
  return `–§—É—Ç–±–æ–ª.${d}.${m}.${y} ${league}`;
}

// === –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ç—á–µ–π –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ===
async function fetchMatches() {
  try {
    const { from, to } = getKievDateRangeForTomorrow();
    const res = await axios.get(FIXTURES_URL, {
      headers: { 'x-apisports-key': FOOTBALL_API_KEY },
      params: {
        from,
        to,
        timezone: 'Europe/Kiev' // –≤–∞–∂–Ω–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –¥–∞—Ç—ã
      }
    });

    let matches = res.data.response || [];
    matches = matches.filter(m =>
      EUROPEAN_LEAGUES.includes(m.league.name) ||
      EUROPEAN_COUNTRIES.includes(m.league.country)
    );

    console.log(`üéØ –ù–∞–π–¥–µ–Ω–æ –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏—Ö –º–∞—Ç—á–µ–π —Å ${from} –ø–æ ${to}: ${matches.length}`);
    return matches.slice(0, 40);
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ç—á–µ–π:', e.message);
    return [];
  }
}

// === –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ ===
async function fetchOdds(fixtureId) {
  try {
    const res = await axios.get(ODDS_URL, {
      headers: { 'x-apisports-key': FOOTBALL_API_KEY },
      params: { fixture: fixtureId, timezone: 'Europe/Kiev' }
    });

    const data = res.data.response;
    if (data.length > 0 && data[0].bookmakers.length > 0) {
      for (const bookmaker of data[0].bookmakers) {
        if (bookmaker.bets?.[0]?.values?.[0]?.odd) {
          return bookmaker.bets[0].values[0].odd;
        }
      }
    }
    return getRandomOdds();
  } catch (e) {
    console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –¥–ª—è –º–∞—Ç—á–∞ ${fixtureId}:`, e.message);
    return getRandomOdds();
  }
}

// === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ —á–µ—Ä–µ–∑ OpenAI ===
async function generateAllPredictions(matches) {
  const matchesList = matches.map((m, i) => `${i + 1}. ${m.teams.home.name} vs ${m.teams.away.name}`).join("\n");

  const prompt = `
–¢—ã —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫.
–î–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Ç—á–∞ –ø—Ä–∏–¥—É–º–∞–π –∫—Ä–∞—Ç–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç–∞–≤–æ–∫.
–ü—Ä–∏–º–µ—Ä—ã:
- –ü–æ–±–µ–¥–∞ {–∫–æ–º–∞–Ω–¥–∞}
- –ù–∏—á—å—è
- –î–≤–æ–π–Ω–æ–π —à–∞–Ω—Å {–∫–æ–º–∞–Ω–¥–∞} –∏–ª–∏ –Ω–∏—á—å—è
- –¢–æ—Ç–∞–ª –±–æ–ª—å—à–µ 2.5
- –¢–æ—Ç–∞–ª –º–µ–Ω—å—à–µ 2.5
- –§–æ—Ä–∞ -1.5 –Ω–∞ {–∫–æ–º–∞–Ω–¥–∞}
- –§–æ—Ä–∞ +1.5 –Ω–∞ {–∫–æ–º–∞–Ω–¥–∞}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
1) –ò—Å–ø–æ–ª—å–∑—É–π —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∏—Å—Ö–æ–¥–æ–≤, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –ø–æ–±–µ–¥—É.
2) –û—Ç–≤–µ—Ç —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
1. –ø—Ä–æ–≥–Ω–æ–∑
2. –ø—Ä–æ–≥–Ω–æ–∑
...

–°–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π:
${matchesList}
`;

  try {
    const response = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: [{ role: 'user', content: prompt }],
    });

    const resultText = response.choices[0].message.content.trim();
    return resultText.split("\n").map(line => line.replace(/^\d+\.\s*/, '').trim());
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ AI-–ø—Ä–æ–≥–Ω–æ–∑–∞:', e.message);
    return matches.map(m => `–ü–æ–±–µ–¥–∞ ${m.teams.home.name}`);
  }
}

// === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ –≤ MongoDB ===
async function saveToDraft(predictions) {
  const client = new MongoClient(MONGODB_URI);
  await client.connect();
  const db = client.db('predictionsDB');
  const draftColl = db.collection('draft_predictions');

  await draftColl.deleteMany({});
  if (predictions.length > 0) await draftColl.insertMany(predictions);

  await client.close();
  console.log(`üíæ –ß–µ—Ä–Ω–æ–≤–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: ${predictions.length}`);
}

// === –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ===
async function generatePredictions() {
  const matches = await fetchMatches();
  if (!matches.length) {
    console.warn('–ù–µ—Ç –º–∞—Ç—á–µ–π –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤.');
    return [];
  }

  const matchesWithOdds = [];
  for (const match of matches) {
    const odds = await fetchOdds(match.fixture.id);
    matchesWithOdds.push({ ...match, odds });
  }

  const allTeams = matchesWithOdds.flatMap(m => [m.teams.home.name, m.teams.away.name]);
  const teamTranslations = await getTranslatedTeams(allTeams);
  const aiPredictions = await generateAllPredictions(matchesWithOdds);

  const predictions = matchesWithOdds.map((match, i) => ({
    id: Date.now() + i,
    tournament: formatTournament(match),
    team1: teamTranslations[match.teams.home.name] || match.teams.home.name,
    logo1: match.teams.home.logo,
    team2: teamTranslations[match.teams.away.name] || match.teams.away.name,
    logo2: match.teams.away.logo,
    odds: match.odds,
    predictionText: aiPredictions[i] || `–ü–æ–±–µ–¥–∞ ${teamTranslations[match.teams.home.name] || match.teams.home.name}`
  }));

  await saveToDraft(predictions);
  return predictions;
}

// === –ó–∞–ø—É—Å–∫ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –Ω–∞–ø—Ä—è–º—É—é ===
if (require.main === module) {
  generatePredictions()
    .then(() => console.log('‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.'))
    .catch(err => console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', err));
}

module.exports = { generatePredictions };
