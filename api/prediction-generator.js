const axios = require('axios');
const OpenAI = require('openai');
const { MongoClient } = require('mongodb');
const { getTranslatedTeams } = require('./translate-teams');

// === ENV / API KEYS ===
const FOOTBALL_API_KEY = process.env.FOOTBALL_API_KEY || '548e45339f74b3a936d49be6786124b0';
const OPENAI_KEY = process.env.OPENAI_API_KEY;
const MONGODB_URI =
  process.env.MONGODB_URI ||
  'mongodb+srv://aiwinuser:aiwinsecure123@cluster0.detso80.mongodb.net/predictionsDB?retryWrites=true&w=majority&tls=true';

// –§–ª–∞–≥: —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ï–≤—Ä–æ–ø—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –í–ö–õ)
const ONLY_EUROPE = process.env.ONLY_EUROPE !== 'false';

const openai = new OpenAI({ apiKey: OPENAI_KEY });

// === API URLs ===
const FIXTURES_URL = 'https://v3.football.api-sports.io/fixtures';
const ODDS_URL = 'https://v3.football.api-sports.io/odds';

// === –ü–µ—Ä–µ–≤–æ–¥—ã –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ (–¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏) ===
const TOURNAMENT_TRANSLATIONS = {
  'UEFA Champions League': '–õ–∏–≥–∞ –ß–µ–º–ø–∏–æ–Ω–æ–≤ –£–ï–§–ê',
  'UEFA Europa League': '–õ–∏–≥–∞ –ï–≤—Ä–æ–ø—ã –£–ï–§–ê',
  'UEFA Europa Conference League': '–õ–∏–≥–∞ –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π –£–ï–§–ê',
  'Premier League': '–ü—Ä–µ–º—å–µ—Ä-–õ–∏–≥–∞ –ê–Ω–≥–ª–∏–∏',
  'La Liga': '–õ–∞ –õ–∏–≥–∞ –ò—Å–ø–∞–Ω–∏–∏',
  'Serie A': '–°–µ—Ä–∏—è –ê –ò—Ç–∞–ª–∏–∏',
  'Bundesliga': '–ë—É–Ω–¥–µ—Å–ª–∏–≥–∞ –ì–µ—Ä–º–∞–Ω–∏–∏',
  'Ligue 1': '–õ–∏–≥–∞ 1 –§—Ä–∞–Ω—Ü–∏–∏',
  Eredivisie: '–≠—Ä–µ–¥–∏–≤–∏–∑–∏ –ù–∏–¥–µ—Ä–ª–∞–Ω–¥–æ–≤',
  'Primeira Liga': '–ü—Ä–∏–º–µ–π—Ä–∞ –õ–∏–≥–∞ –ü–æ—Ä—Ç—É–≥–∞–ª–∏–∏'
};

// === –ï–≤—Ä–æ–ø–∞: —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω/–º–µ—Ç–æ–∫ –∏ –ø—Ä–∞–≤–∏–ª–∞ ===
const EUROPEAN_COUNTRIES = [
  // UK & Ireland
  'England', 'Scotland', 'Wales', 'Northern Ireland', 'Ireland',

  // –¢–æ–ø-5
  'Spain', 'Italy', 'Germany', 'France', 'Netherlands', 'Portugal',

  // –î—Ä—É–≥–∞—è –ï–≤—Ä–æ–ø–∞
  'Belgium', 'Switzerland', 'Austria', 'Turkey', 'Greece', 'Denmark',
  'Norway', 'Sweden', 'Poland', 'Czech Republic', 'Czechia', 'Croatia',
  'Serbia', 'Romania', 'Hungary', 'Slovakia', 'Slovenia', 'Bulgaria',
  'Bosnia and Herzegovina', 'Bosnia & Herzegovina', 'North Macedonia',
  'Albania', 'Kosovo', 'Montenegro', 'Moldova', 'Ukraine', 'Belarus',
  'Lithuania', 'Latvia', 'Estonia', 'Finland', 'Iceland', 'Georgia',
  'Armenia', 'Azerbaijan', 'Cyprus', 'Malta', 'Luxembourg',
  'Liechtenstein', 'Andorra', 'San Marino', 'Monaco', 'Gibraltar',
  'Faroe Islands',

  // –í–Ω–µ –ï–°, –Ω–æ —á–∞—Å—Ç–æ —É—á–∞—Å—Ç–≤—É—é—Ç –≤ –µ–≤—Ä–æ–∫—É–±–∫–∞—Ö/–£–ï–§–ê
  'Israel', 'Kazakhstan', 'Russia',

  // –ú–µ—Ç–∫–∏ –∏–∑ API –¥–ª—è –µ–≤—Ä–æ–∫—É–±–∫–æ–≤
  'International', 'World', 'Europe'
];

const UEFA_KEYWORDS = [
  'uefa', 'euro', 'europa', 'conference', 'champions league',
  'european championship', 'qualifying', 'qualification'
];

const norm = (s) => (s || '').toLowerCase().normalize('NFKD');

function isEuropeanMatch(m) {
  const country = norm(m.league?.country);
  const league = norm(m.league?.name);

  // –Ø–≤–Ω–∞—è –µ–≤—Ä–æ–ø–µ–π—Å–∫–∞—è —Å—Ç—Ä–∞–Ω–∞
  if (EUROPEAN_COUNTRIES.map(norm).includes(country)) return true;

  // –ï–≤—Ä–æ–∫—É–±–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ API –º–∞—Ä–∫–∏—Ä—É–µ—Ç –∫–∞–∫ International/World/Europe
  if (
    (country === 'international' || country === 'world' || country === 'europe') &&
    UEFA_KEYWORDS.some((k) => league.includes(k))
  ) {
    return true;
  }

  return false;
}

// === –ó–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –ø–æ –ö–∏–µ–≤—É ===
function getKievDateRangeForTomorrow() {
  const tz = 'Europe/Kiev';
  const kievNow = new Date(new Date().toLocaleString('en-US', { timeZone: tz }));

  const start = new Date(kievNow);
  start.setDate(start.getDate() + 1);
  start.setHours(0, 0, 0, 0);

  const end = new Date(start);
  end.setDate(end.getDate() + 1);

  const from = start.toISOString().split('T')[0]; // YYYY-MM-DD
  const to = end.toISOString().split('T')[0];     // YYYY-MM-DD (—ç–∫—Å–∫–ª—é–∑–∏–≤ –≤–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞)
  return { from, to };
}

function getRandomOdds() {
  const odds = [1.5, 1.7, 1.9, 2.0, 2.3, 2.5, 3.0, 3.5];
  return odds[Math.floor(Math.random() * odds.length)].toFixed(2);
}

function formatTournament(match) {
  const date = new Date(match.fixture.date);
  const d = String(date.getDate()).padStart(2, '0');
  const m = String(date.getMonth() + 1).padStart(2, '0');
  const y = String(date.getFullYear()).slice(2);
  const league = TOURNAMENT_TRANSLATIONS[match.league.name] || match.league.name;
  return `–§—É—Ç–±–æ–ª.${d}.${m}.${y} ${league}`;
}

// === –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π GET —Å –ª–æ–≥–∞–º–∏ ===
async function safeGet(url, params) {
  try {
    const res = await axios.get(url, {
      headers: { 'x-apisports-key': FOOTBALL_API_KEY },
      params
    });
    const list = res.data?.response || [];
    console.log(`üîé GET ${url} ok | items=${list.length} | params=${JSON.stringify(params)}`);
    return list;
  } catch (e) {
    console.error(
      `‚ùå GET ${url} fail | status=${e.response?.status} | data=${JSON.stringify(e.response?.data) || e.message}`
    );
    return [];
  }
}

// === –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ç—á–µ–π –Ω–∞ –∑–∞–≤—Ç—Ä–∞ (—Å –º–Ω–æ–≥–æ—Å—Ç—É–ø–µ–Ω—á–∞—Ç—ã–º —Ñ–æ–ª–±—ç–∫–æ–º) ===
async function fetchMatches(maxCount = 40) {
  const tz = 'Europe/Kiev';
  const { from, to } = getKievDateRangeForTomorrow();

  // 1) –ü—ã—Ç–∞–µ–º—Å—è —Å—Ç—Ä–æ–≥–æ "–∑–∞–≤—Ç—Ä–∞" —á–µ—Ä–µ–∑ ?date= + timezone
  let all = await safeGet(FIXTURES_URL, { date: from, timezone: tz });

  // 2) –ï—Å–ª–∏ –ø—É—Å—Ç–æ ‚Äî –ø—Ä–æ–±—É–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω ?from=...&to=... + timezone
  if (all.length === 0) {
    all = await safeGet(FIXTURES_URL, { from, to, timezone: tz });
  }

  // 3) –ï—Å–ª–∏ –≤—Å—ë –µ—â—ë –ø—É—Å—Ç–æ ‚Äî —Ñ–æ–ª–±—ç–∫: –±–ª–∏–∂–∞–π—à–∏–µ next=200 –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Å–∞–º–∏ –ø–æ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É
  if (all.length === 0) {
    const next = await safeGet(FIXTURES_URL, { next: 200, timezone: tz });
    if (next.length > 0) {
      const zStart = new Date(`${from}T00:00:00.000Z`);
      const zEnd = new Date(`${to}T00:00:00.000Z`);
      all = next.filter((m) => {
        const dt = new Date(m.fixture.date); // UTC –æ—Ç API
        return dt >= zStart && dt < zEnd;
      });
      console.log(`üß© –§–æ–ª–±—ç–∫ next=200 ‚Üí –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –Ω–∞ –∑–∞–≤—Ç—Ä–∞: ${all.length}`);
    }
  }

  const leaguesList = [...new Set(all.map((m) => `${m.league?.country} ‚Äî ${m.league?.name}`))].sort();
  console.log(`üìÖ –ó–∞–≤—Ç—Ä–∞ (–ö–∏–µ–≤): ${from} | –î–∏–∞–ø–∞–∑–æ–Ω: ${from} ‚Üí ${to}`);
  console.log(`üìä –í—Å–µ–≥–æ –º–∞—Ç—á–µ–π –ø–æ–ª—É—á–µ–Ω–æ: ${all.length}`);
  console.log(`üè∑Ô∏è –õ–∏–≥–∏/—Å—Ç—Ä–∞–Ω—ã (–æ–±—Ä–∞–∑—Ü—ã):\n  - ${leaguesList.slice(0, 50).join('\n  - ')}`);

  let selected = all;

  if (ONLY_EUROPE) {
    selected = all.filter(isEuropeanMatch);
    console.log(`üéØ –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞ –ï–≤—Ä–æ–ø–∞: ${selected.length}`);
  } else {
    console.log('üü° –§–∏–ª—å—Ç—Ä –ï–≤—Ä–æ–ø—ã –æ—Ç–∫–ª—é—á—ë–Ω (ONLY_EUROPE=false): –±–µ—Ä—ë–º –≤—Å–µ –º–∞—Ç—á–∏.');
  }

  // –ï—Å–ª–∏ –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏—Ö –º–∞–ª–æ ‚Äî –¥–æ–±–∏—Ä–∞–µ–º –ª—é–±—ã–º–∏ –¥–æ –ª–∏–º–∏—Ç–∞
  const minTarget = Math.min(20, maxCount);
  if (selected.length < minTarget) {
    const map = new Map(selected.map((m) => [m.fixture.id, m]));
    for (const m of all) {
      if (map.size >= maxCount) break;
      if (!map.has(m.fixture.id)) map.set(m.fixture.id, m);
    }
    selected = [...map.values()];
    console.log(`üîÅ –î–æ–±—Ä–∞–ª–∏ –¥–æ: ${selected.length}`);
  }

  const final = selected.slice(0, maxCount);
  console.log(`‚úÖ –ò—Ç–æ–≥–æ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${final.length}`);
  return final;
}

// === –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ ===
async function fetchOdds(fixtureId) {
  try {
    const data = await safeGet(ODDS_URL, { fixture: fixtureId, timezone: 'Europe/Kiev' });
    if (data.length > 0 && data[0].bookmakers?.length > 0) {
      for (const bookmaker of data[0].bookmakers) {
        const odd = bookmaker.bets?.[0]?.values?.[0]?.odd;
        if (odd) return odd;
      }
    }
    return getRandomOdds();
  } catch (e) {
    console.error(`–û—à–∏–±–∫–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –¥–ª—è –º–∞—Ç—á–∞ ${fixtureId}:`, e.message);
    return getRandomOdds();
  }
}

// === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ —á–µ—Ä–µ–∑ OpenAI ===
async function generateAllPredictions(matches) {
  const matchesList = matches
    .map((m, i) => `${i + 1}. ${m.teams.home.name} vs ${m.teams.away.name}`)
    .join('\n');

  const prompt = `
–¢—ã —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫.
–î–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Ç—á–∞ –ø—Ä–∏–¥—É–º–∞–π –∫—Ä–∞—Ç–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç–∞–≤–æ–∫.
–ü—Ä–∏–º–µ—Ä—ã:
- –ü–æ–±–µ–¥–∞ {–∫–æ–º–∞–Ω–¥–∞}
- –ù–∏—á—å—è
- –î–≤–æ–π–Ω–æ–π —à–∞–Ω—Å {–∫–æ–º–∞–Ω–¥–∞} –∏–ª–∏ –Ω–∏—á—å—è
- –¢–æ—Ç–∞–ª –±–æ–ª—å—à–µ 2.5
- –¢–æ—Ç–∞–ª –º–µ–Ω—å—à–µ 2.5
- –§–æ—Ä–∞ -1.5 –Ω–∞ {–∫–æ–º–∞–Ω–¥–∞}
- –§–æ—Ä–∞ +1.5 –Ω–∞ {–∫–æ–º–∞–Ω–¥–∞}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
1) –ò—Å–ø–æ–ª—å–∑—É–π —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∏—Å—Ö–æ–¥–æ–≤, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –ø–æ–±–µ–¥—É.
2) –û—Ç–≤–µ—Ç —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
1. –ø—Ä–æ–≥–Ω–æ–∑
2. –ø—Ä–æ–≥–Ω–æ–∑
...

–°–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π:
${matchesList}
`.trim();

  try {
    const response = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: [{ role: 'user', content: prompt }]
    });

    const resultText = response.choices?.[0]?.message?.content?.trim() || '';
    const list = resultText
      .split('\n')
      .map((line) => line.replace(/^\d+\.\s*/, '').trim())
      .filter(Boolean);
    return list;
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ AI-–ø—Ä–æ–≥–Ω–æ–∑–∞:', e.message);
    return matches.map((m) => `–ü–æ–±–µ–¥–∞ ${m.teams.home.name}`);
  }
}

// === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ –≤ MongoDB ===
async function saveToDraft(predictions) {
  const client = new MongoClient(MONGODB_URI);
  await client.connect();
  const db = client.db('predictionsDB');
  const draftColl = db.collection('draft_predictions');

  await draftColl.deleteMany({});
  if (predictions.length > 0) await draftColl.insertMany(predictions);

  await client.close();
  console.log(`üíæ –ß–µ—Ä–Ω–æ–≤–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: ${predictions.length}`);
}

// === –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ===
async function generatePredictions() {
  const matches = await fetchMatches(40);
  if (!matches.length) {
    console.warn('–ù–µ—Ç –º–∞—Ç—á–µ–π –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤.');
    await saveToDraft([]); // –æ—á–∏—Å—Ç–∏–º —á–µ—Ä–Ω–æ–≤–∏–∫–∏, —á—Ç–æ–±—ã –Ω–µ –≤–≤–æ–¥–∏—Ç—å –≤ –∑–∞–±–ª—É–∂–¥–µ–Ω–∏–µ
    return [];
  }

  const matchesWithOdds = [];
  for (const match of matches) {
    const odds = await fetchOdds(match.fixture.id);
    matchesWithOdds.push({ ...match, odds });
  }

  // –ü–µ—Ä–µ–≤–æ–¥—ã –∫–æ–º–∞–Ω–¥
  const allTeams = matchesWithOdds.flatMap((m) => [m.teams.home.name, m.teams.away.name]);
  const teamTranslations = await getTranslatedTeams(allTeams);

  // –ü—Ä–æ–≥–Ω–æ–∑—ã –ò–ò
  const aiPredictions = await generateAllPredictions(matchesWithOdds);

  // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫
  const predictions = matchesWithOdds.map((match, i) => ({
    id: Date.now() + i,
    tournament: formatTournament(match),
    team1: teamTranslations[match.teams.home.name] || match.teams.home.name,
    logo1: match.teams.home.logo,
    team2: teamTranslations[match.teams.away.name] || match.teams.away.name,
    logo2: match.teams.away.logo,
    odds: match.odds,
    predictionText:
      aiPredictions[i] ||
      `–ü–æ–±–µ–¥–∞ ${teamTranslations[match.teams.home.name] || match.teams.home.name}`
  }));

  await saveToDraft(predictions);
  return predictions;
}

// === –ó–∞–ø—É—Å–∫ –Ω–∞–ø—Ä—è–º—É—é ===
if (require.main === module) {
  generatePredictions()
    .then(() => console.log('‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.'))
    .catch((err) => console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', err));
}

module.exports = { generatePredictions };
