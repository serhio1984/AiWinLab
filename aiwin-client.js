// aiwin-client.js
const telegram = window.Telegram?.WebApp;

if (telegram) {
  telegram.ready();
  telegram.expand();
  console.log('‚úÖ Telegram WebApp initialized');
}

// ===== –Ø–∑—ã–∫–∏ (–≤–∏–∑—É–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ UI –∏ –ø—Ä–æ–≥–Ω–æ–∑–∞) =====
const lang = localStorage.getItem('app_lang') || 'ru';

const translations = {
  ru: {
    slogan: "–£–º–Ω—ã–µ —Å—Ç–∞–≤–∫–∏. –ë–æ–ª—å—à–∏–µ –≤—ã–∏–≥—Ä—ã—à–∏.",
    hello: "–ü—Ä–∏–≤–µ—Ç",
    guest: "–ì–æ—Å—Ç—å",
    buyCoins: "–ö—É–ø–∏—Ç—å –º–æ–Ω–µ—Ç—ã",
    unlock: "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å",
    locked: "üîí –ü—Ä–æ–≥–Ω–æ–∑ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω",
    notEnough: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç"
  },
  uk: {
    slogan: "–†–æ–∑—É–º–Ω—ñ —Å—Ç–∞–≤–∫–∏. –í–µ–ª–∏–∫—ñ –≤–∏–≥—Ä–∞—à—ñ.",
    hello: "–ü—Ä–∏–≤—ñ—Ç",
    guest: "–ì—ñ—Å—Ç—å",
    buyCoins: "–ö—É–ø–∏—Ç–∏ –º–æ–Ω–µ—Ç–∏",
    unlock: "–†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏",
    locked: "üîí –ü—Ä–æ–≥–Ω–æ–∑ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ",
    notEnough: "–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º–æ–Ω–µ—Ç"
  },
  en: {
    slogan: "Smart bets. Big wins.",
    hello: "Hello",
    guest: "Guest",
    buyCoins: "Buy coins",
    unlock: "Unlock",
    locked: "üîí Prediction locked",
    notEnough: "Not enough coins"
  }
};

// ===== –ü–µ—Ä–µ–≤–æ–¥—ã —Å—Ç—Ä–∞–Ω (UI) =====
const COUNTRY_TR = {
  ru: {
    'England':'–ê–Ω–≥–ª–∏—è','Scotland':'–®–æ—Ç–ª–∞–Ω–¥–∏—è','Wales':'–£—ç–ª—å—Å','Northern Ireland':'–°–µ–≤–µ—Ä–Ω–∞—è –ò—Ä–ª–∞–Ω–¥–∏—è','Ireland':'–ò—Ä–ª–∞–Ω–¥–∏—è',
    'Spain':'–ò—Å–ø–∞–Ω–∏—è','Italy':'–ò—Ç–∞–ª–∏—è','Germany':'–ì–µ—Ä–º–∞–Ω–∏—è','France':'–§—Ä–∞–Ω—Ü–∏—è','Netherlands':'–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã','Portugal':'–ü–æ—Ä—Ç—É–≥–∞–ª–∏—è',
    'Belgium':'–ë–µ–ª—å–≥–∏—è','Switzerland':'–®–≤–µ–π—Ü–∞—Ä–∏—è','Austria':'–ê–≤—Å—Ç—Ä–∏—è','Turkey':'–¢—É—Ä—Ü–∏—è','Greece':'–ì—Ä–µ—Ü–∏—è','Denmark':'–î–∞–Ω–∏—è',
    'Norway':'–ù–æ—Ä–≤–µ–≥–∏—è','Sweden':'–®–≤–µ—Ü–∏—è','Poland':'–ü–æ–ª—å—à–∞','Czech Republic':'–ß–µ—Ö–∏—è','Czechia':'–ß–µ—Ö–∏—è','Croatia':'–•–æ—Ä–≤–∞—Ç–∏—è',
    'Serbia':'–°–µ—Ä–±–∏—è','Romania':'–†—É–º—ã–Ω–∏—è','Hungary':'–í–µ–Ω–≥—Ä–∏—è','Slovakia':'–°–ª–æ–≤–∞–∫–∏—è','Slovenia':'–°–ª–æ–≤–µ–Ω–∏—è','Bulgaria':'–ë–æ–ª–≥–∞—Ä–∏—è',
    'Bosnia and Herzegovina':'–ë–æ—Å–Ω–∏—è –∏ –ì–µ—Ä—Ü–µ–≥–æ–≤–∏–Ω–∞','North Macedonia':'–°–µ–≤–µ—Ä–Ω–∞—è –ú–∞–∫–µ–¥–æ–Ω–∏—è','Albania':'–ê–ª–±–∞–Ω–∏—è','Kosovo':'–ö–æ—Å–æ–≤–æ',
    'Montenegro':'–ß–µ—Ä–Ω–æ–≥–æ—Ä–∏—è','Moldova':'–ú–æ–ª–¥–æ–≤–∞','Ukraine':'–£–∫—Ä–∞–∏–Ω–∞','Lithuania':'–õ–∏—Ç–≤–∞','Latvia':'–õ–∞—Ç–≤–∏—è','Estonia':'–≠—Å—Ç–æ–Ω–∏—è',
    'Finland':'–§–∏–Ω–ª—è–Ω–¥–∏—è','Iceland':'–ò—Å–ª–∞–Ω–¥–∏—è','Georgia':'–ì—Ä—É–∑–∏—è','Armenia':'–ê—Ä–º–µ–Ω–∏—è','Azerbaijan':'–ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω','Cyprus':'–ö–∏–ø—Ä',
    'Andorra':'–ê–Ω–¥–æ—Ä—Ä–∞','Faroe Islands':'–§–∞—Ä–µ—Ä—Å–∫–∏–µ –æ-–≤–∞','Gibraltar':'–ì–∏–±—Ä–∞–ª—Ç–∞—Ä','Luxembourg':'–õ—é–∫—Å–µ–º–±—É—Ä–≥','Liechtenstein':'–õ–∏—Ö—Ç–µ–Ω—à—Ç–µ–π–Ω',
    'Malta':'–ú–∞–ª—å—Ç–∞','Monaco':'–ú–æ–Ω–∞–∫–æ','San Marino':'–°–∞–Ω-–ú–∞—Ä–∏–Ω–æ','Israel':'–ò–∑—Ä–∞–∏–ª—å','Kazakhstan':'–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω',
    'International':'–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π','World':'–ú–∏—Ä','Europe':'–ï–≤—Ä–æ–ø–∞'
  },
  uk: {
    'England':'–ê–Ω–≥–ª—ñ—è','Scotland':'–®–æ—Ç–ª–∞–Ω–¥—ñ—è','Wales':'–£–µ–ª—å—Å','Northern Ireland':'–ü—ñ–≤–Ω—ñ—á–Ω–∞ –Ü—Ä–ª–∞–Ω–¥—ñ—è','Ireland':'–Ü—Ä–ª–∞–Ω–¥—ñ—è',
    'Spain':'–Ü—Å–ø–∞–Ω—ñ—è','Italy':'–Ü—Ç–∞–ª—ñ—è','Germany':'–ù—ñ–º–µ—á—á–∏–Ω–∞','France':'–§—Ä–∞–Ω—Ü—ñ—è','Netherlands':'–ù—ñ–¥–µ—Ä–ª–∞–Ω–¥–∏','Portugal':'–ü–æ—Ä—Ç—É–≥–∞–ª—ñ—è',
    'Belgium':'–ë–µ–ª—å–≥—ñ—è','Switzerland':'–®–≤–µ–π—Ü–∞—Ä—ñ—è','Austria':'–ê–≤—Å—Ç—Ä—ñ—è','Turkey':'–¢—É—Ä–µ—á—á–∏–Ω–∞','Greece':'–ì—Ä–µ—Ü—ñ—è','Denmark':'–î–∞–Ω—ñ—è',
    'Norway':'–ù–æ—Ä–≤–µ–≥—ñ—è','Sweden':'–®–≤–µ—Ü—ñ—è','Poland':'–ü–æ–ª—å—â–∞','Czech Republic':'–ß–µ—Ö—ñ—è','Czechia':'–ß–µ—Ö—ñ—è','Croatia':'–•–æ—Ä–≤–∞—Ç—ñ—è',
    'Serbia':'–°–µ—Ä–±—ñ—è','Romania':'–†—É–º—É–Ω—ñ—è','Hungary':'–£–≥–æ—Ä—â–∏–Ω–∞','Slovakia':'–°–ª–æ–≤–∞—á—á–∏–Ω–∞','Slovenia':'–°–ª–æ–≤–µ–Ω—ñ—è','Bulgaria':'–ë–æ–ª–≥–∞—Ä—ñ—è',
    'Bosnia and Herzegovina':'–ë–æ—Å–Ω—ñ—è —ñ –ì–µ—Ä—Ü–µ–≥–æ–≤–∏–Ω–∞','North Macedonia':'–ü—ñ–≤–Ω—ñ—á–Ω–∞ –ú–∞–∫–µ–¥–æ–Ω—ñ—è','Albania':'–ê–ª–±–∞–Ω—ñ—è','Kosovo':'–ö–æ—Å–æ–≤–æ',
    'Montenegro':'–ß–æ—Ä–Ω–æ–≥–æ—Ä—ñ—è','Moldova':'–ú–æ–ª–¥–æ–≤–∞','Ukraine':'–£–∫—Ä–∞—ó–Ω–∞','Lithuania':'–õ–∏—Ç–≤–∞','Latvia':'–õ–∞—Ç–≤—ñ—è','Estonia':'–ï—Å—Ç–æ–Ω—ñ—è',
    'Finland':'–§—ñ–Ω–ª—è–Ω–¥—ñ—è','Iceland':'–Ü—Å–ª–∞–Ω–¥—ñ—è','Georgia':'–ì—Ä—É–∑—ñ—è','Armenia':'–í—ñ—Ä–º–µ–Ω—ñ—è','Azerbaijan':'–ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω','Cyprus':'–ö—ñ–ø—Ä',
    'Andorra':'–ê–Ω–¥–æ—Ä—Ä–∞','Faroe Islands':'–§–∞—Ä–µ—Ä—Å—å–∫—ñ –æ-–≤–∏','Gibraltar':'–ì—ñ–±—Ä–∞–ª—Ç–∞—Ä','Luxembourg':'–õ—é–∫—Å–µ–º–±—É—Ä–≥','Liechtenstein':'–õ—ñ—Ö—Ç–µ–Ω—à—Ç–µ–π–Ω',
    'Malta':'–ú–∞–ª—å—Ç–∞','Monaco':'–ú–æ–Ω–∞–∫–æ','San Marino':'–°–∞–Ω-–ú–∞—Ä–∏–Ω–æ','Israel':'–Ü–∑—Ä–∞—ó–ª—å','Kazakhstan':'–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω',
    'International':'–ú—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∏–π','World':'–°–≤—ñ—Ç','Europe':'–Ñ–≤—Ä–æ–ø–∞'
  },
  en: {} // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Å—Ç–∞–≤–ª—è–µ–º, –∫–∞–∫ –≤ API
};

// ===== –ü–µ—Ä–µ–≤–æ–¥—ã –ª–∏–≥ (–±–µ–∑ —Å—Ç—Ä–∞–Ω—ã –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏!) =====
const LEAGUE_TR = {
  ru: {
    // –ï–≤—Ä–æ–∫—É–±–∫–∏
    'UEFA Champions League':'–õ–∏–≥–∞ –ß–µ–º–ø–∏–æ–Ω–æ–≤',
    'Champions League':'–õ–∏–≥–∞ –ß–µ–º–ø–∏–æ–Ω–æ–≤',
    'UEFA Europa League':'–õ–∏–≥–∞ –ï–≤—Ä–æ–ø—ã',
    'Europa League':'–õ–∏–≥–∞ –ï–≤—Ä–æ–ø—ã',
    'UEFA Europa Conference League':'–õ–∏–≥–∞ –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π',
    'Europa Conference League':'–õ–∏–≥–∞ –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π',
    'UEFA Super Cup':'–°—É–ø–µ—Ä–∫—É–±–æ–∫ –£–ï–§–ê',
    'Super Cup':'–°—É–ø–µ—Ä–∫—É–±–æ–∫ –£–ï–§–ê',

    // –¢–æ–ø
    'Premier League':'–ü—Ä–µ–º—å–µ—Ä-–ª–∏–≥–∞',
    'La Liga':'–õ–∞ –õ–∏–≥–∞',
    'Serie A':'–°–µ—Ä–∏—è –ê',
    'Bundesliga':'–ë—É–Ω–¥–µ—Å–ª–∏–≥–∞',
    'Ligue 1':'–õ–∏–≥–∞ 1',
    'Eredivisie':'–≠—Ä–µ–¥–∏–≤–∏–∑–∏',
    'Primeira Liga':'–ü—Ä–∏–º–µ–π—Ä–∞ –õ–∏–≥–∞',

    // –î—Ä—É–≥–∏–µ –ø—Ä–∏–º–µ—Ä—ã
    'Scottish Premiership':'–ü—Ä–µ–º—å–µ—Ä-–ª–∏–≥–∞',
    'Super Lig':'–°—É–ø–µ—Ä–ª–∏–≥–∞',
    'S√ºper Lig':'–°—É–ø–µ—Ä–ª–∏–≥–∞',
    'Super League 1':'–°—É–ø–µ—Ä–ª–∏–≥–∞',
    'Super League Greece':'–°—É–ø–µ—Ä–ª–∏–≥–∞',
    'Jupiler Pro League':'–ü—Ä–æ –õ–∏–≥–∞',
    'Pro League':'–ü—Ä–æ –õ–∏–≥–∞',
    'First Division A':'–ü–µ—Ä–≤—ã–π –¥–∏–≤–∏–∑–∏–æ–Ω A',
    'Austrian Bundesliga':'–ë—É–Ω–¥–µ—Å–ª–∏–≥–∞',
    'Swiss Super League':'–°—É–ø–µ—Ä–ª–∏–≥–∞',
    'Super League':'–°—É–ø–µ—Ä–ª–∏–≥–∞',
    'Ekstraklasa':'–≠–∫—Å—Ç—Ä–∞–∫–ª–∞—Å—Å–∞',
    'Ukrainian Premier League':'–ü—Ä–µ–º—å–µ—Ä-–ª–∏–≥–∞',
    'Eliteserien':'–≠–ª–∏—Ç—Å–µ—Ä–∏–µ–Ω',
    'Allsvenskan':'–ê–ª–ª—Å–≤–µ–Ω—Å–∫–∞–Ω',
    'Superliga':'–°—É–ø–µ—Ä–ª–∏–≥–∞',
    'Danish Superliga':'–°—É–ø–µ—Ä–ª–∏–≥–∞',
    'Czech Liga':'–ü–µ—Ä–≤–∞—è –ª–∏–≥–∞',
    'Fortuna Liga':'–§–æ—Ä—Ç—É–Ω–∞ –õ–∏–≥–∞',
    '1. Liga':'–ü–µ—Ä–≤–∞—è –ª–∏–≥–∞',
    'HNL':'HNL',
    '1. HNL':'1. HNL',
    'SuperLiga':'–°—É–ø–µ—Ä–ª–∏–≥–∞',
    'Liga I':'–õ–∏–≥–∞ I',
    'NB I':'NB I',
    'PrvaLiga':'–ü–µ—Ä–≤–∞—è –ª–∏–≥–∞',
    'First League':'–ü–µ—Ä–≤–∞—è –ª–∏–≥–∞',
    'Veikkausliiga':'–í–µ–π–∫–∫–∞—É—Å–ª–∏–≥–∞',
    'Urvalsdeild':'–£—Ä–≤–∞–ª—Å–¥–µ–π–ª–¥',
    '√örvalsdeild':'–£—Ä–≤–∞–ª—Å–¥–µ–π–ª–¥',
    'First Division':'–í—ã—Å—à–∏–π –¥–∏–≤–∏–∑–∏–æ–Ω',
    'Premier Division':'–ü—Ä–µ–º—å–µ—Ä-–¥–∏–≤–∏–∑–∏–æ–Ω',
    'Cymru Premier':'–ö–∞–º—Ä–∏ –ü—Ä–µ–º—å–µ—Ä',

    // –ö—É–±–∫–∏
    'FA Cup':'–ö—É–±–æ–∫',
    'EFL Cup':'–ö—É–±–æ–∫ –ª–∏–≥–∏',
    'Carabao Cup':'–ö—É–±–æ–∫ –ª–∏–≥–∏',
    'Community Shield':'–°—É–ø–µ—Ä–∫—É–±–æ–∫',
    'Copa del Rey':'–ö—É–±–æ–∫',
    'Supercopa':'–°—É–ø–µ—Ä–∫—É–±–æ–∫',
    'Coppa Italia':'–ö—É–±–æ–∫',
    'Supercoppa':'–°—É–ø–µ—Ä–∫—É–±–æ–∫',
    'DFB-Pokal':'–ö—É–±–æ–∫',
    'DFB Pokal':'–ö—É–±–æ–∫',
    'DFB Supercup':'–°—É–ø–µ—Ä–∫—É–±–æ–∫',
    'Coupe de France':'–ö—É–±–æ–∫',
    'Troph√©e des Champions':'–°—É–ø–µ—Ä–∫—É–±–æ–∫',
    'Trophee des Champions':'–°—É–ø–µ—Ä–∫—É–±–æ–∫',
    'KNVB Beker':'–ö—É–±–æ–∫',
    'Johan Cruijff Schaal':'–°—É–ø–µ—Ä–∫—É–±–æ–∫',
    'Johan Cruijff Shield':'–°—É–ø–µ—Ä–∫—É–±–æ–∫',
    'Ta√ßa de Portugal':'–ö—É–±–æ–∫',
    'Taca de Portugal':'–ö—É–±–æ–∫',
    'Superta√ßa':'–°—É–ø–µ—Ä–∫—É–±–æ–∫',
    'Scottish Cup':'–ö—É–±–æ–∫',
    'Scottish League Cup':'–ö—É–±–æ–∫ –ª–∏–≥–∏',
    'Austrian Cup':'–ö—É–±–æ–∫',
    '√ñFB-Cup':'–ö—É–±–æ–∫',
    'OFB-Cup':'–ö—É–±–æ–∫',
    'Swiss Cup':'–ö—É–±–æ–∫',
    'Schweizer Cup':'–ö—É–±–æ–∫',
    'Greek Cup':'–ö—É–±–æ–∫',
    'Turkish Cup':'–ö—É–±–æ–∫',
    'Belgian Cup':'–ö—É–±–æ–∫',
    'Croatian Cup':'–ö—É–±–æ–∫',
    'Romanian Cup':'–ö—É–±–æ–∫',
    'Hungarian Cup':'–ö—É–±–æ–∫',
    'Polish Cup':'–ö—É–±–æ–∫',
    'Czech Cup':'–ö—É–±–æ–∫',
    'Slovak Cup':'–ö—É–±–æ–∫',
    'Danish Cup':'–ö—É–±–æ–∫',
    'Norwegian Cup':'–ö—É–±–æ–∫',
    'Swedish Cup':'–ö—É–±–æ–∫',
    'Finnish Cup':'–ö—É–±–æ–∫',
    'Ukrainian Cup':'–ö—É–±–æ–∫'
  },
  uk: {
    'UEFA Champions League':'–õ—ñ–≥–∞ —á–µ–º–ø—ñ–æ–Ω—ñ–≤',
    'Champions League':'–õ—ñ–≥–∞ —á–µ–º–ø—ñ–æ–Ω—ñ–≤',
    'UEFA Europa League':'–õ—ñ–≥–∞ –Ñ–≤—Ä–æ–ø–∏',
    'Europa League':'–õ—ñ–≥–∞ –Ñ–≤—Ä–æ–ø–∏',
    'UEFA Europa Conference League':'–õ—ñ–≥–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü—ñ–π',
    'Europa Conference League':'–õ—ñ–≥–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü—ñ–π',
    'UEFA Super Cup':'–°—É–ø–µ—Ä–∫—É–±–æ–∫ –£–Ñ–§–ê',
    'Super Cup':'–°—É–ø–µ—Ä–∫—É–±–æ–∫ –£–Ñ–§–ê',

    'Premier League':'–ü—Ä–µ–º º—î—Ä-–ª—ñ–≥–∞',
    'La Liga':'–õ–∞ –õ—ñ–≥–∞',
    'Serie A':'–°–µ—Ä—ñ—è A',
    'Bundesliga':'–ë—É–Ω–¥–µ—Å–ª—ñ–≥–∞',
    'Ligue 1':'–õ—ñ–≥–∞ 1',
    'Eredivisie':'–ï—Ä–µ–¥–∏–≤—ñ–∑—ñ',
    'Primeira Liga':'–ü—Ä–∏–º–µ–π—Ä–∞ –õ—ñ–≥–∞',

    'Scottish Premiership':'–ü—Ä–µ–º º—î—Ä-–ª—ñ–≥–∞',
    'Super Lig':'–°—É–ø–µ—Ä–ª—ñ–≥–∞',
    'S√ºper Lig':'–°—É–ø–µ—Ä–ª—ñ–≥–∞',
    'Super League 1':'–°—É–ø–µ—Ä–ª—ñ–≥–∞',
    'Super League Greece':'–°—É–ø–µ—Ä–ª—ñ–≥–∞',
    'Jupiler Pro League':'–ü—Ä–æ –õ—ñ–≥–∞',
    'Pro League':'–ü—Ä–æ –õ—ñ–≥–∞',
    'First Division A':'–ü–µ—Ä—à–∏–π –¥–∏–≤—ñ–∑—ñ–æ–Ω A',
    'Austrian Bundesliga':'–ë—É–Ω–¥–µ—Å–ª—ñ–≥–∞',
    'Swiss Super League':'–°—É–ø–µ—Ä–ª—ñ–≥–∞',
    'Super League':'–°—É–ø–µ—Ä–ª—ñ–≥–∞',
    'Ekstraklasa':'–ï–∫—Å—Ç—Ä–∞–∫–ª—è—Å–∞',
    'Ukrainian Premier League':'–ü—Ä–µ–º º—î—Ä-–ª—ñ–≥–∞',
    'Eliteserien':'–ï–ª—ñ—Ç—Å–µ—Ä—ñ—î–Ω',
    'Allsvenskan':'–ê–ª–ª—Å–≤–µ–Ω—Å–∫–∞–Ω',
    'Superliga':'–°—É–ø–µ—Ä–ª—ñ–≥–∞',
    'Danish Superliga':'–°—É–ø–µ—Ä–ª—ñ–≥–∞',
    'Czech Liga':'–ü–µ—Ä—à–∞ –ª—ñ–≥–∞',
    'Fortuna Liga':'–§–æ—Ä—Ç—É–Ω–∞ –õ—ñ–≥–∞',
    '1. Liga':'–ü–µ—Ä—à–∞ –ª—ñ–≥–∞',
    'HNL':'HNL',
    '1. HNL':'1. HNL',
    'SuperLiga':'–°—É–ø–µ—Ä–ª—ñ–≥–∞',
    'Liga I':'–õ—ñ–≥–∞ I',
    'NB I':'NB I',
    'PrvaLiga':'–ü–µ—Ä—à–∞ –ª—ñ–≥–∞',
    'First League':'–ü–µ—Ä—à–∞ –ª—ñ–≥–∞',
    'Veikkausliiga':'–í–µ–π–∫–∫–∞—É—Å–ª—ñ–≥–∞',
    'Urvalsdeild':'–£—Ä–≤–∞–ª—Å–¥–µ–π–ª–¥',
    '√örvalsdeild':'–£—Ä–≤–∞–ª—Å–¥–µ–π–ª–¥',
    'First Division':'–í–∏—â–∏–π –¥–∏–≤—ñ–∑—ñ–æ–Ω',
    'Premier Division':'–ü—Ä–µ–º º—î—Ä-–¥–∏–≤—ñ–∑—ñ–æ–Ω',
    'Cymru Premier':'–ö–∞–º—Ä—ñ –ü—Ä–µ–º º—î—Ä',

    'FA Cup':'–ö—É–±–æ–∫',
    'EFL Cup':'–ö—É–±–æ–∫ –ª—ñ–≥–∏',
    'Carabao Cup':'–ö—É–±–æ–∫ –ª—ñ–≥–∏',
    'Community Shield':'–°—É–ø–µ—Ä–∫—É–±–æ–∫',
    'Copa del Rey':'–ö—É–±–æ–∫',
    'Supercopa':'–°—É–ø–µ—Ä–∫—É–±–æ–∫',
    'Coppa Italia':'–ö—É–±–æ–∫',
    'Supercoppa':'–°—É–ø–µ—Ä–∫—É–±–æ–∫',
    'DFB-Pokal':'–ö—É–±–æ–∫',
    'DFB Pokal':'–ö—É–±–æ–∫',
    'DFB Supercup':'–°—É–ø–µ—Ä–∫—É–±–æ–∫',
    'Coupe de France':'–ö—É–±–æ–∫',
    'Troph√©e des Champions':'–°—É–ø–µ—Ä–∫—É–±–æ–∫',
    'Trophee des Champions':'–°—É–ø–µ—Ä–∫—É–±–æ–∫',
    'KNVB Beker':'–ö—É–±–æ–∫',
    'Johan Cruijff Schaal':'–°—É–ø–µ—Ä–∫—É–±–æ–∫',
    'Johan Cruijff Shield':'–°—É–ø–µ—Ä–∫—É–±–æ–∫',
    'Ta√ßa de Portugal':'–ö—É–±–æ–∫',
    'Taca de Portugal':'–ö—É–±–æ–∫',
    'Superta√ßa':'–°—É–ø–µ—Ä–∫—É–±–æ–∫',
    'Scottish Cup':'–ö—É–±–æ–∫',
    'Scottish League Cup':'–ö—É–±–æ–∫ –ª—ñ–≥–∏',
    'Austrian Cup':'–ö—É–±–æ–∫',
    '√ñFB-Cup':'–ö—É–±–æ–∫',
    'OFB-Cup':'–ö—É–±–æ–∫',
    'Swiss Cup':'–ö—É–±–æ–∫',
    'Schweizer Cup':'–ö—É–±–æ–∫',
    'Greek Cup':'–ö—É–±–æ–∫',
    'Turkish Cup':'–ö—É–±–æ–∫',
    'Belgian Cup':'–ö—É–±–æ–∫',
    'Croatian Cup':'–ö—É–±–æ–∫',
    'Romanian Cup':'–ö—É–±–æ–∫',
    'Hungarian Cup':'–ö—É–±–æ–∫',
    'Polish Cup':'–ö—É–±–æ–∫',
    'Czech Cup':'–ö—É–±–æ–∫',
    'Slovak Cup':'–ö—É–±–æ–∫',
    'Danish Cup':'–ö—É–±–æ–∫',
    'Norwegian Cup':'–ö—É–±–æ–∫',
    'Swedish Cup':'–ö—É–±–æ–∫',
    'Finnish Cup':'–ö—É–±–æ–∫',
    'Ukrainian Cup':'–ö—É–±–æ–∫'
  },
  en: {
    // Euro cups (leave as-is or standard English)
    'UEFA Champions League':'UEFA Champions League',
    'Champions League':'UEFA Champions League',
    'UEFA Europa League':'UEFA Europa League',
    'Europa League':'UEFA Europa League',
    'UEFA Europa Conference League':'UEFA Europa Conference League',
    'Europa Conference League':'UEFA Europa Conference League',
    'UEFA Super Cup':'UEFA Super Cup',
    'Super Cup':'UEFA Super Cup',

    // Top
    'Premier League':'Premier League',
    'La Liga':'La Liga',
    'Serie A':'Serie A',
    'Bundesliga':'Bundesliga',
    'Ligue 1':'Ligue 1',
    'Eredivisie':'Eredivisie',
    'Primeira Liga':'Primeira Liga',

    // Others
    'Scottish Premiership':'Scottish Premiership',
    'Super Lig':'Super Lig',
    'S√ºper Lig':'S√ºper Lig',
    'Super League 1':'Super League 1',
    'Super League Greece':'Super League',
    'Jupiler Pro League':'Pro League',
    'Pro League':'Pro League',
    'First Division A':'First Division A',
    'Austrian Bundesliga':'Bundesliga',
    'Swiss Super League':'Super League',
    'Super League':'Super League',
    'Ekstraklasa':'Ekstraklasa',
    'Ukrainian Premier League':'Premier League',
    'Eliteserien':'Eliteserien',
    'Allsvenskan':'Allsvenskan',
    'Superliga':'Superliga',
    'Danish Superliga':'Superliga',
    'Czech Liga':'Czech First League',
    'Fortuna Liga':'Fortuna Liga',
    '1. Liga':'First League',
    'HNL':'HNL',
    '1. HNL':'1. HNL',
    'SuperLiga':'SuperLiga',
    'Liga I':'Liga I',
    'NB I':'NB I',
    'PrvaLiga':'PrvaLiga',
    'First League':'First League',
    'Veikkausliiga':'Veikkausliiga',
    'Urvalsdeild':'√örvalsdeild',
    '√örvalsdeild':'√örvalsdeild',
    'First Division':'First Division',
    'Premier Division':'Premier Division',
    'Cymru Premier':'Cymru Premier',

    // Cups
    'FA Cup':'FA Cup',
    'EFL Cup':'EFL Cup',
    'Carabao Cup':'EFL Cup',
    'Community Shield':'Community Shield',
    'Copa del Rey':'Copa del Rey',
    'Supercopa':'Supercopa',
    'Coppa Italia':'Coppa Italia',
    'Supercoppa':'Supercoppa',
    'DFB-Pokal':'DFB-Pokal',
    'DFB Pokal':'DFB-Pokal',
    'DFB Supercup':'DFB Supercup',
    'Coupe de France':'Coupe de France',
    'Troph√©e des Champions':'Troph√©e des Champions',
    'Trophee des Champions':'Troph√©e des Champions',
    'KNVB Beker':'KNVB Beker',
    'Johan Cruijff Schaal':'Johan Cruijff Schaal',
    'Johan Cruijff Shield':'Johan Cruijff Shield',
    'Ta√ßa de Portugal':'Ta√ßa de Portugal',
    'Taca de Portugal':'Ta√ßa de Portugal',
    'Superta√ßa':'Superta√ßa',
    'Scottish Cup':'Scottish Cup',
    'Scottish League Cup':'Scottish League Cup',
    'Austrian Cup':'Austrian Cup',
    '√ñFB-Cup':'√ñFB-Cup',
    'OFB-Cup':'√ñFB-Cup',
    'Swiss Cup':'Swiss Cup',
    'Schweizer Cup':'Swiss Cup',
    'Greek Cup':'Greek Cup',
    'Turkish Cup':'Turkish Cup',
    'Belgian Cup':'Belgian Cup',
    'Croatian Cup':'Croatian Cup',
    'Romanian Cup':'Romanian Cup',
    'Hungarian Cup':'Hungarian Cup',
    'Polish Cup':'Polish Cup',
    'Czech Cup':'Czech Cup',
    'Slovak Cup':'Slovak Cup',
    'Danish Cup':'Danish Cup',
    'Norwegian Cup':'Norwegian Cup',
    'Swedish Cup':'Swedish Cup',
    'Finnish Cup':'Finnish Cup',
    'Ukrainian Cup':'Ukrainian Cup'
  }
};

function trCountryUI(country, l) {
  if (!country) return '';
  const dict = COUNTRY_TR[l] || {};
  return dict[country] || country;
}

function trLeagueUI(league, l) {
  if (!league) return '';
  const dict = LEAGUE_TR[l] || {};
  return dict[league] || league;
}

/**
 * –í–∏–∑—É–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞.
 * –û—Ä–∏–≥–∏–Ω–∞–ª –ù–ï –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º, —Ç–æ–ª—å–∫–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
 */
function translatePredictionText(original, target) {
  try {
    if (!original || target === 'ru') return original;

    const norm = (s) =>
      s.replace(/[‚Äì‚Äî‚àí]/g, '-')
       .replace(/\s+/g, ' ')
       .replace(/\s*-\s*/g, ' - ')
       .trim();

    const t = norm(original);

    const NUM  = '([0-9]+(?:[\\.,][0-9]+)?)';
    const TEAM = '(.+?)';

    const rules = [
      // –û–ë–ï –ó–ê–ë–¨–Æ–¢
      {
        re: /^–û–±–µ(?:\s+–∫–æ–º–∞–Ω–¥—ã)?\s+–∑–∞–±—å—é—Ç\s*[-:() ]*\s*(–¥–∞|–Ω–µ—Ç)$/i,
        tr: (m) => {
          const yn = (m[1] || '').toLowerCase();
          if (target === 'en') return `Both teams to score ‚Äî ${yn === '–¥–∞' ? 'yes' : 'no'}`;
          return `–û–±–∏–¥–≤—ñ –∑–∞–±'—é—Ç—å ‚Äî ${yn === '–¥–∞' ? '—Ç–∞–∫' : '–Ω—ñ'}`;
        }
      },
      {
        re: /^–û–±–µ(?:\s+–∫–æ–º–∞–Ω–¥—ã)?\s+–∑–∞–±—å—é—Ç$/i,
        tr: () => (target === 'en' ? 'Both teams to score' : "–û–±–∏–¥–≤—ñ –∑–∞–±'—é—Ç—å")
      },

      // –¢–æ—Ç–∞–ª—ã
      {
        re: new RegExp(`^–¢–æ—Ç–∞–ª\\s+–±–æ–ª—å—à–µ\\s+${NUM}$`, 'i'),
        tr: (m) => target === 'en' ? `Over ${m[1].replace(',', '.')} goals` : `–¢–æ—Ç–∞–ª –±—ñ–ª—å—à–µ ${m[1].replace(',', '.')}`
      },
      {
        re: new RegExp(`^–¢–æ—Ç–∞–ª\\s+–º–µ–Ω—å—à–µ\\s+${NUM}$`, 'i'),
        tr: (m) => target === 'en' ? `Under ${m[1].replace(',', '.')} goals` : `–¢–æ—Ç–∞–ª –º–µ–Ω—à–µ ${m[1].replace(',', '.')}`
      },
      {
        re: new RegExp(`^–¢–ë\\s*${NUM}$`, 'i'),
        tr: (m) => target === 'en' ? `Over ${m[1].replace(',', '.')} goals` : `–¢–æ—Ç–∞–ª –±—ñ–ª—å—à–µ ${m[1].replace(',', '.')}`
      },
      {
        re: new RegExp(`^–¢–ú\\s*${NUM}$`, 'i'),
        tr: (m) => target === 'en' ? `Under ${m[1].replace(',', '.')} goals` : `–¢–æ—Ç–∞–ª –º–µ–Ω—à–µ ${m[1].replace(',', '.')}`
      },

      // –§–æ—Ä–∞
      {
        re: new RegExp(`^–§–æ—Ä–∞\\s*([\\+\\-]?${NUM})\\s*–Ω–∞\\s+${TEAM}$`, 'i'),
        tr: (m) => {
          const h = (m[1] || '').replace(',', '.');
          const tm = m[2];
          if (target === 'en') return `Handicap ${tm} ${h}`;
          return `–§–æ—Ä–∞ ${tm} ${h}`.replace('–§–æ—Ä–∞', '–§–æ—Ä–∞'); // –≤ —É–∫—Ä —Ç–µ–∂ "–§–æ—Ä–∞" –∑–∞–∑–≤–∏—á–∞–π
        }
      },
      {
        re: new RegExp(`^${TEAM}\\s+–§–æ—Ä–∞\\s*([\\+\\-]?${NUM})$`, 'i'),
        tr: (m) => {
          const tm = m[1];
          const h = (m[2] || '').replace(',', '.');
          if (target === 'en') return `Handicap ${tm} ${h}`;
          return `${tm} –§–æ—Ä–∞ ${h}`;
        }
      },

      // –ò—Å—Ö–æ–¥—ã
      { re: new RegExp(`^–ü–æ–±–µ–¥–∞\\s+${TEAM}$`, 'i'), tr: (m) => target === 'en' ? `Win ${m[1]}` : `–ü–µ—Ä–µ–º–æ–≥–∞ ${m[1]}` },
      { re: /^–ù–∏—á—å—è$/i, tr: () => (target === 'en' ? 'Draw' : '–ù—ñ—á–∏—è') },

      // –ö–æ—Ä–æ—Ç–∫–∏–µ –∏—Å—Ö–æ–¥—ã
      { re: /^–ü1$/i, tr: () => (target === 'en' ? 'Home win' : '–ü–µ—Ä–µ–º–æ–≥–∞ –≥–æ—Å–ø–æ–¥–∞—Ä—ñ–≤') },
      { re: /^–ü2$/i, tr: () => (target === 'en' ? 'Away win' : '–ü–µ—Ä–µ–º–æ–≥–∞ –≥–æ—Å—Ç–µ–π') },
      { re: /^–•$/i,  tr: () => (target === 'en' ? 'Draw' : '–ù—ñ—á–∏—è') },
      { re: /^1–•$/i, tr: () => (target === 'en' ? '1X (home or draw)' : '1X (–≥–æ—Å–ø–æ–¥–∞—Ä—ñ –∞–±–æ –Ω—ñ—á–∏—è)') },
      { re: /^–•2$/i, tr: () => (target === 'en' ? 'X2 (draw or away)' : 'X2 (–Ω—ñ—á–∏—è –∞–±–æ –≥–æ—Å—Ç—ñ)') },
      { re: /^12$/i, tr: () => (target === 'en' ? '12 (no draw)' : '12 (–±–µ–∑ –Ω—ñ—á–∏—î—ó)') }
    ];

    for (const r of rules) {
      const m = t.match(r.re);
      if (m) return r.tr(m);
    }
    return original;
  } catch (e) {
    console.error('translatePredictionText error:', e);
    return original;
  }
}

let coins = 0;
let predictions = [];

// ===== –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ –¥–ª—è UI –∏ balance) =====
function getUserProfileRaw() {
  let u = telegram?.initDataUnsafe?.user;
  if (!u) {
    try {
      const saved = localStorage.getItem('tg_user');
      if (saved) u = JSON.parse(saved);
    } catch {}
  }
  return u || null;
}
function getUserId() {
  const u = getUserProfileRaw();
  return u?.id || null;
}

function getDOMElements() {
  return {
    coinBalance: document.getElementById('coinBalance'),
    predictionsContainer: document.getElementById('predictions'),
    userProfilePic: document.getElementById('userProfilePic'),
    userName: document.getElementById('userName'),
    sloganEl: document.querySelector('.logo p'),
    buyBtn: document.querySelector('.buy-btn')
  };
}

function loadUserData() {
  const { userProfilePic, userName, sloganEl, buyBtn } = getDOMElements();
  const u = getUserProfileRaw();

  if (u) {
    userName.textContent = `${translations[lang].hello}, ${u.first_name || translations[lang].guest}`;
    userProfilePic.src = u.photo_url || 'https://dummyimage.com/50x50/000/fff&text=User';
    localStorage.setItem('tg_user', JSON.stringify(u));
  } else {
    userName.textContent = `${translations[lang].hello}, ${translations[lang].guest}`;
    userProfilePic.src = 'https://dummyimage.com/50x50/000/fff&text=User';
  }

  if (sloganEl) sloganEl.textContent = translations[lang].slogan;
  if (buyBtn) buyBtn.textContent = translations[lang].buyCoins;
}

async function loadPredictions() {
  const userId = getUserId();
  if (!userId) return;

  try {
    // 1) –ë–µ—Ä—ë–º –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã (–æ—Ä–∏–≥–∏–Ω–∞–ª –∏–∑ –ë–î)
    const response = await fetch(`/api/predictions?userId=${userId}`);
    predictions = await response.json();

    // 2) –û–±–Ω–æ–≤–ª—è–µ–º/–ø–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å + —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    const u = getUserProfileRaw();
    const balanceResponse = await fetch('/balance', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        userId,
        action: 'get',
        profile: u
      })
    });
    const balanceData = await balanceResponse.json();
    coins = balanceData.coins || 0;

    updateBalance();
    renderPredictions();
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', e);
  }
}

async function unlockPrediction(predictionId) {
  const userId = getUserId();
  if (!userId || coins < 1) return alert(translations[lang].notEnough);

  const res = await fetch('/api/unlock', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ userId, predictionId })
  });

  const result = await res.json();
  if (result.success) {
    coins = result.coins;
    updateBalance();
    await loadPredictions();
  } else {
    alert(result.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ');
  }
}

function updateBalance() {
  const { coinBalance } = getDOMElements();
  if (coinBalance) coinBalance.textContent = coins;
}

// –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞: "–î–î.–ú–ú.–ì–ì –°—Ç—Ä–∞–Ω–∞. –õ–∏–≥–∞"
function formatTournamentLine(p) {
  const countryDisp = trCountryUI(p.country || '', lang);
  const leagueDisp  = trLeagueUI(p.league || '', lang);

  // –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ (—Å–±–æ—Ä–Ω—ã–µ/–µ–≤—Ä–æ–∫—É–±–∫–∏): –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∞ = International/Europe/World ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ª–∏–≥—É
  const isInternational = /^(International|World|Europe)$/i.test(p.country || '');

  if (isInternational) {
    return `${p.date || ''} ${leagueDisp}`.trim();
  }
  // –û–±—ã—á–Ω—ã–µ –ª–∏–≥–∏/–¥–æ–º–∞—à–Ω–∏–µ –∫—É–±–∫–∏: –°—Ç—Ä–∞–Ω–∞. –õ–∏–≥–∞ (–±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã –≤–Ω—É—Ç—Ä–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –ª–∏–≥–∏!)
  return `${p.date || ''} ${countryDisp ? countryDisp + '. ' : ''}${leagueDisp}`.trim();
}

/**
 * –†–µ–Ω–¥–µ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫: –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î, –≤ DOM –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥,
 * –∞ –æ—Ä–∏–≥–∏–Ω–∞–ª –∫–ª–∞–¥—ë–º –≤ data-original (–Ω–∞ –±—É–¥—É—â–µ–µ/–æ—Ç–ª–∞–¥–∫—É).
 */
function renderPredictions() {
  const { predictionsContainer } = getDOMElements();
  predictionsContainer.innerHTML = '';

  predictions.forEach(p => {
    const div = document.createElement('div');
    div.className = `prediction ${p.isUnlocked ? 'unlocked' : 'locked'}`;
    div.setAttribute('data-id', p.id);

    const textOriginal = p.predictionText || '';
    const textShown = p.isUnlocked
      ? translatePredictionText(textOriginal, lang)
      : translations[lang].locked;

    // –í–ê–ñ–ù–û: —Ç–µ–ø–µ—Ä—å —Å—Ç—Ä–æ–∏–º —Å—Ç—Ä–æ–∫—É —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ country/league/date, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –¥—É–±–ª–∏ —Å—Ç—Ä–∞–Ω—ã
    const tournamentUI = formatTournamentLine(p);

    div.innerHTML = `
      <div class="teams">
        <span class="tournament">${tournamentUI}</span>
        <div class="team-row"><img src="${p.logo1}"> ${p.team1}</div>
        <div class="team-row"><img src="${p.logo2}"> ${p.team2}</div>
      </div>
      <span class="odds">${p.odds}</span>
      <div class="prediction-text" data-original="${textOriginal.replace(/"/g, '&quot;')}">${textShown}</div>
    `;

    if (!p.isUnlocked) {
      const unlockBtn = document.createElement('button');
      unlockBtn.className = 'buy-btn unlock-btn';
      unlockBtn.textContent = translations[lang].unlock;
      unlockBtn.onclick = () => unlockPrediction(p.id);
      div.appendChild(unlockBtn);
    }

    predictionsContainer.appendChild(div);
  });
}

// –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑ –≤ 30 —Å–µ–∫
setInterval(loadPredictions, 30000);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
loadUserData();
loadPredictions();
