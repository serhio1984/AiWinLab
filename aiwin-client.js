const telegram = window.Telegram?.WebApp;

if (telegram) {
  telegram.ready();
  telegram.expand();
  console.log('‚úÖ Telegram WebApp initialized');
}

// ===== –Ø–∑—ã–∫–∏ (–≤–∏–∑—É–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ UI –∏ –ø—Ä–æ–≥–Ω–æ–∑–∞) =====
const lang = localStorage.getItem('app_lang') || 'ru';

const translations = {
  ru: {
    slogan: "–£–º–Ω—ã–µ —Å—Ç–∞–≤–∫–∏. –ë–æ–ª—å—à–∏–µ –≤—ã–∏–≥—Ä—ã—à–∏.",
    hello: "–ü—Ä–∏–≤–µ—Ç",
    guest: "–ì–æ—Å—Ç—å",
    buyCoins: "–ö—É–ø–∏—Ç—å –º–æ–Ω–µ—Ç—ã",
    unlock: "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å",
    locked: "üîí –ü—Ä–æ–≥–Ω–æ–∑ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω",
    notEnough: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç",
    openAll: (price) => `–û—Ç–∫—Ä—ã—Ç—å –≤—Å—ë –∑–∞ ${price} –º–æ–Ω–µ—Ç`,
    openedAll: "–í—Å–µ –ø—Ä–æ–≥–Ω–æ–∑—ã —É–∂–µ –æ—Ç–∫—Ä—ã—Ç—ã"
  },
  uk: {
    slogan: "–†–æ–∑—É–º–Ω—ñ —Å—Ç–∞–≤–∫–∏. –í–µ–ª–∏–∫—ñ –≤–∏–≥—Ä–∞—à—ñ.",
    hello: "–ü—Ä–∏–≤—ñ—Ç",
    guest: "–ì—ñ—Å—Ç—å",
    buyCoins: "–ö—É–ø–∏—Ç–∏ –º–æ–Ω–µ—Ç–∏",
    unlock: "–†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏",
    locked: "üîí –ü—Ä–æ–≥–Ω–æ–∑ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ",
    notEnough: "–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º–æ–Ω–µ—Ç",
    openAll: (price) => `–í—ñ–¥–∫—Ä–∏—Ç–∏ –≤—Å–µ –∑–∞ ${price} –º–æ–Ω–µ—Ç`,
    openedAll: "–£—Å—ñ –ø—Ä–æ–≥–Ω–æ–∑–∏ –≤–∂–µ –≤—ñ–¥–∫—Ä–∏—Ç—ñ"
  },
  en: {
    slogan: "Smart bets. Big wins.",
    hello: "Hello",
    guest: "Guest",
    buyCoins: "Buy coins",
    unlock: "Unlock",
    locked: "üîí Prediction locked",
    notEnough: "Not enough coins",
    openAll: (price) => `Unlock all for ${price} coins`,
    openedAll: "All predictions are already unlocked"
  }
};

/**
 * –í–∏–∑—É–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞.
 * –û—Ä–∏–≥–∏–Ω–∞–ª –ù–ï –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º, —Ç–æ–ª—å–∫–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
 */
function translatePredictionText(original, target) {
  try {
    if (!original || target === 'ru') return original;

    // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è: –¥–ª–∏–Ω–Ω—ã–µ —Ç–∏—Ä–µ ‚Üí –¥–µ—Ñ–∏—Å, —Å–∂–∞—Ç–∏–µ –ø—Ä–æ–±–µ–ª–æ–≤
    const norm = (s) =>
      s.replace(/[‚Äì‚Äî‚àí]/g, '-')
       .replace(/\s+/g, ' ')
       .replace(/\s*-\s*/g, ' - ')
       .trim();

    const t = norm(original);

    const NUM  = '([0-9]+(?:[\\.,][0-9]+)?)';
    const TEAM = '(.+?)';

    const rules = [
      // ===== –û–ë–ï –ó–ê–ë–¨–Æ–¢ =====
      {
        re: /^–û–±–µ(?:\s+–∫–æ–º–∞–Ω–¥—ã)?\s+–∑–∞–±—å—é—Ç\s*[-:() ]*\s*(–¥–∞|–Ω–µ—Ç)$/i,
        tr: (m) => {
          const yn = (m[1] || '').toLowerCase();
          if (target === 'en') return `Both teams to score ‚Äî ${yn === '–¥–∞' ? 'yes' : 'no'}`;
          return `–û–±–∏–¥–≤—ñ –∑–∞–±'—é—Ç—å ‚Äî ${yn === '–¥–∞' ? '—Ç–∞–∫' : '–Ω—ñ'}`;
        }
      },
      {
        re: /^–û–±–µ(?:\s+–∫–æ–º–∞–Ω–¥—ã)?\s+–∑–∞–±—å—é—Ç$/i,
        tr: () => (target === 'en' ? 'Both teams to score' : "–û–±–∏–¥–≤—ñ –∑–∞–±'—é—Ç—å")
      },

      // ===== –¢–æ—Ç–∞–ª—ã =====
      { // "–¢–æ—Ç–∞–ª –±–æ–ª—å—à–µ X"
        re: new RegExp(`^–¢–æ—Ç–∞–ª\\s+–±–æ–ª—å—à–µ\\s+${NUM}$`, 'i'),
        tr: (m) => target === 'en' ? `Over ${m[1].replace(',', '.')} goals` : `–¢–æ—Ç–∞–ª –±—ñ–ª—å—à–µ ${m[1].replace(',', '.')}`
      },
      { // "–¢–æ—Ç–∞–ª –º–µ–Ω—å—à–µ X"
        re: new RegExp(`^–¢–æ—Ç–∞–ª\\s+–º–µ–Ω—å—à–µ\\s+${NUM}$`, 'i'),
        tr: (m) => target === 'en' ? `Under ${m[1].replace(',', '.')} goals` : `–¢–æ—Ç–∞–ª –º–µ–Ω—à–µ ${m[1].replace(',', '.')}`
      },
      { // "–¢–ë X"
        re: new RegExp(`^–¢–ë\\s*${NUM}$`, 'i'),
        tr: (m) => target === 'en' ? `Over ${m[1].replace(',', '.')} goals` : `–¢–æ—Ç–∞–ª –±—ñ–ª—å—à–µ ${m[1].replace(',', '.')}`
      },
      { // "–¢–ú X"
        re: new RegExp(`^–¢–ú\\s*${NUM}$`, 'i'),
        tr: (m) => target === 'en' ? `Under ${m[1].replace(',', '.')} goals` : `–¢–æ—Ç–∞–ª –º–µ–Ω—à–µ ${m[1].replace(',', '.')}`
      },

      // ===== –§–æ—Ä–∞ =====
      {
        re: new RegExp(`^${TEAM}\\s+–§–æ—Ä–∞\\s*([\\+\\-]?${NUM})$`, 'i'),
        tr: (m) => {
          const tm = m[1];
          const h = (m[2] || '').replace(',', '.');
          if (target === 'en') return `${tm} Handicap ${h}`;
          return `${tm} –§–æ—Ä–∞ ${h}`;
        }
      },

      // ===== –ò—Å—Ö–æ–¥—ã =====
      {
        re: new RegExp(`^–ü–æ–±–µ–¥–∞\\s+${TEAM}$`, 'i'),
        tr: (m) => target === 'en' ? `Win ${m[1]}` : `–ü–µ—Ä–µ–º–æ–≥–∞ ${m[1]}`
      },
      { re: /^–ù–∏—á—å—è$/i, tr: () => (target === 'en' ? 'Draw' : '–ù—ñ—á–∏—è') },

      // –ö–æ—Ä–æ—Ç–∫–∏–µ –∏—Å—Ö–æ–¥—ã
      { re: /^–ü1$/i, tr: () => (target === 'en' ? 'Home win' : '–ü–µ—Ä–µ–º–æ–≥–∞ –≥–æ—Å–ø–æ–¥–∞—Ä—ñ–≤') },
      { re: /^–ü2$/i, tr: () => (target === 'en' ? 'Away win' : '–ü–µ—Ä–µ–º–æ–≥–∞ –≥–æ—Å—Ç–µ–π') },
      { re: /^–•$/i,  tr: () => (target === 'en' ? 'Draw' : '–ù—ñ—á–∏—è') },
    ];

    for (const r of rules) {
      const m = t.match(r.re);
      if (m) return r.tr(m);
    }
    return original;
  } catch (e) {
    console.error('translatePredictionText error:', e);
    return original;
  }
}

let coins = 0;
let predictions = [];

// ===== –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ –¥–ª—è UI –∏ balance) =====
function getUserProfileRaw() {
  let u = telegram?.initDataUnsafe?.user;
  if (!u) {
    try {
      const saved = localStorage.getItem('tg_user');
      if (saved) u = JSON.parse(saved);
    } catch {}
  }
  return u || null;
}
function getUserId() {
  const u = getUserProfileRaw();
  return u?.id || null;
}

function getDOMElements() {
  return {
    coinBalance: document.getElementById('coinBalance'),
    predictionsContainer: document.getElementById('predictions'),
    userProfilePic: document.getElementById('userProfilePic'),
    userName: document.getElementById('userName'),
    sloganEl: document.querySelector('.logo p'),
    buyBtn: document.querySelector('.buy-btn'),
    unlockAllBar: document.getElementById('unlockAllBar'),
    unlockAllBtn: document.getElementById('unlockAllBtn')
  };
}

function loadUserData() {
  const { userProfilePic, userName, sloganEl, buyBtn } = getDOMElements();
  const u = getUserProfileRaw();

  if (u) {
    userName.textContent = `${translations[lang].hello}, ${u.first_name || translations[lang].guest}`;
    userProfilePic.src = u.photo_url || 'https://dummyimage.com/50x50/000/fff&text=User';
    localStorage.setItem('tg_user', JSON.stringify(u));
  } else {
    userName.textContent = `${translations[lang].hello}, ${translations[lang].guest}`;
    userProfilePic.src = 'https://dummyimage.com/50x50/000/fff&text=User';
  }

  if (sloganEl) sloganEl.textContent = translations[lang].slogan;
  if (buyBtn) buyBtn.textContent = translations[lang].buyCoins;
}

async function loadPredictions() {
  const userId = getUserId();
  if (!userId) return;

  try {
    // 1) –ü—Ä–æ–≥–Ω–æ–∑—ã
    const response = await fetch(`/api/predictions?userId=${userId}`);
    predictions = await response.json();

    // 2) –ë–∞–ª–∞–Ω—Å + –ø—Ä–æ—Ñ–∏–ª—å
    const u = getUserProfileRaw();
    const balanceResponse = await fetch('/balance', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        userId,
        action: 'get',
        profile: u
      })
    });
    const balanceData = await balanceResponse.json();
    coins = balanceData.coins || 0;

    updateBalance();
    renderPredictions();
    renderUnlockAllButton(); // ‚Üê –í–ê–ñ–ù–û: –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å –∫–Ω–æ–ø–∫–∏
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', e);
  }
}

async function unlockPrediction(predictionId) {
  const userId = getUserId();
  if (!userId || coins < 1) return alert(translations[lang].notEnough);

  const res = await fetch('/api/unlock', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ userId, predictionId })
  });

  const result = await res.json();
  if (result.success) {
    coins = result.coins;
    updateBalance();
    await loadPredictions();
  } else {
    alert(result.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ');
  }
}

function updateBalance() {
  const { coinBalance } = getDOMElements();
  if (coinBalance) coinBalance.textContent = coins;
}

/**
 * –†–µ–Ω–¥–µ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫ (predictionText –≤–∏–∑—É–∞–ª—å–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∏–º, –ë–î –Ω–µ —Ç—Ä–æ–≥–∞–µ–º)
 */
function renderPredictions() {
  const { predictionsContainer } = getDOMElements();
  predictionsContainer.innerHTML = '';

  predictions.forEach(p => {
    const div = document.createElement('div');
    div.className = `prediction ${p.isUnlocked ? 'unlocked' : 'locked'}`;
    div.setAttribute('data-id', p.id);

    const textOriginal = p.predictionText || '';
    const textShown = p.isUnlocked
      ? translatePredictionText(textOriginal, lang)
      : translations[lang].locked;

    div.innerHTML = `
      <div class="teams">
        <span class="tournament">${p.tournament}</span>
        <div class="team-row"><img src="${p.logo1}"> ${p.team1}</div>
        <div class="team-row"><img src="${p.logo2}"> ${p.team2}</div>
      </div>
      <span class="odds">${p.odds}</span>
      <div class="prediction-text" data-original="${textOriginal.replace(/"/g, '&quot;')}">${textShown}</div>
    `;

    if (!p.isUnlocked) {
      const unlockBtn = document.createElement('button');
      unlockBtn.className = 'buy-btn unlock-btn';
      unlockBtn.textContent = translations[lang].unlock;
      unlockBtn.onclick = () => unlockPrediction(p.id);
      div.appendChild(unlockBtn);
    }

    predictionsContainer.appendChild(div);
  });
}

/**
 * –ü–æ–¥—Å—á—ë—Ç —Ü–µ–Ω—ã ¬´–û—Ç–∫—Ä—ã—Ç—å –≤—Å—ë¬ª: ceil(count / 1.3)
 */
function calcUnlockAllPrice() {
  const count = Array.isArray(predictions) ? predictions.length : 0;
  if (count <= 0) return 0;
  return Math.ceil(count / 1.3);
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—å –æ–¥–∏–Ω –∑–∞–∫—Ä—ã—Ç—ã–π –ø—Ä–æ–≥–Ω–æ–∑
 */
function hasLocked() {
  return predictions.some(p => !p.isUnlocked);
}

/**
 * –†–µ–Ω–¥–µ—Ä –Ω–∏–∂–Ω–µ–π –ø–∞–Ω–µ–ª–∏ –∏ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
 */
function renderUnlockAllButton() {
  const { unlockAllBar, unlockAllBtn } = getDOMElements();
  if (!unlockAllBar || !unlockAllBtn) return;

  const locked = hasLocked();
  if (!locked) {
    unlockAllBar.style.display = 'none';
    return;
  }

  const price = calcUnlockAllPrice();
  unlockAllBtn.textContent = translations[lang].openAll(price);
  unlockAllBar.style.display = 'block';

  unlockAllBtn.onclick = async () => {
    try {
      unlockAllBtn.disabled = true;
      const userId = getUserId();
      if (!userId) return;

      // –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–Ω–µ—Ç
      if (coins < price) {
        alert(translations[lang].notEnough);
        unlockAllBtn.disabled = false;
        return;
      }

      const resp = await fetch('/api/unlock-all', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ userId, price })
      });
      const data = await resp.json();

      if (!data.ok) {
        alert(data.error || '–û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏');
        unlockAllBtn.disabled = false;
        return;
      }

      // –£—Å–ø–µ—à–Ω–æ: –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏ –ø–æ–º–µ—á–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–∞–∫ –æ—Ç–∫—Ä—ã—Ç—ã–µ
      coins = data.coins ?? coins;
      updateBalance();

      predictions = predictions.map(p => ({ ...p, isUnlocked: true }));
      renderPredictions();
      renderUnlockAllButton(); // —Å–∫—Ä–æ–µ—Ç—Å—è —Å–∞–º–∞, —Ç.–∫. –±–æ–ª—å—à–µ –Ω–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã—Ö
    } catch (e) {
      console.error('Unlock-all error:', e);
      alert('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
    } finally {
      unlockAllBtn.disabled = false;
    }
  };
}

// –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑ –≤ 30 —Å–µ–∫
setInterval(loadPredictions, 30000);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
loadUserData();
loadPredictions();
