const telegram = window.Telegram?.WebApp;

if (telegram) {
  telegram.ready();
  telegram.expand();
  console.log('‚úÖ Telegram WebApp initialized');
}

// ===== –Ø–∑—ã–∫–∏ (–≤–∏–∑—É–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ UI –∏ –ø—Ä–æ–≥–Ω–æ–∑–∞) =====
const lang = localStorage.getItem('app_lang') || 'ru';

const translations = {
  ru: {
    slogan: "–£–º–Ω—ã–µ —Å—Ç–∞–≤–∫–∏. –ë–æ–ª—å—à–∏–µ –≤—ã–∏–≥—Ä—ã—à–∏.",
    hello: "–ü—Ä–∏–≤–µ—Ç",
    guest: "–ì–æ—Å—Ç—å",
    buyCoins: "–ö—É–ø–∏—Ç—å –º–æ–Ω–µ—Ç—ã",
    unlock: "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å",
    locked: "üîí –ü—Ä–æ–≥–Ω–æ–∑ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω",
    notEnough: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç",
    footballWord: "–§—É—Ç–±–æ–ª",
    handicapWord: "–§–æ—Ä–∞"
  },
  uk: {
    slogan: "–†–æ–∑—É–º–Ω—ñ —Å—Ç–∞–≤–∫–∏. –í–µ–ª–∏–∫—ñ –≤–∏–≥—Ä–∞—à—ñ.",
    hello: "–ü—Ä–∏–≤—ñ—Ç",
    guest: "–ì—ñ—Å—Ç—å",
    buyCoins: "–ö—É–ø–∏—Ç–∏ –º–æ–Ω–µ—Ç–∏",
    unlock: "–†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏",
    locked: "üîí –ü—Ä–æ–≥–Ω–æ–∑ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ",
    notEnough: "–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º–æ–Ω–µ—Ç",
    footballWord: "–§—É—Ç–±–æ–ª",
    handicapWord: "–§–æ—Ä–∞"
  },
  en: {
    slogan: "Smart bets. Big wins.",
    hello: "Hello",
    guest: "Guest",
    buyCoins: "Buy coins",
    unlock: "Unlock",
    locked: "üîí Prediction locked",
    notEnough: "Not enough coins",
    footballWord: "Football",
    handicapWord: "Handicap"
  }
};

// ===== –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã: —Å—Ç—Ä–æ–≥–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è –ø–æ –∫–ª—é—á–∞–º =====
function isInternationalTournament(name = "") {
  const n = name.toLowerCase();
  return [
    'uefa champions league', '–ª–∏–≥–∞ —á–µ–º–ø–∏–æ–Ω–æ–≤', '–ª—ñ–≥–∞ —á–µ–º–ø—ñ–æ–Ω—ñ–≤',
    'uefa europa league', '–ª–∏–≥–∞ –µ–≤—Ä–æ–ø—ã', '–ª—ñ–≥–∞ —î–≤—Ä–æ–ø–∏',
    'uefa europa conference', '–ª–∏–≥–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü', '–ª—ñ–≥–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü',
    'euro', 'european championship', '—á–µ–º–ø–∏–æ–Ω–∞—Ç –µ–≤—Ä–æ–ø—ã', '—á–µ–º–ø—ñ–æ–Ω–∞—Ç —î–≤—Ä–æ–ø–∏',
    'qualification', '–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü', '–≤—ñ–¥–±—ñ—Ä',
  ].some(k => n.includes(k));
}

// ===== –ü–µ—Ä–µ–≤–æ–¥—ã –Ω–∞–∑–≤–∞–Ω–∏–π –ª–∏–≥ (—Ç–æ–ª—å–∫–æ –¥–ª—è –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö) =====
const INT_LEAGUE_LABELS = {
  ru: {
    ucl: '–õ–∏–≥–∞ –ß–µ–º–ø–∏–æ–Ω–æ–≤ –£–ï–§–ê',
    uel: '–õ–∏–≥–∞ –ï–≤—Ä–æ–ø—ã –£–ï–§–ê',
    uecl: '–õ–∏–≥–∞ –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π –£–ï–§–ê'
  },
  uk: {
    ucl: '–õ—ñ–≥–∞ –ß–µ–º–ø—ñ–æ–Ω—ñ–≤ –£–Ñ–§–ê',
    uel: '–õ—ñ–≥–∞ –Ñ–≤—Ä–æ–ø–∏ –£–Ñ–§–ê',
    uecl: '–õ—ñ–≥–∞ –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü—ñ–π –£–Ñ–§–ê'
  },
  en: {
    ucl: 'UEFA Champions League',
    uel: 'UEFA Europa League',
    uecl: 'UEFA Europa Conference League'
  }
};

function normalizeLower(s='') {
  return s.toLowerCase().normalize('NFKD').replace(/\s+/g,' ').trim();
}

function detectInternationalKey(name='') {
  const n = normalizeLower(name);
  if (/champions league|–ª—ñ–≥–∞ —á–µ–º–ø—ñ–æ–Ω—ñ–≤|–ª–∏–≥–∞ —á–µ–º–ø–∏–æ–Ω–æ–≤/.test(n)) return 'ucl';
  if (/europa league|–ª—ñ–≥–∞ —î–≤—Ä–æ–ø–∏|–ª–∏–≥–∞ –µ–≤—Ä–æ–ø—ã/.test(n)) return 'uel';
  if (/conference league|–ª—ñ–≥–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü|–ª–∏–≥–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü/.test(n)) return 'uecl';
  return null;
}

// ===== –°—Ç—Ä–∞–Ω—ã (–ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è, –∏ —Ä—É—Å—Å–∫–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ä–º—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞) =====
const COUNTRY_LABELS = {
  ru: {
    england: '–ê–Ω–≥–ª–∏—è',
    spain: '–ò—Å–ø–∞–Ω–∏—è',
    italy: '–ò—Ç–∞–ª–∏—è',
    germany: '–ì–µ—Ä–º–∞–Ω–∏—è',
    france: '–§—Ä–∞–Ω—Ü–∏—è',
    netherlands: '–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã',
    portugal: '–ü–æ—Ä—Ç—É–≥–∞–ª–∏—è',
    ukraine: '–£–∫—Ä–∞–∏–Ω–∞',
    scotland: '–®–æ—Ç–ª–∞–Ω–¥–∏—è',
    turkey: '–¢—É—Ä—Ü–∏—è',
    greece: '–ì—Ä–µ—Ü–∏—è',
    belgium: '–ë–µ–ª—å–≥–∏—è',
    austria: '–ê–≤—Å—Ç—Ä–∏—è',
    switzerland: '–®–≤–µ–π—Ü–∞—Ä–∏—è',
    poland: '–ü–æ–ª—å—à–∞',
  },
  uk: {
    england: '–ê–Ω–≥–ª—ñ—è',
    spain: '–Ü—Å–ø–∞–Ω—ñ—è',
    italy: '–Ü—Ç–∞–ª—ñ—è',
    germany: '–ù—ñ–º–µ—á—á–∏–Ω–∞',
    france: '–§—Ä–∞–Ω—Ü—ñ—è',
    netherlands: '–ù—ñ–¥–µ—Ä–ª–∞–Ω–¥–∏',
    portugal: '–ü–æ—Ä—Ç—É–≥–∞–ª—ñ—è',
    ukraine: '–£–∫—Ä–∞—ó–Ω–∞',
    scotland: '–®–æ—Ç–ª–∞–Ω–¥—ñ—è',
    turkey: '–¢—É—Ä–µ—á—á–∏–Ω–∞',
    greece: '–ì—Ä–µ—Ü—ñ—è',
    belgium: '–ë–µ–ª—å–≥—ñ—è',
    austria: '–ê–≤—Å—Ç—Ä—ñ—è',
    switzerland: '–®–≤–µ–π—Ü–∞—Ä—ñ—è',
    poland: '–ü–æ–ª—å—â–∞',
  },
  en: {
    england: 'England',
    spain: 'Spain',
    italy: 'Italy',
    germany: 'Germany',
    france: 'France',
    netherlands: 'Netherlands',
    portugal: 'Portugal',
    ukraine: 'Ukraine',
    scotland: 'Scotland',
    turkey: 'Turkey',
    greece: 'Greece',
    belgium: 'Belgium',
    austria: 'Austria',
    switzerland: 'Switzerland',
    poland: 'Poland',
  }
};

// –†—É—Å—Å–∫–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ä–º—ã (–∫–∞–∫ –≤ ¬´–ü—Ä–µ–º—å–µ—Ä-–õ–∏–≥–∞ –ê–Ω–≥–ª–∏–∏¬ª, ¬´–õ–∞ –õ–∏–≥–∞ –ò—Å–ø–∞–Ω–∏–∏¬ª)
const RU_GENITIVE_TO_KEY = {
  '–∞–Ω–≥–ª–∏–∏': 'england',
  '–∏—Å–ø–∞–Ω–∏–∏': 'spain',
  '–∏—Ç–∞–ª–∏–∏': 'italy',
  '–≥–µ—Ä–º–∞–Ω–∏–∏': 'germany',
  '—Ñ—Ä–∞–Ω—Ü–∏–∏': 'france',
  '–Ω–∏–¥–µ—Ä–ª–∞–Ω–¥–æ–≤': 'netherlands',
  '–ø–æ—Ä—Ç—É–≥–∞–ª–∏–∏': 'portugal',
  '—É–∫—Ä–∞–∏–Ω—ã': 'ukraine',
  '—à–æ—Ç–ª–∞–Ω–¥–∏–∏': 'scotland',
  '—Ç—É—Ä—Ü–∏–∏': 'turkey',
  '–≥—Ä–µ—Ü–∏–∏': 'greece',
  '–±–µ–ª—å–≥–∏–∏': 'belgium',
  '–∞–≤—Å—Ç—Ä–∏–∏': 'austria',
  '—à–≤–µ–π—Ü–∞—Ä–∏–∏': 'switzerland',
  '–ø–æ–ª—å—à–∏': 'poland'
};

// –¢–∞–∫–∂–µ –ø–æ–¥–¥–µ—Ä–∂–∏–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Ñ–æ—Ä–º—ã –ø—Ä—è–º–æ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ (—Ä–µ–¥–∫–æ, –Ω–æ –±—ã–≤–∞–µ—Ç)
const EN_COUNTRY_TO_KEY = {
  'england': 'england',
  'spain': 'spain',
  'italy': 'italy',
  'germany': 'germany',
  'france': 'france',
  'netherlands': 'netherlands',
  'portugal': 'portugal',
  'ukraine': 'ukraine',
  'scotland': 'scotland',
  'turkey': 'turkey',
  'greece': 'greece',
  'belgium': 'belgium',
  'austria': 'austria',
  'switzerland': 'switzerland',
  'poland': 'poland'
};

// –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Å—Ç—Ä–∞–Ω—É –ø—Ä—è–º–æ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –ª–∏–≥–∏ (–±–µ–∑ —É–≥–∞–¥—ã–≤–∞–Ω–∏–π –ø–æ ¬´Premier League¬ª)
function extractCountryKeyFromLeagueName(leagueName = '') {
  const n = normalizeLower(leagueName);
  // –°–Ω–∞—á–∞–ª–∞ —Ä—É—Å—Å–∫–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ä–º—ã
  for (const [ruGen, key] of Object.entries(RU_GENITIVE_TO_KEY)) {
    if (n.includes(ruGen)) return key;
  }
  // –ó–∞—Ç–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Ñ–æ—Ä–º—ã
  for (const [enName, key] of Object.entries(EN_COUNTRY_TO_KEY)) {
    if (n.includes(enName)) return key;
  }
  return null;
}

/**
 * –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä —Å—Ç—Ä–æ–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞:
 * - –ï—Å–ª–∏ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π (—è–≤–Ω—ã–µ –∫–ª—é—á–∏) ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¢–û–õ–¨–ö–û –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ (–ª–æ–∫–∞–ª–∏–∑—É–µ–º –ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏), –ë–ï–ó –¥–∞—Ç—ã –∏ –±–µ–∑ ¬´–§—É—Ç–±–æ–ª¬ª.
 * - –ò–Ω–∞—á–µ: –∑–∞–º–µ–Ω—è–µ–º ¬´–§—É—Ç–±–æ–ª¬ª –Ω–∞ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é ¬´–°—Ç—Ä–∞–Ω—É¬ª, –∏–∑–≤–ª–µ–∫–∞—è –µ—ë –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –ª–∏–≥–∏.
 *   –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω—É –Ω–µ —Å–º–æ–≥–ª–∏ –∏–∑–≤–ª–µ—á—å ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º ¬´–§—É—Ç–±–æ–ª¬ª (–ø–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω—ã–π), —á—Ç–æ–±—ã –Ω–µ –≤—Ä–∞—Ç—å.
 *
 * –§–æ—Ä–º–∞—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: "–§—É—Ç–±–æ–ª.dd.mm.yy <League>"
 */
function renderTournamentLine(original) {
  if (!original) return original;

  const m = original.match(/^–§—É—Ç–±–æ–ª\.(\d{2}\.\d{2}\.\d{2})\s+(.+)$/i);
  if (!m) {
    // –ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –ª–æ–∫–∞–ª–∏–∑—É–µ–º —Å–ª–æ–≤–æ "–§—É—Ç–±–æ–ª" –∏ –≤–µ—Ä–Ω—ë–º
    return original.replace(/^–§—É—Ç–±–æ–ª/i, translations[lang].footballWord);
  }

  const datePart = m[1];
  const leagueRaw  = m[2];

  // –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ
  if (isInternationalTournament(leagueRaw)) {
    const key = detectInternationalKey(leagueRaw);
    if (key && INT_LEAGUE_LABELS[lang][key]) {
      return INT_LEAGUE_LABELS[lang][key];
    }
    // –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∫–ª—é—á ‚Äî –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∏–≥–∏ –∫–∞–∫ –µ—Å—Ç—å
    return leagueRaw;
  }

  // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ: –≤—ã—Ç–∞—â–∏–º —Å—Ç—Ä–∞–Ω—É –∏–∑ –∏–º–µ–Ω–∏ –ª–∏–≥–∏
  const countryKey = extractCountryKeyFromLeagueName(leagueRaw);
  if (countryKey) {
    const countryName = COUNTRY_LABELS[lang][countryKey] || COUNTRY_LABELS.ru[countryKey] || '';
    if (countryName) {
      return `${countryName}.${datePart} ${leagueRaw}`;
    }
  }

  // –§–æ–ª–±—ç–∫ ‚Äî –Ω–µ –∑–Ω–∞–µ–º —Å—Ç—Ä–∞–Ω—É: –Ω–µ –¥–µ–ª–∞–µ–º –¥–æ–≥–∞–¥–æ–∫, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–≤–æ–¥–∏–º —Å–ª–æ–≤–æ ¬´–§—É—Ç–±–æ–ª¬ª
  const footballWord = translations[lang].footballWord;
  return `${footballWord}.${datePart} ${leagueRaw}`;
}

/**
 * –í–∏–∑—É–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª–∞).
 */
function translatePredictionText(original, target) {
  try {
    if (!original || target === 'ru') return original;

    const norm = (s) =>
      s.replace(/[‚Äì‚Äî‚àí]/g, '-')   // —Ç–∏—Ä–µ ‚Üí –¥–µ—Ñ–∏—Å
       .replace(/\s+/g, ' ')     // —Å–∂–∞—Ç—å –ø—Ä–æ–±–µ–ª—ã
       .replace(/\s*-\s*/g, ' - ')
       .trim();

    const t = norm(original);

    const NUM  = '([0-9]+(?:[\\.,][0-9]+)?)';
    const TEAM = '(.+?)';

    const rules = [
      // ===== –û–ë–ï –ó–ê–ë–¨–Æ–¢ =====
      {
        re: /^–û–±–µ(?:\s+–∫–æ–º–∞–Ω–¥—ã)?\s+–∑–∞–±—å—é—Ç\s*[-:() ]*\s*(–¥–∞|–Ω–µ—Ç)$/i,
        tr: (m) => {
          const yn = (m[1] || '').toLowerCase();
          if (target === 'en') return `Both teams to score ‚Äî ${yn === '–¥–∞' ? 'yes' : 'no'}`;
          return `–û–±–∏–¥–≤—ñ –∑–∞–±'—é—Ç—å ‚Äî ${yn === '–¥–∞' ? '—Ç–∞–∫' : '–Ω—ñ'}`;
        }
      },
      {
        re: /^–û–±–µ(?:\s+–∫–æ–º–∞–Ω–¥—ã)?\s+–∑–∞–±—å—é—Ç$/i,
        tr: () => (target === 'en' ? 'Both teams to score' : "–û–±–∏–¥–≤—ñ –∑–∞–±'—é—Ç—å")
      },

      // ===== –¢–æ—Ç–∞–ª—ã =====
      { // "–¢–æ—Ç–∞–ª –±–æ–ª—å—à–µ X"
        re: new RegExp(`^–¢–æ—Ç–∞–ª\\s+–±–æ–ª—å—à–µ\\s+${NUM}$`, 'i'),
        tr: (m) => target === 'en' ? `Over ${m[1].replace(',', '.')} goals` : `–¢–æ—Ç–∞–ª –±—ñ–ª—å—à–µ ${m[1].replace(',', '.')}`
      },
      { // "–¢–æ—Ç–∞–ª –º–µ–Ω—å—à–µ X"
        re: new RegExp(`^–¢–æ—Ç–∞–ª\\s+–º–µ–Ω—å—à–µ\\s+${NUM}$`, 'i'),
        tr: (m) => target === 'en' ? `Under ${m[1].replace(',', '.')} goals` : `–¢–æ—Ç–∞–ª –º–µ–Ω—à–µ ${m[1].replace(',', '.')}`
      },
      { // "–¢–ë X"
        re: new RegExp(`^–¢–ë\\s*${NUM}$`, 'i'),
        tr: (m) => target === 'en' ? `Over ${m[1].replace(',', '.')} goals` : `–¢–æ—Ç–∞–ª –±—ñ–ª—å—à–µ ${m[1].replace(',', '.')}`
      },
      { // "–¢–ú X"
        re: new RegExp(`^–¢–ú\\s*${NUM}$`, 'i'),
        tr: (m) => target === 'en' ? `Under ${m[1].replace(',', '.')} goals` : `–¢–æ—Ç–∞–ª –º–µ–Ω—à–µ ${m[1].replace(',', '.')}`
      },

      // ===== –§–æ—Ä—ã =====
      // "–§–æ—Ä–∞ -1.5 –Ω–∞ {TEAM}" ‚Üí EN: Handicap TEAM -1.5, UK: –§–æ—Ä–∞ TEAM -1.5
      {
        re: new RegExp(`^–§–æ—Ä–∞\\s*([\\+\\-]?${NUM})\\s*–Ω–∞\\s+${TEAM}$`, 'i'),
        tr: (m) => {
          const h = (m[1] || '').replace(',', '.');
          const tm = m[2];
          return target === 'en' ? `Handicap ${tm} ${h}` : `–§–æ—Ä–∞ ${tm} ${h}`;
        }
      },
      // "{TEAM} –§–æ—Ä–∞ -1.5" ‚Üí EN: Handicap TEAM -1.5 / UK: –§–æ—Ä–∞ TEAM -1.5
      {
        re: new RegExp(`^${TEAM}\\s+–§–æ—Ä–∞\\s*([\\+\\-]?${NUM})$`, 'i'),
        tr: (m) => {
          const tm = m[1];
          const h  = (m[2] || '').replace(',', '.');
          return target === 'en' ? `Handicap ${tm} ${h}` : `–§–æ—Ä–∞ ${tm} ${h}`;
        }
      },

      // ===== –ò—Å—Ö–æ–¥—ã =====
      {
        re: new RegExp(`^–ü–æ–±–µ–¥–∞\\s+${TEAM}$`, 'i'),
        tr: (m) => target === 'en' ? `Win ${m[1]}` : `–ü–µ—Ä–µ–º–æ–≥–∞ ${m[1]}`
      },
      { re: /^–ù–∏—á—å—è$/i, tr: () => (target === 'en' ? 'Draw' : '–ù—ñ—á–∏—è') },

      // –ö–æ—Ä–æ—Ç–∫–∏–µ –∏—Å—Ö–æ–¥—ã (—Ä–µ–∑–µ—Ä–≤)
      { re: /^–ü1$/i, tr: () => (target === 'en' ? 'Home win' : '–ü–µ—Ä–µ–º–æ–≥–∞ –≥–æ—Å–ø–æ–¥–∞—Ä—ñ–≤') },
      { re: /^–ü2$/i, tr: () => (target === 'en' ? 'Away win' : '–ü–µ—Ä–µ–º–æ–≥–∞ –≥–æ—Å—Ç–µ–π') },
      { re: /^–•$/i,  tr: () => (target === 'en' ? 'Draw' : '–ù—ñ—á–∏—è') }
    ];

    for (const r of rules) {
      const m = t.match(r.re);
      if (m) return r.tr(m);
    }
    return original;
  } catch (e) {
    console.error('translatePredictionText error:', e);
    return original;
  }
}

let coins = 0;
let predictions = [];

// ===== –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ –¥–ª—è UI –∏ balance) =====
function getUserProfileRaw() {
  let u = telegram?.initDataUnsafe?.user;
  if (!u) {
    try {
      const saved = localStorage.getItem('tg_user');
      if (saved) u = JSON.parse(saved);
    } catch {}
  }
  return u || null;
}
function getUserId() {
  const u = getUserProfileRaw();
  return u?.id || null;
}

function getDOMElements() {
  return {
    coinBalance: document.getElementById('coinBalance'),
    predictionsContainer: document.getElementById('predictions'),
    userProfilePic: document.getElementById('userProfilePic'),
    userName: document.getElementById('userName'),
    sloganEl: document.querySelector('.logo p'),
    buyBtn: document.querySelector('.buy-btn')
  };
}

function loadUserData() {
  const { userProfilePic, userName, sloganEl, buyBtn } = getDOMElements();
  const u = getUserProfileRaw();

  if (u) {
    userName.textContent = `${translations[lang].hello}, ${u.first_name || translations[lang].guest}`;
    userProfilePic.src = u.photo_url || 'https://dummyimage.com/50x50/000/fff&text=User';
    localStorage.setItem('tg_user', JSON.stringify(u));
  } else {
    userName.textContent = `${translations[lang].hello}, ${translations[lang].guest}`;
    userProfilePic.src = 'https://dummyimage.com/50x50/000/fff&text=User';
  }

  if (sloganEl) sloganEl.textContent = translations[lang].slogan;
  if (buyBtn) buyBtn.textContent = translations[lang].buyCoins;
}

async function loadPredictions() {
  const userId = getUserId();
  if (!userId) return;

  try {
    const response = await fetch(`/api/predictions?userId=${userId}`);
    predictions = await response.json();

    const u = getUserProfileRaw();
    const balanceResponse = await fetch('/balance', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        userId,
        action: 'get',
        profile: u
      })
    });
    const balanceData = await balanceResponse.json();
    coins = balanceData.coins || 0;

    updateBalance();
    renderPredictions();
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', e);
  }
}

async function unlockPrediction(predictionId) {
  const userId = getUserId();
  if (!userId || coins < 1) return alert(translations[lang].notEnough);

  const res = await fetch('/api/unlock', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ userId, predictionId })
  });

  const result = await res.json();
  if (result.success) {
    coins = result.coins;
    updateBalance();
    await loadPredictions();
  } else {
    alert(result.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ');
  }
}

function updateBalance() {
  const { coinBalance } = getDOMElements();
  if (coinBalance) coinBalance.textContent = coins;
}

/**
 * –†–µ–Ω–¥–µ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫ (–ø–µ—Ä–µ–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –∏ ¬´–§—É—Ç–±–æ–ª¬ª ‚Üí ¬´–°—Ç—Ä–∞–Ω–∞¬ª/–º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ).
 */
function renderPredictions() {
  const { predictionsContainer } = getDOMElements();
  predictionsContainer.innerHTML = '';

  predictions.forEach(p => {
    const div = document.createElement('div');
    div.className = `prediction ${p.isUnlocked ? 'unlocked' : 'locked'}`;
    div.setAttribute('data-id', p.id);

    const textOriginal = p.predictionText || '';
    const textShown = p.isUnlocked
      ? translatePredictionText(textOriginal, lang)
      : translations[lang].locked;

    // === –¢–£–†–ù–ò–†: ¬´–§—É—Ç–±–æ–ª¬ª ‚Üí ¬´–°—Ç—Ä–∞–Ω–∞¬ª, –ª–∏–±–æ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π ‚Äî —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
    const tournamentShown = renderTournamentLine(p.tournament);

    div.innerHTML = `
      <div class="teams">
        <span class="tournament">${tournamentShown}</span>
        <div class="team-row"><img src="${p.logo1}"> ${p.team1}</div>
        <div class="team-row"><img src="${p.logo2}"> ${p.team2}</div>
      </div>
      <span class="odds">${p.odds}</span>
      <div class="prediction-text" data-original="${textOriginal.replace(/"/g, '&quot;')}">${textShown}</div>
    `;

    if (!p.isUnlocked) {
      const unlockBtn = document.createElement('button');
      unlockBtn.className = 'buy-btn unlock-btn';
      unlockBtn.textContent = translations[lang].unlock;
      unlockBtn.onclick = () => unlockPrediction(p.id);
      div.appendChild(unlockBtn);
    }

    predictionsContainer.appendChild(div);
  });
}

// –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑ –≤ 30 —Å–µ–∫ (—Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ)
setInterval(loadPredictions, 30000);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
loadUserData();
loadPredictions();
