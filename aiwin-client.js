const telegram = window.Telegram?.WebApp;

if (telegram) {
  telegram.ready();
  telegram.expand();
  console.log('‚úÖ Telegram WebApp initialized');
}

// ===== –¢–µ–∫—É—â–∏–π —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ =====
const lang = localStorage.getItem('app_lang') || 'ru';

const translations = {
  ru: {
    slogan: "–£–º–Ω—ã–µ —Å—Ç–∞–≤–∫–∏. –ë–æ–ª—å—à–∏–µ –≤—ã–∏–≥—Ä—ã—à–∏.",
    hello: "–ü—Ä–∏–≤–µ—Ç",
    guest: "–ì–æ—Å—Ç—å",
    buyCoins: "–ö—É–ø–∏—Ç—å –º–æ–Ω–µ—Ç—ã",
    unlock: "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å",
    locked: "üîí –ü—Ä–æ–≥–Ω–æ–∑ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω",
    notEnough: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç",
    openAll: "–û—Ç–∫—Ä—ã—Ç—å –≤—Å—ë –∑–∞ 60 –º–æ–Ω–µ—Ç",
    openedAllOk: "–í—Å–µ –ø—Ä–æ–≥–Ω–æ–∑—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç—ã!"
  },
  uk: {
    slogan: "–†–æ–∑—É–º–Ω—ñ —Å—Ç–∞–≤–∫–∏. –í–µ–ª–∏–∫—ñ –≤–∏–≥—Ä–∞—à—ñ.",
    hello: "–ü—Ä–∏–≤—ñ—Ç",
    guest: "–ì—ñ—Å—Ç—å",
    buyCoins: "–ö—É–ø–∏—Ç–∏ –º–æ–Ω–µ—Ç–∏",
    unlock: "–†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏",
    locked: "üîí –ü—Ä–æ–≥–Ω–æ–∑ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ",
    notEnough: "–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º–æ–Ω–µ—Ç",
    openAll: "–í—ñ–¥–∫—Ä–∏—Ç–∏ –≤—Å–µ –∑–∞ 60 –º–æ–Ω–µ—Ç",
    openedAllOk: "–£—Å—ñ –ø—Ä–æ–≥–Ω–æ–∑–∏ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–∫—Ä–∏—Ç—ñ!"
  },
  en: {
    slogan: "Smart bets. Big wins.",
    hello: "Hello",
    guest: "Guest",
    buyCoins: "Buy coins",
    unlock: "Unlock",
    locked: "üîí Prediction locked",
    notEnough: "Not enough coins",
    openAll: "Unlock all for 60 coins",
    openedAllOk: "All predictions unlocked!"
  }
};

// ========== –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø –ö–õ–Æ–ß–ï–ô –î–õ–Ø i18n ==========
const removeDiacritics = (s='') => s.normalize('NFKD').replace(/[\u0300-\u036f]/g, '');
const normKey = (s='') => removeDiacritics(String(s)).toLowerCase().trim();

// ===== i18n —Å—Ç—Ä–∞–Ω –∏ –ª–∏–≥ + —Å–∏–Ω–æ–Ω–∏–º—ã =====
const COUNTRY_I18N = {
  ru: {
    International: "–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ",
    World: "–ú–∏—Ä",
    Europe: "–ï–≤—Ä–æ–ø–∞",
    England: "–ê–Ω–≥–ª–∏—è",
    Spain: "–ò—Å–ø–∞–Ω–∏—è",
    Italy: "–ò—Ç–∞–ª–∏—è",
    Germany: "–ì–µ—Ä–º–∞–Ω–∏—è",
    France: "–§—Ä–∞–Ω—Ü–∏—è",
    Netherlands: "–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã",
    Portugal: "–ü–æ—Ä—Ç—É–≥–∞–ª–∏—è",
    Scotland: "–®–æ—Ç–ª–∞–Ω–¥–∏—è",
    Turkey: "–¢—É—Ä—Ü–∏—è",
    Greece: "–ì—Ä–µ—Ü–∏—è",
    Belgium: "–ë–µ–ª—å–≥–∏—è",
    Austria: "–ê–≤—Å—Ç—Ä–∏—è",
    Switzerland: "–®–≤–µ–π—Ü–∞—Ä–∏—è",
    Poland: "–ü–æ–ª—å—à–∞",
    Ukraine: "–£–∫—Ä–∞–∏–Ω–∞",
    Norway: "–ù–æ—Ä–≤–µ–≥–∏—è",
    Sweden: "–®–≤–µ—Ü–∏—è",
    Denmark: "–î–∞–Ω–∏—è",
    "Czech Republic": "–ß–µ—Ö–∏—è",
    Czechia: "–ß–µ—Ö–∏—è",
    Croatia: "–•–æ—Ä–≤–∞—Ç–∏—è",
    Serbia: "–°–µ—Ä–±–∏—è",
    Romania: "–†—É–º—ã–Ω–∏—è",
    Hungary: "–í–µ–Ω–≥—Ä–∏—è",
    Slovakia: "–°–ª–æ–≤–∞–∫–∏—è",
    Slovenia: "–°–ª–æ–≤–µ–Ω–∏—è",
    Bulgaria: "–ë–æ–ª–≥–∞—Ä–∏—è",
    Finland: "–§–∏–Ω–ª—è–Ω–¥–∏—è",
    Iceland: "–ò—Å–ª–∞–Ω–¥–∏—è",
    Cyprus: "–ö–∏–ø—Ä",
    Ireland: "–ò—Ä–ª–∞–Ω–¥–∏—è",
    Wales: "–£—ç–ª—å—Å",
    "Northern Ireland": "–°–µ–≤–µ—Ä–Ω–∞—è –ò—Ä–ª–∞–Ω–¥–∏—è",
    Israel: "–ò–∑—Ä–∞–∏–ª—å",
    Kazakhstan: "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω",
  },
  uk: {
    International: "–ú—ñ–∂–Ω–∞—Ä–æ–¥–Ω—ñ",
    World: "–°–≤—ñ—Ç",
    Europe: "–Ñ–≤—Ä–æ–ø–∞",
    England: "–ê–Ω–≥–ª—ñ—è",
    Spain: "–Ü—Å–ø–∞–Ω—ñ—è",
    Italy: "–Ü—Ç–∞–ª—ñ—è",
    Germany: "–ù—ñ–º–µ—á—á–∏–Ω–∞",
    France: "–§—Ä–∞–Ω—Ü—ñ—è",
    Netherlands: "–ù—ñ–¥–µ—Ä–ª–∞–Ω–¥–∏",
    Portugal: "–ü–æ—Ä—Ç—É–≥–∞–ª—ñ—è",
    Scotland: "–®–æ—Ç–ª–∞–Ω–¥—ñ—è",
    Turkey: "–¢—É—Ä–µ—á—á–∏–Ω–∞",
    Greece: "–ì—Ä–µ—Ü—ñ—è",
    Belgium: "–ë–µ–ª—å–≥—ñ—è",
    Austria: "–ê–≤—Å—Ç—Ä—ñ—è",
    Switzerland: "–®–≤–µ–π—Ü–∞—Ä—ñ—è",
    Poland: "–ü–æ–ª—å—â–∞",
    Ukraine: "–£–∫—Ä–∞—ó–Ω–∞",
    Norway: "–ù–æ—Ä–≤–µ–≥—ñ—è",
    Sweden: "–®–≤–µ—Ü—ñ—è",
    Denmark: "–î–∞–Ω—ñ—è",
    "Czech Republic": "–ß–µ—Ö—ñ—è",
    Czechia: "–ß–µ—Ö—ñ—è",
    Croatia: "–•–æ—Ä–≤–∞—Ç—ñ—è",
    Serbia: "–°–µ—Ä–±—ñ—è",
    Romania: "–†—É–º—É–Ω—ñ—è",
    Hungary: "–£–≥–æ—Ä—â–∏–Ω–∞",
    Slovakia: "–°–ª–æ–≤–∞—á—á–∏–Ω–∞",
    Slovenia: "–°–ª–æ–≤–µ–Ω—ñ—è",
    Bulgaria: "–ë–æ–ª–≥–∞—Ä—ñ—è",
    Finland: "–§—ñ–Ω–ª—è–Ω–¥—ñ—è",
    Iceland: "–Ü—Å–ª–∞–Ω–¥—ñ—è",
    Cyprus: "–ö—ñ–ø—Ä",
    Ireland: "–Ü—Ä–ª–∞–Ω–¥—ñ—è",
    Wales: "–£–µ–ª—å—Å",
    "Northern Ireland": "–ü—ñ–≤–Ω—ñ—á–Ω–∞ –Ü—Ä–ª–∞–Ω–¥—ñ—è",
    Israel: "–Ü–∑—Ä–∞—ó–ª—å",
    Kazakhstan: "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω",
  },
  en: {
    International: "International",
    World: "World",
    Europe: "Europe",
    England: "England",
    Spain: "Spain",
    Italy: "Italy",
    Germany: "Germany",
    France: "France",
    Netherlands: "Netherlands",
    Portugal: "Portugal",
    Scotland: "Scotland",
    Turkey: "Turkey",
    Greece: "Greece",
    Belgium: "Belgium",
    Austria: "Austria",
    Switzerland: "Switzerland",
    Poland: "Poland",
    Ukraine: "Ukraine",
    Norway: "Norway",
    Sweden: "Sweden",
    Denmark: "Denmark",
    "Czech Republic": "Czech Republic",
    Czechia: "Czechia",
    Croatia: "Croatia",
    Serbia: "Serbia",
    Romania: "Romania",
    Hungary: "Hungary",
    Slovakia: "Slovakia",
    Slovenia: "Slovenia",
    Bulgaria: "Bulgaria",
    Finland: "Finland",
    Iceland: "Iceland",
    Cyprus: "Cyprus",
    Ireland: "Ireland",
    Wales: "Wales",
    "Northern Ireland": "Northern Ireland",
    Israel: "Israel",
    Kazakhstan: "Kazakhstan",
  }
};

const LEAGUE_I18N = {
  ru: {
    "UEFA Champions League": "–õ–∏–≥–∞ –ß–µ–º–ø–∏–æ–Ω–æ–≤ –£–ï–§–ê",
    "Champions League": "–õ–∏–≥–∞ –ß–µ–º–ø–∏–æ–Ω–æ–≤ –£–ï–§–ê",
    "UEFA Europa League": "–õ–∏–≥–∞ –ï–≤—Ä–æ–ø—ã –£–ï–§–ê",
    "Europa League": "–õ–∏–≥–∞ –ï–≤—Ä–æ–ø—ã –£–ï–§–ê",
    "UEFA Europa Conference League": "–õ–∏–≥–∞ –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π –£–ï–§–ê",
    "Europa Conference League": "–õ–∏–≥–∞ –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π –£–ï–§–ê",
    "UEFA Super Cup": "–°—É–ø–µ—Ä–∫—É–±–æ–∫ –£–ï–§–ê",
    "UEFA Nations League": "–õ–∏–≥–∞ –ù–∞—Ü–∏–π –£–ï–§–ê",
    "UEFA European Championship": "–ß–µ–º–ø–∏–æ–Ω–∞—Ç –ï–≤—Ä–æ–ø—ã –£–ï–§–ê",

    "Premier League": "–ü—Ä–µ–º—å–µ—Ä-–õ–∏–≥–∞ –ê–Ω–≥–ª–∏–∏",
    "La Liga": "–õ–∞ –õ–∏–≥–∞ –ò—Å–ø–∞–Ω–∏–∏",
    "Serie A": "–°–µ—Ä–∏—è –ê –ò—Ç–∞–ª–∏–∏",
    "Bundesliga": "–ë—É–Ω–¥–µ—Å–ª–∏–≥–∞ –ì–µ—Ä–º–∞–Ω–∏–∏",
    "Ligue 1": "–õ–∏–≥–∞ 1 –§—Ä–∞–Ω—Ü–∏–∏",
    "Eredivisie": "–≠—Ä–µ–¥–∏–≤–∏–∑–∏ –ù–∏–¥–µ—Ä–ª–∞–Ω–¥–æ–≤",
    "Primeira Liga": "–ü—Ä–∏–º–µ–π—Ä–∞ –õ–∏–≥–∞ –ü–æ—Ä—Ç—É–≥–∞–ª–∏–∏",

    "Scottish Premiership": "–®–æ—Ç–ª–∞–Ω–¥—Å–∫–∞—è –ü—Ä–µ–º—å–µ—Ä—à–∏–ø",
    "S√ºper Lig": "–°—É–ø–µ—Ä–ª–∏–≥–∞ –¢—É—Ä—Ü–∏–∏",
    "Super Lig": "–°—É–ø–µ—Ä–ª–∏–≥–∞ –¢—É—Ä—Ü–∏–∏",
    "Super League 1": "–°—É–ø–µ—Ä–ª–∏–≥–∞ –ì—Ä–µ—Ü–∏–∏",
    "Super League Greece": "–°—É–ø–µ—Ä–ª–∏–≥–∞ –ì—Ä–µ—Ü–∏–∏",

    "Pro League": "–ü—Ä–æ –õ–∏–≥–∞ –ë–µ–ª—å–≥–∏–∏",
    "Jupiler Pro League": "–ü—Ä–æ –õ–∏–≥–∞ –ë–µ–ª—å–≥–∏–∏",
    "First Division A": "–ü—Ä–æ –õ–∏–≥–∞ –ë–µ–ª—å–≥–∏–∏",
    "Austrian Bundesliga": "–ë—É–Ω–¥–µ—Å–ª–∏–≥–∞ –ê–≤—Å—Ç—Ä–∏–∏",
    "Swiss Super League": "–°—É–ø–µ—Ä–ª–∏–≥–∞ –®–≤–µ–π—Ü–∞—Ä–∏–∏",

    "Ekstraklasa": "–≠–∫—Å—Ç—Ä–∞–∫–ª—è—Å–∞ –ü–æ–ª—å—à–∏",
    "Ukrainian Premier League": "–£–∫—Ä–∞–∏–Ω—Å–∫–∞—è –ü—Ä–µ–º—å–µ—Ä-–õ–∏–≥–∞",
    "Allsvenskan": "–ê–ª–ª—å—Å–≤–µ–Ω—Å–∫–∞–Ω –®–≤–µ—Ü–∏–∏",
    "Eliteserien": "–≠–ª–∏—Ç—Å–µ—Ä–∏–µ–Ω –ù–æ—Ä–≤–µ–≥–∏–∏",
    "Superliga": "–°—É–ø–µ—Ä–ª–∏–≥–∞ –î–∞–Ω–∏–∏",
    "Danish Superliga": "–°—É–ø–µ—Ä–ª–∏–≥–∞ –î–∞–Ω–∏–∏",

    "Championship": "–ß–µ–º–ø–∏–æ–Ω—à–∏–ø –ê–Ω–≥–ª–∏–∏",
    "Segunda Divisi√≥n": "–°–µ–≥—É–Ω–¥–∞ –ò—Å–ø–∞–Ω–∏–∏",
    "Segunda Division": "–°–µ–≥—É–Ω–¥–∞ –ò—Å–ø–∞–Ω–∏–∏",
    "Serie B": "–°–µ—Ä–∏—è B –ò—Ç–∞–ª–∏–∏",
    "2. Bundesliga": "–í—Ç–æ—Ä–∞—è –ë—É–Ω–¥–µ—Å–ª–∏–≥–∞",
    "Ligue 2": "–õ–∏–≥–∞ 2 –§—Ä–∞–Ω—Ü–∏–∏",
  },
  uk: {
    "UEFA Champions League": "–õ—ñ–≥–∞ –ß–µ–º–ø—ñ–æ–Ω—ñ–≤ –£–Ñ–§–ê",
    "Champions League": "–õ—ñ–≥–∞ –ß–µ–º–ø—ñ–æ–Ω—ñ–≤ –£–Ñ–§–ê",
    "UEFA Europa League": "–õ—ñ–≥–∞ –Ñ–≤—Ä–æ–ø–∏ –£–Ñ–§–ê",
    "Europa League": "–õ—ñ–≥–∞ –Ñ–≤—Ä–æ–ø–∏ –£–Ñ–§–ê",
    "UEFA Europa Conference League": "–õ—ñ–≥–∞ –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü—ñ–π –£–Ñ–§–ê",
    "Europa Conference League": "–õ—ñ–≥–∞ –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü—ñ–π –£–Ñ–§–ê",
    "UEFA Super Cup": "–°—É–ø–µ—Ä–∫—É–±–æ–∫ –£–Ñ–§–ê",
    "UEFA Nations League": "–õ—ñ–≥–∞ –ù–∞—Ü—ñ–π –£–Ñ–§–ê",
    "UEFA European Championship": "–ß–µ–º–ø—ñ–æ–Ω–∞—Ç –Ñ–≤—Ä–æ–ø–∏ –£–Ñ–§–ê",

    "Premier League": "–ü—Ä–µ–º º—î—Ä-–ª—ñ–≥–∞ –ê–Ω–≥–ª—ñ—ó",
    "La Liga": "–õ–∞ –õ—ñ–≥–∞ –Ü—Å–ø–∞–Ω—ñ—ó",
    "Serie A": "–°–µ—Ä—ñ—è –ê –Ü—Ç–∞–ª—ñ—ó",
    "Bundesliga": "–ë—É–Ω–¥–µ—Å–ª—ñ–≥–∞ –ù—ñ–º–µ—á—á–∏–Ω–∏",
    "Ligue 1": "–õ—ñ–≥–∞ 1 –§—Ä–∞–Ω—Ü—ñ—ó",
    "Eredivisie": "–ï—Ä–µ–¥–∏–≤—ñ–∑—ñ –ù—ñ–¥–µ—Ä–ª–∞–Ω–¥—ñ–≤",
    "Primeira Liga": "–ü—Ä—ñ–º–µ–π—Ä–∞ –õ—ñ–≥–∞ –ü–æ—Ä—Ç—É–≥–∞–ª—ñ—ó",

    "Scottish Premiership": "–®–æ—Ç–ª–∞–Ω–¥—Å—å–∫–∞ –ü—Ä–µ–º º—î—Ä—à–∏–ø",
    "S√ºper Lig": "–°—É–ø–µ—Ä–ª—ñ–≥–∞ –¢—É—Ä–µ—á—á–∏–Ω–∏",
    "Super Lig": "–°—É–ø–µ—Ä–ª—ñ–≥–∞ –¢—É—Ä–µ—á—á–∏–Ω–∏",
    "Super League 1": "–°—É–ø–µ—Ä–ª—ñ–≥–∞ –ì—Ä–µ—Ü—ñ—ó",
    "Super League Greece": "–°—É–ø–µ—Ä–ª—ñ–≥–∞ –ì—Ä–µ—Ü—ñ—ó",

    "Pro League": "–ü—Ä–æ –õ—ñ–≥–∞ –ë–µ–ª—å–≥—ñ—ó",
    "Jupiler Pro League": "–ü—Ä–æ –õ—ñ–≥–∞ –ë–µ–ª—å–≥—ñ—ó",
    "First Division A": "–ü—Ä–æ –õ—ñ–≥–∞ –ë–µ–ª—å–≥—ñ—ó",
    "Austrian Bundesliga": "–ë—É–Ω–¥–µ—Å–ª—ñ–≥–∞ –ê–≤—Å—Ç—Ä—ñ—ó",
    "Swiss Super League": "–°—É–ø–µ—Ä–ª—ñ–≥–∞ –®–≤–µ–π—Ü–∞—Ä—ñ—ó",

    "Ekstraklasa": "–ï–∫—Å—Ç—Ä–∞–∫–ª—è—Å–∞ –ü–æ–ª—å—â—ñ",
    "Ukrainian Premier League": "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –ü—Ä–µ–º º—î—Ä-–ª—ñ–≥–∞",
    "Allsvenskan": "–ê–ª–ª—Å–≤–µ–Ω—Å–∫–∞–Ω –®–≤–µ—Ü—ñ—ó",
    "Eliteserien": "–ï–ª—ñ—Ç—Å–µ—Ä—ñ–µ–Ω –ù–æ—Ä–≤–µ–≥—ñ—ó",
    "Superliga": "–°—É–ø–µ—Ä–ª—ñ–≥–∞ –î–∞–Ω—ñ—ó",
    "Danish Superliga": "–°—É–ø–µ—Ä–ª—ñ–≥–∞ –î–∞–Ω—ñ—ó",

    "Championship": "–ß–µ–º–ø—ñ–æ–Ω—à–∏–ø –ê–Ω–≥–ª—ñ—ó",
    "Segunda Divisi√≥n": "–°–µ–≥—É–Ω–¥–∞ –Ü—Å–ø–∞–Ω—ñ—ó",
    "Segunda Division": "–°–µ–≥—É–Ω–¥–∞ –Ü—Å–ø–∞–Ω—ñ—ó",
    "Serie B": "–°–µ—Ä—ñ—è B –Ü—Ç–∞–ª—ñ—ó",
    "2. Bundesliga": "–î—Ä—É–≥–∞ –ë—É–Ω–¥–µ—Å–ª—ñ–≥–∞",
    "Ligue 2": "–õ—ñ–≥–∞ 2 –§—Ä–∞–Ω—Ü—ñ—ó",
  },
  en: {
    "UEFA Champions League": "UEFA Champions League",
    "Champions League": "UEFA Champions League",
    "UEFA Europa League": "UEFA Europa League",
    "Europa League": "UEFA Europa League",
    "UEFA Europa Conference League": "UEFA Europa Conference League",
    "Europa Conference League": "UEFA Europa Conference League",
    "UEFA Super Cup": "UEFA Super Cup",
    "UEFA Nations League": "UEFA Nations League",
    "UEFA European Championship": "UEFA European Championship",

    "Premier League": "Premier League",
    "La Liga": "La Liga",
    "Serie A": "Serie A",
    "Bundesliga": "Bundesliga",
    "Ligue 1": "Ligue 1",
    "Eredivisie": "Eredivisie",
    "Primeira Liga": "Primeira Liga",

    "Scottish Premiership": "Scottish Premiership",
    "S√ºper Lig": "S√ºper Lig",
    "Super Lig": "S√ºper Lig",
    "Super League 1": "Super League Greece",
    "Super League Greece": "Super League Greece",

    "Pro League": "Belgian Pro League",
    "Jupiler Pro League": "Belgian Pro League",
    "First Division A": "Belgian Pro League",
    "Austrian Bundesliga": "Austrian Bundesliga",
    "Swiss Super League": "Swiss Super League",

    "Ekstraklasa": "Ekstraklasa",
    "Ukrainian Premier League": "Ukrainian Premier League",
    "Allsvenskan": "Allsvenskan",
    "Eliteserien": "Eliteserien",
    "Superliga": "Danish Superliga",
    "Danish Superliga": "Danish Superliga",

    "Championship": "EFL Championship",
    "Segunda Divisi√≥n": "Segunda Divisi√≥n",
    "Segunda Division": "Segunda Divisi√≥n",
    "Serie B": "Serie B",
    "2. Bundesliga": "2. Bundesliga",
    "Ligue 2": "Ligue 2",
  }
};

const INTERNATIONAL_KEYS = ['uefa','champions','europa','conference','nations','european','qualifying','qualification','world cup','fifa'];

function i18nLookup(dictByLang, value) {
  if (!value) return '';
  const raw = String(value);
  const direct = dictByLang[lang]?.[raw];
  if (direct) return direct;
  const needle = normKey(raw);
  const langDict = dictByLang[lang] || {};
  for (const k of Object.keys(langDict)) {
    if (normKey(k) === needle) return langDict[k];
  }
  return raw;
}
const i18nCountry = (name) => i18nLookup(COUNTRY_I18N, name);
const i18nLeague  = (name) => i18nLookup(LEAGUE_I18N, name);

function translatePredictionText(original, target) {
  try {
    if (!original || target === 'ru') return original;
    const norm = (s) => s.replace(/[‚Äì‚Äî‚àí]/g, '-').replace(/\s+/g, ' ').replace(/\s*-\s*/g, ' - ').trim();
    const t = norm(original);
    const NUM  = '([0-9]+(?:[\\.,][0-9]+)?)';
    const TEAM = '(.+?)';
    const rules = [
      { re: /^–û–±–µ(?:\s+–∫–æ–º–∞–Ω–¥—ã)?\s+–∑–∞–±—å—é—Ç\s*[-:() ]*\s*(–¥–∞|–Ω–µ—Ç)$/i,
        tr: (m) => (target === 'en' ? `Both teams to score ‚Äî ${m[1].toLowerCase()==='–¥–∞'?'yes':'no'}` : `–û–±–∏–¥–≤—ñ –∑–∞–±'—é—Ç—å ‚Äî ${m[1].toLowerCase()==='–¥–∞'?'—Ç–∞–∫':'–Ω—ñ'}`)},
      { re: /^–û–±–µ(?:\s+–∫–æ–º–∞–Ω–¥—ã)?\s+–∑–∞–±—å—é—Ç$/i, tr: () => (target === 'en' ? 'Both teams to score' : "–û–±–∏–¥–≤—ñ –∑–∞–±'—é—Ç—å") },
      { re: new RegExp(`^–¢–æ—Ç–∞–ª\\s+–±–æ–ª—å—à–µ\\s+${NUM}$`, 'i'), tr: (m) => target === 'en' ? `Over ${m[1].replace(',', '.')} goals` : `–¢–æ—Ç–∞–ª –±—ñ–ª—å—à–µ ${m[1].replace(',', '.')}` },
      { re: new RegExp(`^–¢–æ—Ç–∞–ª\\s+–º–µ–Ω—å—à–µ\\s+${NUM}$`, 'i'), tr: (m) => target === 'en' ? `Under ${m[1].replace(',', '.')} goals` : `–¢–æ—Ç–∞–ª –º–µ–Ω—à–µ ${m[1].replace(',', '.')}` },
      { re: new RegExp(`^–¢–ë\\s*${NUM}$`, 'i'), tr: (m) => target === 'en' ? `Over ${m[1].replace(',', '.')} goals` : `–¢–æ—Ç–∞–ª –±—ñ–ª—å—à–µ ${m[1].replace(',', '.')}` },
      { re: new RegExp(`^–¢–ú\\s*${NUM}$`, 'i'), tr: (m) => target === 'en' ? `Under ${m[1].replace(',', '.')} goals` : `–¢–æ—Ç–∞–ª –º–µ–Ω—à–µ ${m[1].replace(',', '.')}` },
      { re: new RegExp(`^–§–æ—Ä–∞\\s*([\\+\\-]?${NUM})\\s*–Ω–∞\\s+${TEAM}$`, 'i'), tr: (m) => (target === 'en' ? `Handicap ${m[2]} ${m[1].replace(',', '.')}` : `–§–æ—Ä–∞ ${m[2]} ${m[1].replace(',', '.')}`) },
      { re: new RegExp(`^${TEAM}\\s+–§–æ—Ä–∞\\s*([\\+\\-]?${NUM})$`, 'i'), tr: (m) => (target === 'en' ? `Handicap ${m[1]} ${m[2].replace(',', '.')}` : `–§–æ—Ä–∞ ${m[1]} ${m[2].replace(',', '.')}`) },
      { re: new RegExp(`^–ü–æ–±–µ–¥–∞\\s+${TEAM}$`, 'i'), tr: (m) => target === 'en' ? `Win ${m[1]}` : `–ü–µ—Ä–µ–º–æ–≥–∞ ${–º[1]}` },
      { re: /^–ù–∏—á—å—è$/i, tr: () => (target === 'en' ? 'Draw' : '–ù—ñ—á–∏—è') },
      { re: /^–ü1$/i, tr: () => (target === 'en' ? 'Home win' : '–ü–µ—Ä–µ–º–æ–≥–∞ –≥–æ—Å–ø–æ–¥–∞—Ä—ñ–≤') },
      { re: /^–ü2$/i, tr: () => (target === 'en' ? 'Away win' : '–ü–µ—Ä–µ–º–æ–≥–∞ –≥–æ—Å—Ç–µ–π') },
      { re: /^–•$/i,  tr: () => (target === 'en' ? 'Draw' : '–ù—ñ—á–∏—è') },
      { re: /^1–•$/i, tr: () => (target === 'en' ? '1X (home or draw)' : '1X (–≥–æ—Å–ø–æ–¥–∞—Ä—ñ –∞–±–æ –Ω—ñ—á–∏—è)') },
      { re: /^–•2$/i, tr: () => (target === 'en' ? 'X2 (draw or away)' : 'X2 (–Ω—ñ—á–∏—è –∞–±–æ –≥–æ—Å—Ç—ñ)') },
      { re: /^12$/i, tr: () => (target === 'en' ? '12 (no draw)' : '12 (–±–µ–∑ –Ω—ñ—á–∏—î—ó)') }
    ];
    for (const r of rules) { const m = t.match(r.re); if (m) return r.tr(m); }
    return original;
  } catch (e) { console.error('translatePredictionText error:', e); return original; }
}

let coins = 0;
let predictions = [];

// ===== –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å =====
function getUserProfileRaw() {
  let u = telegram?.initDataUnsafe?.user;
  if (!u) {
    try { const saved = localStorage.getItem('tg_user'); if (saved) u = JSON.parse(saved); } catch {}
  }
  return u || null;
}
function getUserId() {
  const u = getUserProfileRaw();
  return u?.id || null;
}

function getDOMElements() {
  return {
    coinBalance: document.getElementById('coinBalance'),
    predictionsContainer: document.getElementById('predictions'),
    userProfilePic: document.getElementById('userProfilePic'),
    userName: document.getElementById('userName'),
    sloganEl: document.querySelector('.logo p'),
    buyBtn: document.querySelector('.buy-btn'),
    unlockAllBtn: document.getElementById('unlockAllBtn')
  };
}

function loadUserData() {
  const { userProfilePic, userName, sloganEl, buyBtn, unlockAllBtn } = getDOMElements();
  const u = getUserProfileRaw();

  if (u) {
    userName.textContent = `${translations[lang].hello}, ${u.first_name || translations[lang].guest}`;
    userProfilePic.src = u.photo_url || 'https://dummyimage.com/50x50/000/fff&text=User';
    localStorage.setItem('tg_user', JSON.stringify(u));
  } else {
    userName.textContent = `${translations[lang].hello}, ${translations[lang].guest}`;
    userProfilePic.src = 'https://dummyimage.com/50x50/000/fff&text=User';
  }

  if (sloganEl) sloganEl.textContent = translations[lang].slogan;
  if (buyBtn) buyBtn.textContent = translations[lang].buyCoins;
  if (unlockAllBtn) unlockAllBtn.textContent = translations[lang].openAll;
}

// ===== –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–ª—è tournament =====
function parseDateFromTournament(tournamentStr='') {
  const m = tournamentStr.match(/(\d{2}\.\d{2}\.\d{2})/);
  return m ? m[1] : '';
}
function parseLeagueFromTournament(tournamentStr='') {
  const m = tournamentStr.match(/\d{2}\.\d{2}\.\d{2}\s+(.+)$/);
  if (m) return m[1].trim();
  const parts = tournamentStr.split(/\s+/);
  if (parts.length >= 2 && tournamentStr.toLowerCase().startsWith('—Ñ—É—Ç–±–æ–ª')) {
    return tournamentStr.replace(/^—Ñ—É—Ç–±–æ–ª\.?/i,'').trim();
  }
  return tournamentStr.trim();
}
function isInternationalByLeagueName(leagueName='') {
  const k = normKey(leagueName);
  return INTERNATIONAL_KEYS.some(w => k.includes(w));
}
const INTERNATIONAL_TAGS = new Set(['International','World','Europe','']);

// ===== –§–æ—Ä–º–∞—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ =====
function formatTournament(p) {
  const rawCountry = p.country || '';
  const rawLeague  = p.league  || '' || parseLeagueFromTournament(p.tournament || '');
  const rawDate    = p.date || parseDateFromTournament(p.tournament || '');

  const countryTranslated = rawCountry ? i18nCountry(rawCountry) : '';
  const leagueTranslated  = i18nLeague(rawLeague);

  const isInternational =
    (rawCountry && INTERNATIONAL_TAGS.has(rawCountry.trim())) ||
    (!rawCountry && isInternationalByLeagueName(rawLeague));

  if (isInternational) {
    return `${rawDate ? (rawDate + ' ') : ''}${leagueTranslated}`.trim();
  }
  if (countryTranslated) {
    return `${countryTranslated}${rawDate ? ' ' + rawDate : ''} ${leagueTranslated}`.trim();
  }
  return `${rawDate ? rawDate + ' ' : ''}${leagueTranslated}`.trim();
}

// ===== –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö =====
async function loadPredictions() {
  const userId = getUserId();
  if (!userId) return;

  try {
    const response = await fetch(`/api/predictions?userId=${userId}`);
    predictions = await response.json();

    const u = getUserProfileRaw();
    const balanceResponse = await fetch('/balance', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ userId, action: 'get', profile: u })
    });
    const balanceData = await balanceResponse.json();
    coins = balanceData.coins || 0;

    updateBalance();
    renderPredictions();
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', e);
  }
}

async function unlockPrediction(predictionId) {
  const userId = getUserId();
  if (!userId || coins < 1) return alert(translations[lang].notEnough);

  const res = await fetch('/api/unlock', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ userId, predictionId })
  });

  const result = await res.json();
  if (result.success) {
    coins = result.coins;
    updateBalance();
    await loadPredictions();
  } else {
    alert(result.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ');
  }
}

// ‚úÖ –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
async function unlockAllPredictions() {
  const userId = getUserId();
  if (!userId || coins < 60) return alert(translations[lang].notEnough);

  const res = await fetch('/api/unlock-all', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ userId })
  });

  const result = await res.json();
  if (result.success) {
    coins = result.coins;
    updateBalance();
    await loadPredictions();
    alert(translations[lang].openedAllOk);
  } else {
    alert(result.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ');
  }
}

function updateBalance() {
  const { coinBalance } = getDOMElements();
  if (coinBalance) coinBalance.textContent = coins;
}

function translatePredictionText(original, target) {
  // (–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ —Å–≤–µ—Ä—Ö—É ‚Äî –æ—Å—Ç–∞–≤–ª–µ–Ω–æ –æ–¥–∏–Ω —Ä–∞–∑; –µ—Å–ª–∏ —É –≤–∞—Å –±—ã–ª–æ, –Ω–µ –¥—É–±–ª–∏—Ä—É–π—Ç–µ)
  return original; // <-- –∑–∞–≥–ª—É—à–∫–∞ –µ—Å–ª–∏ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã—à–µ
}

/**
 * –†–µ–Ω–¥–µ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫
 */
function renderPredictions() {
  const predictionsContainer = document.getElementById('predictions');
  predictionsContainer.innerHTML = '';

  predictions.forEach(p => {
    const div = document.createElement('div');
    div.className = `prediction ${p.isUnlocked ? 'unlocked' : 'locked'}`;
    div.setAttribute('data-id', p.id);

    const textOriginal = p.predictionText || '';
    const textShown = p.isUnlocked
      ? translatePredictionText(textOriginal, lang)
      : translations[lang].locked;

    const tournamentDisplay = formatTournament(p);

    div.innerHTML = `
      <div class="teams">
        <span class="tournament">${tournamentDisplay}</span>
        <div class="team-row"><img src="${p.logo1}"> ${p.team1}</div>
        <div class="team-row"><img src="${p.logo2}"> ${p.team2}</div>
      </div>
      <span class="odds">${p.odds}</span>
      <div class="prediction-text" data-original="${(textOriginal || '').replace(/"/g, '&quot;')}">${textShown}</div>
    `;

    if (!p.isUnlocked) {
      const unlockBtn = document.createElement('button');
      unlockBtn.className = 'buy-btn unlock-btn';
      unlockBtn.textContent = translations[lang].unlock;
      unlockBtn.onclick = () => unlockPrediction(p.id);
      div.appendChild(unlockBtn);
    }

    predictionsContainer.appendChild(div);
  });
}

// –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑ –≤ 30 —Å–µ–∫
setInterval(loadPredictions, 30000);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
loadUserData();
loadPredictions();
