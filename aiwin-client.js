const telegram = window.Telegram?.WebApp;

if (telegram) {
  telegram.ready();
  telegram.expand();
  console.log('‚úÖ Telegram WebApp initialized');
}

// ===== –Ø–∑—ã–∫–∏ (–≤–∏–∑—É–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ UI –∏ –ø—Ä–æ–≥–Ω–æ–∑–∞) =====
const lang = localStorage.getItem('app_lang') || 'ru';

const translations = {
  ru: {
    slogan: "–£–º–Ω—ã–µ —Å—Ç–∞–≤–∫–∏. –ë–æ–ª—å—à–∏–µ –≤—ã–∏–≥—Ä—ã—à–∏.",
    hello: "–ü—Ä–∏–≤–µ—Ç",
    guest: "–ì–æ—Å—Ç—å",
    buyCoins: "–ö—É–ø–∏—Ç—å –º–æ–Ω–µ—Ç—ã",
    unlock: "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å",
    locked: "üîí –ü—Ä–æ–≥–Ω–æ–∑ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω",
    notEnough: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç",
    footballWord: "–§—É—Ç–±–æ–ª",
    handicapWord: "–§–æ—Ä–∞"
  },
  uk: {
    slogan: "–†–æ–∑—É–º–Ω—ñ —Å—Ç–∞–≤–∫–∏. –í–µ–ª–∏–∫—ñ –≤–∏–≥—Ä–∞—à—ñ.",
    hello: "–ü—Ä–∏–≤—ñ—Ç",
    guest: "–ì—ñ—Å—Ç—å",
    buyCoins: "–ö—É–ø–∏—Ç–∏ –º–æ–Ω–µ—Ç–∏",
    unlock: "–†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏",
    locked: "üîí –ü—Ä–æ–≥–Ω–æ–∑ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ",
    notEnough: "–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º–æ–Ω–µ—Ç",
    footballWord: "–§—É—Ç–±–æ–ª",
    handicapWord: "–§–æ—Ä–∞"
  },
  en: {
    slogan: "Smart bets. Big wins.",
    hello: "Hello",
    guest: "Guest",
    buyCoins: "Buy coins",
    unlock: "Unlock",
    locked: "üîí Prediction locked",
    notEnough: "Not enough coins",
    footballWord: "Football",
    handicapWord: "Handicap"
  }
};

// ====== –õ–∏–≥–∏: –∞–ª–∏–∞—Å—ã ‚Üí –∫–ª—é—á–∏, –ø–µ—Ä–µ–≤–æ–¥—ã –∏ –ø—Ä–∏–≤—è–∑–∫–∞ –∫ —Å—Ç—Ä–∞–Ω–∞–º ======
const LEAGUE_CANON = [
  { key: 'ucl', aliases: ['–ª–∏–≥–∞ —á–µ–º–ø–∏–æ–Ω–æ–≤ —É–µ—Ñ–∞','uefa champions league','champions league'] },
  { key: 'uel', aliases: ['–ª–∏–≥–∞ –µ–≤—Ä–æ–ø—ã —É–µ—Ñ–∞','uefa europa league','europa league'] },
  { key: 'uecl', aliases: ['–ª–∏–≥–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π —É–µ—Ñ–∞','uefa europa conference league','conference league'] },

  { key: 'epl', aliases: ['–ø—Ä–µ–º—å–µ—Ä-–ª–∏–≥–∞ –∞–Ω–≥–ª–∏–∏','premier league','english premier league'] },
  { key: 'laliga', aliases: ['–ª–∞ –ª–∏–≥–∞ –∏—Å–ø–∞–Ω–∏–∏','la liga','laliga'] },
  { key: 'seriea', aliases: ['—Å–µ—Ä–∏—è –∞ –∏—Ç–∞–ª–∏–∏','serie a'] },
  { key: 'bundes', aliases: ['–±—É–Ω–¥–µ—Å–ª–∏–≥–∞ –≥–µ—Ä–º–∞–Ω–∏–∏','bundesliga'] },
  { key: 'ligue1', aliases: ['–ª–∏–≥–∞ 1 —Ñ—Ä–∞–Ω—Ü–∏–∏','ligue 1'] },
  { key: 'eredivisie', aliases: ['–µ—Ä–µ–¥–∏–≤–∏–∑–∏ –Ω–∏–¥–µ—Ä–ª–∞–Ω–¥–æ–≤','eredivisie'] },
  { key: 'primeira', aliases: ['–ø—Ä–∏–º–µ–π—Ä–∞ –ª–∏–≥–∞ –ø–æ—Ä—Ç—É–≥–∞–ª–∏–∏','primeira liga','liga portugal'] },
  { key: 'upl', aliases: ['—É–∫—Ä–∞–∏–Ω—Å–∫–∞—è –ø—Ä–µ–º—å–µ—Ä –ª–∏–≥–∞','ukrainian premier league','upl'] },

  // –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
];

// –ü—Ä–∏–≤—è–∑–∫–∞ –∫–ª—é—á–∞ –ª–∏–≥–∏ –∫ —Å—Ç—Ä–∞–Ω–µ (domestic). –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –ª–∏–≥–∏ –Ω–µ —É–∫–∞–∑—ã–≤–∞–µ–º.
const LEAGUE_COUNTRY = {
  epl: 'england',
  laliga: 'spain',
  seriea: 'italy',
  bundes: 'germany',
  ligue1: 'france',
  eredivisie: 'netherlands',
  primeira: 'portugal',
  upl: 'ukraine'
};

// –ü–µ—Ä–µ–≤–æ–¥—ã –Ω–∞–∑–≤–∞–Ω–∏–π –ª–∏–≥
const LEAGUE_LABELS = {
  ru: {
    ucl: '–õ–∏–≥–∞ –ß–µ–º–ø–∏–æ–Ω–æ–≤ –£–ï–§–ê',
    uel: '–õ–∏–≥–∞ –ï–≤—Ä–æ–ø—ã –£–ï–§–ê',
    uecl: '–õ–∏–≥–∞ –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π –£–ï–§–ê',
    epl: '–ü—Ä–µ–º—å–µ—Ä-–õ–∏–≥–∞ –ê–Ω–≥–ª–∏–∏',
    laliga: '–õ–∞ –õ–∏–≥–∞ –ò—Å–ø–∞–Ω–∏–∏',
    seriea: '–°–µ—Ä–∏—è –ê –ò—Ç–∞–ª–∏–∏',
    bundes: '–ë—É–Ω–¥–µ—Å–ª–∏–≥–∞ –ì–µ—Ä–º–∞–Ω–∏–∏',
    ligue1: '–õ–∏–≥–∞ 1 –§—Ä–∞–Ω—Ü–∏–∏',
    eredivisie: '–≠—Ä–µ–¥–∏–≤–∏–∑–∏ –ù–∏–¥–µ—Ä–ª–∞–Ω–¥–æ–≤',
    primeira: '–ü—Ä–∏–º–µ–π—Ä–∞ –õ–∏–≥–∞ –ü–æ—Ä—Ç—É–≥–∞–ª–∏–∏',
    upl: '–£–∫—Ä–∞–∏–Ω—Å–∫–∞—è –ü—Ä–µ–º—å–µ—Ä –õ–∏–≥–∞'
  },
  uk: {
    ucl: '–õ—ñ–≥–∞ –ß–µ–º–ø—ñ–æ–Ω—ñ–≤ –£–Ñ–§–ê',
    uel: '–õ—ñ–≥–∞ –Ñ–≤—Ä–æ–ø–∏ –£–Ñ–§–ê',
    uecl: '–õ—ñ–≥–∞ –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü—ñ–π –£–Ñ–§–ê',
    epl: '–ü—Ä–µ–º º—î—Ä-–ª—ñ–≥–∞ –ê–Ω–≥–ª—ñ—ó',
    laliga: '–õ–∞ –õ—ñ–≥–∞ –Ü—Å–ø–∞–Ω—ñ—ó',
    seriea: '–°–µ—Ä—ñ—è –ê –Ü—Ç–∞–ª—ñ—ó',
    bundes: '–ë—É–Ω–¥–µ—Å–ª—ñ–≥–∞ –ù—ñ–º–µ—á—á–∏–Ω–∏',
    ligue1: '–õ—ñ–≥–∞ 1 –§—Ä–∞–Ω—Ü—ñ—ó',
    eredivisie: '–ï—Ä–µ–¥–∏–≤—ñ–∑—ñ –ù—ñ–¥–µ—Ä–ª–∞–Ω–¥—ñ–≤',
    primeira: '–ü—Ä—ñ–º–µ–π—Ä–∞ –õ—ñ–≥–∞ –ü–æ—Ä—Ç—É–≥–∞–ª—ñ—ó',
    upl: '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –ü—Ä–µ–º º—î—Ä-–ª—ñ–≥–∞'
  },
  en: {
    ucl: 'UEFA Champions League',
    uel: 'UEFA Europa League',
    uecl: 'UEFA Europa Conference League',
    epl: 'Premier League',
    laliga: 'La Liga',
    seriea: 'Serie A',
    bundes: 'Bundesliga',
    ligue1: 'Ligue 1',
    eredivisie: 'Eredivisie',
    primeira: 'Primeira Liga',
    upl: 'Ukrainian Premier League'
  }
};

// –ü–µ—Ä–µ–≤–æ–¥—ã –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç—Ä–∞–Ω (–¥–ª—è –∑–∞–º–µ–Ω—ã "–§—É—Ç–±–æ–ª" ‚Üí "–°—Ç—Ä–∞–Ω–∞")
const COUNTRY_LABELS = {
  ru: {
    england: '–ê–Ω–≥–ª–∏—è',
    spain: '–ò—Å–ø–∞–Ω–∏—è',
    italy: '–ò—Ç–∞–ª–∏—è',
    germany: '–ì–µ—Ä–º–∞–Ω–∏—è',
    france: '–§—Ä–∞–Ω—Ü–∏—è',
    netherlands: '–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã',
    portugal: '–ü–æ—Ä—Ç—É–≥–∞–ª–∏—è',
    ukraine: '–£–∫—Ä–∞–∏–Ω–∞'
  },
  uk: {
    england: '–ê–Ω–≥–ª—ñ—è',
    spain: '–Ü—Å–ø–∞–Ω—ñ—è',
    italy: '–Ü—Ç–∞–ª—ñ—è',
    germany: '–ù—ñ–º–µ—á—á–∏–Ω–∞',
    france: '–§—Ä–∞–Ω—Ü—ñ—è',
    netherlands: '–ù—ñ–¥–µ—Ä–ª–∞–Ω–¥–∏',
    portugal: '–ü–æ—Ä—Ç—É–≥–∞–ª—ñ—è',
    ukraine: '–£–∫—Ä–∞—ó–Ω–∞'
  },
  en: {
    england: 'England',
    spain: 'Spain',
    italy: 'Italy',
    germany: 'Germany',
    france: 'France',
    netherlands: 'Netherlands',
    portugal: 'Portugal',
    ukraine: 'Ukraine'
  }
};

function normLower(s='') {
  return s.toLowerCase().normalize('NFKD').replace(/\s+/g,' ').trim();
}

function detectLeagueKey(name='') {
  const n = normLower(name);
  for (const {key, aliases} of LEAGUE_CANON) {
    if (aliases.some(a => n.includes(normLower(a)))) return key;
  }
  return null;
}

function isInternationalLeagueKey(key) {
  return key === 'ucl' || key === 'uel' || key === 'uecl';
}

/**
 * –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä —Å—Ç—Ä–æ–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞ —Å –∑–∞–º–µ–Ω–æ–π "–§—É—Ç–±–æ–ª" ‚Üí "–°—Ç—Ä–∞–Ω–∞",
 * –∞ –¥–ª—è –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ ‚Äî —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ –±–µ–∑ –¥–∞—Ç—ã/¬´–§—É—Ç–±–æ–ª¬ª.
 *
 * –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª–∞: "–§—É—Ç–±–æ–ª.dd.mm.yy <League>"
 */
function renderTournamentLine(original) {
  if (!original) return original;

  // –ï—Å–ª–∏ —è–∑—ã–∫ —Ä—É—Å—Å–∫–∏–π ‚Äî –≤—Å—ë —Ä–∞–≤–Ω–æ –Ω–∞–¥–æ –∑–∞–º–µ–Ω–∏—Ç—å "–§—É—Ç–±–æ–ª" –Ω–∞ —Å—Ç—Ä–∞–Ω—É, –∫–∞–∫ —Ç—ã –ø—Ä–æ—Å–∏–ª.
  const m = original.match(/^–§—É—Ç–±–æ–ª\.(\d{2}\.\d{2}\.\d{2})\s+(.+)$/i);
  if (!m) {
    // –ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω—ë–º –∫–∞–∫ –µ—Å—Ç—å (–ª–∏–±–æ –º–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –∑–∞–º–µ–Ω–∏—Ç—å —Å–ª–æ–≤–æ ¬´–§—É—Ç–±–æ–ª¬ª)
    return original.replace(/^–§—É—Ç–±–æ–ª/i, translations[lang].footballWord);
  }

  const datePart = m[1];
  const leagueRaw  = m[2];

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª—é—á –ª–∏–≥–∏ –∏ –µ—ë –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è
  const key = detectLeagueKey(leagueRaw);
  const leagueLocalized = key ? (LEAGUE_LABELS[lang][key] || leagueRaw) : leagueRaw;

  // –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ ‚Äî —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∏–≥–∏
  if (key && isInternationalLeagueKey(key)) {
    return leagueLocalized; // –±–µ–∑ –¥–∞—Ç—ã –∏ –±–µ–∑ "–§—É—Ç–±–æ–ª"
  }

  // –î–æ–º–∞—à–Ω–∏–µ ‚Äî –º–µ–Ω—è–µ–º "–§—É—Ç–±–æ–ª" –Ω–∞ —Å—Ç—Ä–∞–Ω—É (–µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω–∞)
  let countryKey = key ? LEAGUE_COUNTRY[key] : null;
  if (countryKey) {
    const countryName = COUNTRY_LABELS[lang][countryKey] || COUNTRY_LABELS['ru'][countryKey] || '';
    if (countryName) {
      return `${countryName}.${datePart} ${leagueLocalized}`;
    }
  }

  // –§–æ–ª–±—ç–∫: –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω—É –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏ ‚Äî –æ—Å—Ç–∞–≤–∏–º –∫–∞–∫ –±—ã–ª–æ, —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–µ–¥—ë–º —Å–ª–æ–≤–æ ¬´–§—É—Ç–±–æ–ª¬ª –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
  const footballWord = translations[lang].footballWord;
  return `${footballWord}.${datePart} ${leagueLocalized}`;
}

/**
 * –í–∏–∑—É–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞.
 * –û—Ä–∏–≥–∏–Ω–∞–ª –ù–ï –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º, —Ç–æ–ª—å–∫–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
 */
function translatePredictionText(original, target) {
  try {
    if (!original || target === 'ru') return original;

    // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
    const norm = (s) =>
      s.replace(/[‚Äì‚Äî‚àí]/g, '-')   // –≤—Å–µ —Ç–∏—Ä–µ ‚Üí –¥–µ—Ñ–∏—Å
       .replace(/\s+/g, ' ')     // —Å–∂–∞—Ç—å –ø—Ä–æ–±–µ–ª—ã
       .replace(/\s*-\s*/g, ' - ')
       .trim();

    const t = norm(original);

    const NUM  = '([0-9]+(?:[\\.,][0-9]+)?)';
    const TEAM = '(.+?)';

    const rules = [
      // ===== –û–ë–ï –ó–ê–ë–¨–Æ–¢ =====
      {
        re: /^–û–±–µ(?:\s+–∫–æ–º–∞–Ω–¥—ã)?\s+–∑–∞–±—å—é—Ç\s*[-:() ]*\s*(–¥–∞|–Ω–µ—Ç)$/i,
        tr: (m) => {
          const yn = (m[1] || '').toLowerCase();
          if (target === 'en') return `Both teams to score ‚Äî ${yn === '–¥–∞' ? 'yes' : 'no'}`;
          return `–û–±–∏–¥–≤—ñ –∑–∞–±'—é—Ç—å ‚Äî ${yn === '–¥–∞' ? '—Ç–∞–∫' : '–Ω—ñ'}`;
        }
      },
      {
        re: /^–û–±–µ(?:\s+–∫–æ–º–∞–Ω–¥—ã)?\s+–∑–∞–±—å—é—Ç$/i,
        tr: () => (target === 'en' ? 'Both teams to score' : "–û–±–∏–¥–≤—ñ –∑–∞–±'—é—Ç—å")
      },

      // ===== –¢–æ—Ç–∞–ª—ã =====
      { // "–¢–æ—Ç–∞–ª –±–æ–ª—å—à–µ X"
        re: new RegExp(`^–¢–æ—Ç–∞–ª\\s+–±–æ–ª—å—à–µ\\s+${NUM}$`, 'i'),
        tr: (m) => target === 'en' ? `Over ${m[1].replace(',', '.')} goals` : `–¢–æ—Ç–∞–ª –±—ñ–ª—å—à–µ ${m[1].replace(',', '.')}`
      },
      { // "–¢–æ—Ç–∞–ª –º–µ–Ω—å—à–µ X"
        re: new RegExp(`^–¢–æ—Ç–∞–ª\\s+–º–µ–Ω—å—à–µ\\s+${NUM}$`, 'i'),
        tr: (m) => target === 'en' ? `Under ${m[1].replace(',', '.')} goals` : `–¢–æ—Ç–∞–ª –º–µ–Ω—à–µ ${m[1].replace(',', '.')}`
      },
      { // "–¢–ë X"
        re: new RegExp(`^–¢–ë\\s*${NUM}$`, 'i'),
        tr: (m) => target === 'en' ? `Over ${m[1].replace(',', '.')} goals` : `–¢–æ—Ç–∞–ª –±—ñ–ª—å—à–µ ${m[1].replace(',', '.')}`
      },
      { // "–¢–ú X"
        re: new RegExp(`^–¢–ú\\s*${NUM}$`, 'i'),
        tr: (m) => target === 'en' ? `Under ${m[1].replace(',', '.')} goals` : `–¢–æ—Ç–∞–ª –º–µ–Ω—à–µ ${m[1].replace(',', ')')}`
      },

      // ===== –§–æ—Ä—ã =====
      // "–§–æ—Ä–∞ -1.5 –Ω–∞ {TEAM}" ‚Üí EN: Handicap TEAM -1.5, UK: –§–æ—Ä–∞ TEAM -1.5
      {
        re: new RegExp(`^–§–æ—Ä–∞\\s*([\\+\\-]?${NUM})\\s*–Ω–∞\\s+${TEAM}$`, 'i'),
        tr: (m) => {
          const h = (m[1] || '').replace(',', '.');
          const tm = m[2];
          return target === 'en' ? `Handicap ${tm} ${h}` : `–§–æ—Ä–∞ ${tm} ${h}`;
        }
      },
      // "{TEAM} –§–æ—Ä–∞ -1.5" ‚Üí EN: Handicap TEAM -1.5 / UK: –§–æ—Ä–∞ TEAM -1.5
      {
        re: new RegExp(`^${TEAM}\\s+–§–æ—Ä–∞\\s*([\\+\\-]?${NUM})$`, 'i'),
        tr: (m) => {
          const tm = m[1];
          const h  = (m[2] || '').replace(',', '.');
          return target === 'en' ? `Handicap ${tm} ${h}` : `–§–æ—Ä–∞ ${tm} ${h}`;
        }
      },

      // ===== –ò—Å—Ö–æ–¥—ã =====
      {
        re: new RegExp(`^–ü–æ–±–µ–¥–∞\\s+${TEAM}$`, 'i'),
        tr: (m) => target === 'en' ? `Win ${m[1]}` : `–ü–µ—Ä–µ–º–æ–≥–∞ ${m[1]}`
      },
      { re: /^–ù–∏—á—å—è$/i, tr: () => (target === 'en' ? 'Draw' : '–ù—ñ—á–∏—è') },

      // –ö–æ—Ä–æ—Ç–∫–∏–µ –∏—Å—Ö–æ–¥—ã (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
      { re: /^–ü1$/i, tr: () => (target === 'en' ? 'Home win' : '–ü–µ—Ä–µ–º–æ–≥–∞ –≥–æ—Å–ø–æ–¥–∞—Ä—ñ–≤') },
      { re: /^–ü2$/i, tr: () => (target === 'en' ? 'Away win' : '–ü–µ—Ä–µ–º–æ–≥–∞ –≥–æ—Å—Ç–µ–π') },
      { re: /^–•$/i,  tr: () => (target === 'en' ? 'Draw' : '–ù—ñ—á–∏—è') }
    ];

    for (const r of rules) {
      const m = t.match(r.re);
      if (m) return r.tr(m);
    }
    // –ï—Å–ª–∏ —à–∞–±–ª–æ–Ω –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    return original;
  } catch (e) {
    console.error('translatePredictionText error:', e);
    return original;
  }
}

let coins = 0;
let predictions = [];

// ===== –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ –¥–ª—è UI –∏ balance) =====
function getUserProfileRaw() {
  let u = telegram?.initDataUnsafe?.user;
  if (!u) {
    try {
      const saved = localStorage.getItem('tg_user');
      if (saved) u = JSON.parse(saved);
    } catch {}
  }
  return u || null;
}
function getUserId() {
  const u = getUserProfileRaw();
  return u?.id || null;
}

function getDOMElements() {
  return {
    coinBalance: document.getElementById('coinBalance'),
    predictionsContainer: document.getElementById('predictions'),
    userProfilePic: document.getElementById('userProfilePic'),
    userName: document.getElementById('userName'),
    sloganEl: document.querySelector('.logo p'),
    buyBtn: document.querySelector('.buy-btn')
  };
}

function loadUserData() {
  const { userProfilePic, userName, sloganEl, buyBtn } = getDOMElements();
  const u = getUserProfileRaw();

  if (u) {
    userName.textContent = `${translations[lang].hello}, ${u.first_name || translations[lang].guest}`;
    userProfilePic.src = u.photo_url || 'https://dummyimage.com/50x50/000/fff&text=User';
    localStorage.setItem('tg_user', JSON.stringify(u));
  } else {
    userName.textContent = `${translations[lang].hello}, ${translations[lang].guest}`;
    userProfilePic.src = 'https://dummyimage.com/50x50/000/fff&text=User';
  }

  if (sloganEl) sloganEl.textContent = translations[lang].slogan;
  if (buyBtn) buyBtn.textContent = translations[lang].buyCoins;
}

async function loadPredictions() {
  const userId = getUserId();
  if (!userId) return;

  try {
    // 1) –ü—Ä–æ–≥–Ω–æ–∑—ã
    const response = await fetch(`/api/predictions?userId=${userId}`);
    predictions = await response.json();

    // 2) –ë–∞–ª–∞–Ω—Å (+ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –µ—Å–ª–∏ –±—ç–∫ —ç—Ç–æ —É—á–∏—Ç—ã–≤–∞–µ—Ç)
    const u = getUserProfileRaw();
    const balanceResponse = await fetch('/balance', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        userId,
        action: 'get',
        profile: u
      })
    });
    const balanceData = await balanceResponse.json();
    coins = balanceData.coins || 0;

    updateBalance();
    renderPredictions();
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', e);
  }
}

async function unlockPrediction(predictionId) {
  const userId = getUserId();
  if (!userId || coins < 1) return alert(translations[lang].notEnough);

  const res = await fetch('/api/unlock', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ userId, predictionId })
  });

  const result = await res.json();
  if (result.success) {
    coins = result.coins;
    updateBalance();
    await loadPredictions();
  } else {
    alert(result.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ');
  }
}

function updateBalance() {
  const { coinBalance } = getDOMElements();
  if (coinBalance) coinBalance.textContent = coins;
}

/**
 * –†–µ–Ω–¥–µ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫: –û–†–ò–ì–ò–ù–ê–õ –∏–∑ –ë–î –æ—Å—Ç–∞—ë—Ç—Å—è –≤ –¥–∞–Ω–Ω—ã—Ö, –≤ DOM –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥,
 * –∞ –æ—Ä–∏–≥–∏–Ω–∞–ª –∫–ª–∞–¥—ë–º –≤ data-original (–Ω–∞ –±—É–¥—É—â–µ–µ/–æ—Ç–ª–∞–¥–∫—É).
 */
function renderPredictions() {
  const { predictionsContainer } = getDOMElements();
  predictionsContainer.innerHTML = '';

  predictions.forEach(p => {
    const div = document.createElement('div');
    div.className = `prediction ${p.isUnlocked ? 'unlocked' : 'locked'}`;
    div.setAttribute('data-id', p.id);

    const textOriginal = p.predictionText || '';
    const textShown = p.isUnlocked
      ? translatePredictionText(textOriginal, lang)
      : translations[lang].locked;

    // === –¢–£–†–ù–ò–†: ¬´–§—É—Ç–±–æ–ª¬ª ‚Üí ¬´–°—Ç—Ä–∞–Ω–∞¬ª, –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ ‚Äî —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
    const tournamentShown = renderTournamentLine(p.tournament);

    div.innerHTML = `
      <div class="teams">
        <span class="tournament">${tournamentShown}</span>
        <div class="team-row"><img src="${p.logo1}"> ${p.team1}</div>
        <div class="team-row"><img src="${p.logo2}"> ${p.team2}</div>
      </div>
      <span class="odds">${p.odds}</span>
      <div class="prediction-text" data-original="${textOriginal.replace(/"/g, '&quot;')}">${textShown}</div>
    `;

    if (!p.isUnlocked) {
      const unlockBtn = document.createElement('button');
      unlockBtn.className = 'buy-btn unlock-btn';
      unlockBtn.textContent = translations[lang].unlock;
      unlockBtn.onclick = () => unlockPrediction(p.id);
      div.appendChild(unlockBtn);
    }

    predictionsContainer.appendChild(div);
  });
}

// –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑ –≤ 30 —Å–µ–∫ (—Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ)
setInterval(loadPredictions, 30000);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
loadUserData();
loadPredictions();
