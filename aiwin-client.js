const telegram = window.Telegram?.WebApp;

if (telegram) {
  telegram.ready();
  telegram.expand();
  console.log('‚úÖ Telegram WebApp initialized');
}

// ===== –Ø–∑—ã–∫–∏ =====
const lang = localStorage.getItem('app_lang') || 'ru';

const translations = {
  ru: {
    slogan: "–£–º–Ω—ã–µ —Å—Ç–∞–≤–∫–∏. –ë–æ–ª—å—à–∏–µ –≤—ã–∏–≥—Ä—ã—à–∏.",
    hello: "–ü—Ä–∏–≤–µ—Ç",
    guest: "–ì–æ—Å—Ç—å",
    buyCoins: "–ö—É–ø–∏—Ç—å –º–æ–Ω–µ—Ç—ã",
    unlock: "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å",
    locked: "üîí –ü—Ä–æ–≥–Ω–æ–∑ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω",
    notEnough: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç"
  },
  uk: {
    slogan: "–†–æ–∑—É–º–Ω—ñ —Å—Ç–∞–≤–∫–∏. –í–µ–ª–∏–∫—ñ –≤–∏–≥—Ä–∞—à—ñ.",
    hello: "–ü—Ä–∏–≤—ñ—Ç",
    guest: "–ì—ñ—Å—Ç—å",
    buyCoins: "–ö—É–ø–∏—Ç–∏ –º–æ–Ω–µ—Ç–∏",
    unlock: "–†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏",
    locked: "üîí –ü—Ä–æ–≥–Ω–æ–∑ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ",
    notEnough: "–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º–æ–Ω–µ—Ç"
  },
  en: {
    slogan: "Smart bets. Big wins.",
    hello: "Hello",
    guest: "Guest",
    buyCoins: "Buy coins",
    unlock: "Unlock",
    locked: "üîí Prediction locked",
    notEnough: "Not enough coins"
  }
};

// ===== –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ (–±–µ–∑ –ø–∞–¥–µ–Ω–∏–π) =====
function translatePredictionText(text, target) {
  try {
    if (!text || target === 'ru') return text;
    const t = text.trim();

    // –ë–∞–∑–æ–≤—ã–µ –∫—É—Å–æ—á–∫–∏ –±–µ–∑ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø
    const NUM = '([0-9]+(?:[\\.,][0-9]+)?)';
    const TEAM = '(.+?)';

    const rules = [
      // –û–±–µ –∑–∞–±—å—é—Ç: –¥–∞/–Ω–µ—Ç
      {
        re: new RegExp(`^–û–±–µ\\s+–∑–∞–±—å—é—Ç\\s*[:\\-‚Äì]?\\s*(–¥–∞|–Ω–µ—Ç)$`, 'i'),
        tr: (m) => {
          const yn = m[1].toLowerCase();
          if (target === 'en') return `Both teams to score ‚Äî ${yn === '–¥–∞' ? 'yes' : 'no'}`;
          return `–û–±–∏–¥–≤—ñ –∑–∞–±'—é—Ç—å ‚Äî ${yn === '–¥–∞' ? '—Ç–∞–∫' : '–Ω—ñ'}`;
        }
      },
      // –û–±–µ –∑–∞–±—å—é—Ç (–±–µ–∑ –¥–∞/–Ω–µ—Ç)
      {
        re: /^–û–±–µ\s+–∑–∞–±—å—é—Ç$/i,
        tr: () => (target === 'en' ? 'Both teams to score' : "–û–±–∏–¥–≤—ñ –∑–∞–±'—é—Ç—å")
      },
      // –î–≤–æ–π–Ω–æ–π —à–∞–Ω—Å {TEAM} –∏–ª–∏ –Ω–∏—á—å—è
      {
        re: new RegExp(`^–î–≤–æ–π–Ω–æ–π\\s+—à–∞–Ω—Å\\s+${TEAM}\\s+–∏–ª–∏\\s+–Ω–∏—á—å—è$`, 'i'),
        tr: (m) => {
          const tm = m[1];
          if (target === 'en') return `Double chance ${tm} or draw`;
          return `–ü–æ–¥–≤—ñ–π–Ω–∏–π —à–∞–Ω—Å ${tm} –∞–±–æ –Ω—ñ—á–∏—è`;
        }
      },
      // –î–≤–æ–π–Ω–æ–π —à–∞–Ω—Å –Ω–∏—á—å—è –∏–ª–∏ {TEAM}
      {
        re: new RegExp(`^–î–≤–æ–π–Ω–æ–π\\s+—à–∞–Ω—Å\\s+–Ω–∏—á—å—è\\s+–∏–ª–∏\\s+${TEAM}$`, 'i'),
        tr: (m) => {
          const tm = m[1];
          if (target === 'en') return `Double chance draw or ${tm}`;
          return `–ü–æ–¥–≤—ñ–π–Ω–∏–π —à–∞–Ω—Å –Ω—ñ—á–∏—è –∞–±–æ ${tm}`;
        }
      },
      // –¢–æ—Ç–∞–ª –±–æ–ª—å—à–µ X
      {
        re: new RegExp(`^–¢–æ—Ç–∞–ª\\s+–±–æ–ª—å—à–µ\\s+${NUM}$`, 'i'),
        tr: (m) => {
          const n = m[1].replace(',', '.');
          if (target === 'en') return `Over ${n} goals`;
          return `–¢–æ—Ç–∞–ª –±—ñ–ª—å—à–µ ${n}`;
        }
      },
      // –¢–æ—Ç–∞–ª –º–µ–Ω—å—à–µ X
      {
        re: new RegExp(`^–¢–æ—Ç–∞–ª\\s+–º–µ–Ω—å—à–µ\\s+${NUM}$`, 'i'),
        tr: (m) => {
          const n = m[1].replace(',', '.');
          if (target === 'en') return `Under ${n} goals`;
          return `–¢–æ—Ç–∞–ª –º–µ–Ω—à–µ ${n}`;
        }
      },
      // –§–æ—Ä–∞ ¬±X –Ω–∞ {TEAM}
      {
        re: new RegExp(`^–§–æ—Ä–∞\\s*([\\+\\-]?${NUM})\\s*–Ω–∞\\s+${TEAM}$`, 'i'),
        tr: (m) => {
          // m[1] ‚Äî –≤—Å—è —Ñ–æ—Ä–∞ —Å–æ –∑–Ω–∞–∫–æ–º, –≤–Ω—É—Ç—Ä–∏ –Ω–µ–µ m[2] —á–∏—Å–ª–æ, m[3] ‚Äî –∫–æ–º–∞–Ω–¥–∞
          const h = (m[1] || '').replace(',', '.');
          const tm = m[3];
          if (target === 'en') return `Handicap ${tm} ${h}`;
          return `–§–æ—Ä–∞ ${tm} ${h}`;
        }
      },
      // –ü–æ–±–µ–¥–∞ {TEAM}
      {
        re: new RegExp(`^–ü–æ–±–µ–¥–∞\\s+${TEAM}$`, 'i'),
        tr: (m) => {
          const tm = m[1];
          if (target === 'en') return `Win ${tm}`;
          return `–ü–µ—Ä–µ–º–æ–≥–∞ ${tm}`;
        }
      },
      // –ù–∏—á—å—è
      {
        re: /^–ù–∏—á—å—è$/i,
        tr: () => (target === 'en' ? 'Draw' : '–ù—ñ—á–∏—è')
      },
      // –ö–æ—Ä–æ—Ç–∫–∏–µ —Ñ–æ—Ä–º—ã: –¢–ë/–¢–ú X
      {
        re: new RegExp(`^–¢–ë\\s*${NUM}$`, 'i'),
        tr: (m) => {
          const n = m[1].replace(',', '.');
          if (target === 'en') return `Over ${n} goals`;
          return `–¢–æ—Ç–∞–ª –±—ñ–ª—å—à–µ ${n}`;
        }
      },
      {
        re: new RegExp(`^–¢–ú\\s*${NUM}$`, 'i'),
        tr: (m) => {
          const n = m[1].replace(',', '.');
          if (target === 'en') return `Under ${n} goals`;
          return `–¢–æ—Ç–∞–ª –º–µ–Ω—à–µ ${n}`;
        }
      },
      // –ö–æ—Ä–æ—Ç–∫–∏–µ —Ñ–æ—Ä–º—ã: –ü1 / –ü2 / –• / 1–• / –•2 / 12
      {
        re: /^–ü1$/i,
        tr: () => (target === 'en' ? 'Home win' : '–ü–µ—Ä–µ–º–æ–≥–∞ –≥–æ—Å–ø–æ–¥–∞—Ä—ñ–≤')
      },
      {
        re: /^–ü2$/i,
        tr: () => (target === 'en' ? 'Away win' : '–ü–µ—Ä–µ–º–æ–≥–∞ –≥–æ—Å—Ç–µ–π')
      },
      {
        re: /^–•$/i,
        tr: () => (target === 'en' ? 'Draw' : '–ù—ñ—á–∏—è')
      },
      {
        re: /^1–•$/i,
        tr: () => (target === 'en' ? '1X (home or draw)' : '1X (–≥–æ—Å–ø–æ–¥–∞—Ä—ñ –∞–±–æ –Ω—ñ—á–∏—è)')
      },
      {
        re: /^–•2$/i,
        tr: () => (target === 'en' ? 'X2 (draw or away)' : 'X2 (–Ω—ñ—á–∏—è –∞–±–æ –≥–æ—Å—Ç—ñ)')
      },
      {
        re: /^12$/i,
        tr: () => (target === 'en' ? '12 (no draw)' : '12 (–±–µ–∑ –Ω—ñ—á–∏—î—ó)')
      }
    ];

    for (const r of rules) {
      const m = t.match(r.re);
      if (m) return r.tr(m);
    }
    return t; // –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏ ‚Äî –æ—Å—Ç–∞–≤–∏–º –æ—Ä–∏–≥–∏–Ω–∞–ª
  } catch (e) {
    console.error('translatePredictionText error:', e);
    return text;
  }
}

let coins = 0;
let predictions = [];

// –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function getUserProfile() {
  let u = telegram?.initDataUnsafe?.user;
  if (!u) {
    try {
      const saved = localStorage.getItem('tg_user');
      if (saved) u = JSON.parse(saved);
    } catch {}
  }
  if (!u) return null;
  return {
    id: u.id,
    username: u.username || null,
    first_name: u.first_name || null,
    last_name: u.last_name || null,
    photo_url: u.photo_url || null
  };
}

function getUserId() {
  const prof = getUserProfile();
  return prof?.id || null;
}

function getDOMElements() {
  return {
    coinBalance: document.getElementById('coinBalance'),
    predictionsContainer: document.getElementById('predictions'),
    userProfilePic: document.getElementById('userProfilePic'),
    userName: document.getElementById('userName'),
    sloganEl: document.querySelector('.logo p'),
    buyBtn: document.querySelector('.buy-btn')
  };
}

function loadUserData() {
  const { userProfilePic, userName, sloganEl, buyBtn } = getDOMElements();
  const profile = getUserProfile();

  if (profile) {
    userName.textContent = `${translations[lang].hello}, ${profile.first_name || translations[lang].guest}`;
    userProfilePic.src = profile.photo_url || 'https://dummyimage.com/50x50/000/fff&text=User';
    localStorage.setItem('tg_user', JSON.stringify(profile));
  } else {
    userName.textContent = `${translations[lang].hello}, ${translations[lang].guest}`;
    userProfilePic.src = 'https://dummyimage.com/50x50/000/fff&text=User';
  }

  if (sloganEl) sloganEl.textContent = translations[lang].slogan;
  if (buyBtn) buyBtn.textContent = translations[lang].buyCoins;
}

async function loadPredictions() {
  const userId = getUserId();
  if (!userId) return;

  try {
    const response = await fetch(`/api/predictions?userId=${userId}`);
    predictions = await response.json();

    const profile = getUserProfile();
    const balanceResponse = await fetch('/balance', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        userId,
        action: 'get',
        profile
      })
    });
    const balanceData = await balanceResponse.json();
    coins = balanceData.coins || 0;

    updateBalance();
    renderPredictions();
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', e);
  }
}

async function unlockPrediction(predictionId) {
  const userId = getUserId();
  if (!userId || coins < 1) return alert(translations[lang].notEnough);

  const res = await fetch('/api/unlock', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ userId, predictionId })
  });

  const result = await res.json();
  if (result.success) {
    coins = result.coins;
    updateBalance();
    await loadPredictions();
  } else {
    alert(result.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ');
  }
}

function updateBalance() {
  const { coinBalance } = getDOMElements();
  if (coinBalance) coinBalance.textContent = coins;
}

function renderPredictions() {
  const { predictionsContainer } = getDOMElements();
  predictionsContainer.innerHTML = '';

  predictions.forEach(p => {
    const div = document.createElement('div');
    div.className = `prediction ${p.isUnlocked ? 'unlocked' : 'locked'}`;
    div.setAttribute('data-id', p.id);

    const shownText = p.isUnlocked
      ? translatePredictionText(p.predictionText, lang)
      : translations[lang].locked;

    div.innerHTML = `
      <div class="teams">
        <span class="tournament">${p.tournament}</span>
        <div class="team-row"><img src="${p.logo1}"> ${p.team1}</div>
        <div class="team-row"><img src="${p.logo2}"> ${p.team2}</div>
      </div>
      <span class="odds">${p.odds}</span>
      <div class="prediction-text">${shownText}</div>
    `;

    if (!p.isUnlocked) {
      const unlockBtn = document.createElement('button');
      unlockBtn.className = 'buy-btn unlock-btn';
      unlockBtn.textContent = translations[lang].unlock;
      unlockBtn.onclick = () => unlockPrediction(p.id);
      div.appendChild(unlockBtn);
    }

    predictionsContainer.appendChild(div);
  });
}

// –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑ –≤ 30 —Å–µ–∫
setInterval(loadPredictions, 30000);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
loadUserData();
loadPredictions();
