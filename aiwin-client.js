const telegram = window.Telegram?.WebApp;

if (telegram) {
  telegram.ready();
  telegram.expand();
  console.log('‚úÖ Telegram WebApp initialized');
}

// ===== –Ø–∑—ã–∫–∏ (–≤–∏–∑—É–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ UI –∏ –ø—Ä–æ–≥–Ω–æ–∑–∞) =====
const lang = localStorage.getItem('app_lang') || 'ru';

const translations = {
  ru: {
    slogan: "–£–º–Ω—ã–µ —Å—Ç–∞–≤–∫–∏. –ë–æ–ª—å—à–∏–µ –≤—ã–∏–≥—Ä—ã—à–∏.",
    hello: "–ü—Ä–∏–≤–µ—Ç",
    guest: "–ì–æ—Å—Ç—å",
    buyCoins: "–ö—É–ø–∏—Ç—å –º–æ–Ω–µ—Ç—ã",
    unlock: "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å",
    locked: "üîí –ü—Ä–æ–≥–Ω–æ–∑ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω",
    notEnough: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç"
  },
  uk: {
    slogan: "–†–æ–∑—É–º–Ω—ñ —Å—Ç–∞–≤–∫–∏. –í–µ–ª–∏–∫—ñ –≤–∏–≥—Ä–∞—à—ñ.",
    hello: "–ü—Ä–∏–≤—ñ—Ç",
    guest: "–ì—ñ—Å—Ç—å",
    buyCoins: "–ö—É–ø–∏—Ç–∏ –º–æ–Ω–µ—Ç–∏",
    unlock: "–†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏",
    locked: "üîí –ü—Ä–æ–≥–Ω–æ–∑ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ",
    notEnough: "–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º–æ–Ω–µ—Ç"
  },
  en: {
    slogan: "Smart bets. Big wins.",
    hello: "Hello",
    guest: "Guest",
    buyCoins: "Buy coins",
    unlock: "Unlock",
    locked: "üîí Prediction locked",
    notEnough: "Not enough coins"
  }
};

/**
 * –í–∏–∑—É–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞.
 * –û—Ä–∏–≥–∏–Ω–∞–ª –ù–ï –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º, —Ç–æ–ª—å–∫–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
 */
function translatePredictionText(original, target) {
  try {
    if (!original || target === 'ru') return original;

    // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è: –¥–ª–∏–Ω–Ω—ã–µ —Ç–∏—Ä–µ ‚Üí –¥–µ—Ñ–∏—Å, —Å–∂–∞—Ç–∏–µ –ø—Ä–æ–±–µ–ª–æ–≤
    const norm = (s) =>
      s.replace(/[‚Äì‚Äî‚àí]/g, '-')
       .replace(/\s+/g, ' ')
       .replace(/\s*-\s*/g, ' - ')
       .trim();

    const t = norm(original);

    const NUM  = '([0-9]+(?:[\\.,][0-9]+)?)';
    const TEAM = '(.+?)';

    const rules = [
      // ===== –û–ë–ï –ó–ê–ë–¨–Æ–¢ (–≤–∫–ª—é—á–∞—è —Ñ–æ—Ä–º—ã: "-–¥–∞", ": –¥–∞", "(–Ω–µ—Ç)", –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Ç.–¥.) =====
      {
        re: /^–û–±–µ(?:\s+–∫–æ–º–∞–Ω–¥—ã)?\s+–∑–∞–±—å—é—Ç\s*[-:() ]*\s*(–¥–∞|–Ω–µ—Ç)$/i,
        tr: (m) => {
          const yn = (m[1] || '').toLowerCase();
          if (target === 'en') return `Both teams to score ‚Äî ${yn === '–¥–∞' ? 'yes' : 'no'}`;
          return `–û–±–∏–¥–≤—ñ –∑–∞–±'—é—Ç—å ‚Äî ${yn === '–¥–∞' ? '—Ç–∞–∫' : '–Ω—ñ'}`;
        }
      },
      {
        re: /^–û–±–µ(?:\s+–∫–æ–º–∞–Ω–¥—ã)?\s+–∑–∞–±—å—é—Ç$/i,
        tr: () => (target === 'en' ? 'Both teams to score' : "–û–±–∏–¥–≤—ñ –∑–∞–±'—é—Ç—å")
      },

      // ===== –î–í–û–ô–ù–û–ô –®–ê–ù–° (—Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º –∏ –±–µ–∑ –Ω–µ–≥–æ) =====
      // "{TEAM} –∏–ª–∏ –Ω–∏—á—å—è"
      {
        re: new RegExp(`^${TEAM}\\s+(?:–∏–ª–∏|–∞–±–æ|or)\\s+–Ω–∏—á—å—è$`, 'i'),
        tr: (m) => target === 'en' ? `Double chance ${m[1]} or draw` : `–ü–æ–¥–≤—ñ–π–Ω–∏–π —à–∞–Ω—Å ${m[1]} –∞–±–æ –Ω—ñ—á–∏—è`
      },
      // "–Ω–∏—á—å—è –∏–ª–∏ {TEAM}"
      {
        re: new RegExp(`^–Ω–∏—á—å—è\\s+(?:–∏–ª–∏|–∞–±–æ|or)\\s*${TEAM}$`, 'i'),
        tr: (m) => target === 'en' ? `Double chance draw or ${m[1]}` : `–ü–æ–¥–≤—ñ–π–Ω–∏–π —à–∞–Ω—Å –Ω—ñ—á–∏—è –∞–±–æ ${m[1]}`
      },
      // "–î–≤–æ–π–Ω–æ–π —à–∞–Ω—Å: {TEAM} –∏–ª–∏ –Ω–∏—á—å—è"
      {
        re: new RegExp(`^–î–≤–æ–π–Ω–æ–π\\s+—à–∞–Ω—Å\\s*[:\\-]?\\s*${TEAM}\\s+(?:–∏–ª–∏|–∞–±–æ|or)\\s+–Ω–∏—á—å—è$`, 'i'),
        tr: (m) => target === 'en' ? `Double chance ${m[1]} or draw` : `–ü–æ–¥–≤—ñ–π–Ω–∏–π —à–∞–Ω—Å ${m[1]} –∞–±–æ –Ω—ñ—á–∏—è`
      },
      // "–î–≤–æ–π–Ω–æ–π —à–∞–Ω—Å: –Ω–∏—á—å—è –∏–ª–∏ {TEAM}"
      {
        re: new RegExp(`^–î–≤–æ–π–Ω–æ–π\\s+—à–∞–Ω—Å\\s*[:\\-]?\\s*–Ω–∏—á—å—è\\s+(?:–∏–ª–∏|–∞–±–æ|or)\\s*${TEAM}$`, 'i'),
        tr: (m) => target === 'en' ? `Double chance draw or ${m[1]}` : `–ü–æ–¥–≤—ñ–π–Ω–∏–π —à–∞–Ω—Å –Ω—ñ—á–∏—è –∞–±–æ ${m[1]}`
      },
      // "{TEAM} –Ω–µ –ø—Ä–æ–∏–≥—Ä–∞–µ—Ç"
      {
        re: new RegExp(`^${TEAM}\\s+–Ω–µ\\s+–ø—Ä–æ–∏–≥—Ä–∞–µ—Ç$`, 'i'),
        tr: (m) => target === 'en' ? `${m[1]} not to lose (double chance)` : `${m[1]} –Ω–µ –ø—Ä–æ–≥—Ä–∞—î (–ø–æ–¥–≤—ñ–π–Ω–∏–π —à–∞–Ω—Å)`
      },

      // ===== –¢–æ—Ç–∞–ª—ã =====
      { // "–¢–æ—Ç–∞–ª –±–æ–ª—å—à–µ X"
        re: new RegExp(`^–¢–æ—Ç–∞–ª\\s+–±–æ–ª—å—à–µ\\s+${NUM}$`, 'i'),
        tr: (m) => target === 'en' ? `Over ${m[1].replace(',', '.')} goals` : `–¢–æ—Ç–∞–ª –±—ñ–ª—å—à–µ ${m[1].replace(',', '.')}`
      },
      { // "–¢–æ—Ç–∞–ª –º–µ–Ω—å—à–µ X"
        re: new RegExp(`^–¢–æ—Ç–∞–ª\\s+–º–µ–Ω—å—à–µ\\s+${NUM}$`, 'i'),
        tr: (m) => target === 'en' ? `Under ${m[1].replace(',', '.')} goals` : `–¢–æ—Ç–∞–ª –º–µ–Ω—à–µ ${m[1].replace(',', '.')}`
      },
      { // "–¢–ë X"
        re: new RegExp(`^–¢–ë\\s*${NUM}$`, 'i'),
        tr: (m) => target === 'en' ? `Over ${m[1].replace(',', '.')} goals` : `–¢–æ—Ç–∞–ª –±—ñ–ª—å—à–µ ${m[1].replace(',', '.')}`
      },
      { // "–¢–ú X"
        re: new RegExp(`^–¢–ú\\s*${NUM}$`, 'i'),
        tr: (m) => target === 'en' ? `Under ${m[1].replace(',', '.')} goals` : `–¢–æ—Ç–∞–ª –º–µ–Ω—à–µ ${m[1].replace(',', '.')}`
      },

      // ===== –§–æ—Ä—ã =====
      // "–§–æ—Ä–∞ -1.5 –Ω–∞ {TEAM}"
      {
        re: new RegExp(`^–§–æ—Ä–∞\\s*([\\+\\-]?${NUM})\\s*–Ω–∞\\s+${TEAM}$`, 'i'),
        tr: (m) => {
          const h = (m[1] || '').replace(',', '.');
          const tm = m[2];
          return target === 'en' ? `Handicap ${tm} ${h}` : `–§–æ—Ä–∞ ${tm} ${h}`;
        }
      },

      // ===== –ò—Å—Ö–æ–¥—ã =====
      {
        re: new RegExp(`^–ü–æ–±–µ–¥–∞\\s+${TEAM}$`, 'i'),
        tr: (m) => target === 'en' ? `Win ${m[1]}` : `–ü–µ—Ä–µ–º–æ–≥–∞ ${m[1]}`
      },
      { re: /^–ù–∏—á—å—è$/i, tr: () => (target === 'en' ? 'Draw' : '–ù—ñ—á–∏—è') },

      // –ö–æ—Ä–æ—Ç–∫–∏–µ –∏—Å—Ö–æ–¥—ã/–¥–≤–æ–π–Ω—ã–µ —à–∞–Ω—Å—ã
      { re: /^–ü1$/i, tr: () => (target === 'en' ? 'Home win' : '–ü–µ—Ä–µ–º–æ–≥–∞ –≥–æ—Å–ø–æ–¥–∞—Ä—ñ–≤') },
      { re: /^–ü2$/i, tr: () => (target === 'en' ? 'Away win' : '–ü–µ—Ä–µ–º–æ–≥–∞ –≥–æ—Å—Ç–µ–π') },
      { re: /^–•$/i,  tr: () => (target === 'en' ? 'Draw' : '–ù—ñ—á–∏—è') },
      { re: /^1–•$/i, tr: () => (target === 'en' ? '1X (home or draw)' : '1X (–≥–æ—Å–ø–æ–¥–∞—Ä—ñ –∞–±–æ –Ω—ñ—á–∏—è)') },
      { re: /^–•2$/i, tr: () => (target === 'en' ? 'X2 (draw or away)' : 'X2 (–Ω—ñ—á–∏—è –∞–±–æ –≥–æ—Å—Ç—ñ)') },
      { re: /^12$/i, tr: () => (target === 'en' ? '12 (no draw)' : '12 (–±–µ–∑ –Ω—ñ—á–∏—î—ó)') }
    ];

    for (const r of rules) {
      const m = t.match(r.re);
      if (m) return r.tr(m);
    }
    // –ï—Å–ª–∏ —à–∞–±–ª–æ–Ω –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    return original;
  } catch (e) {
    console.error('translatePredictionText error:', e);
    return original;
  }
}

let coins = 0;
let predictions = [];

// ===== –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ –¥–ª—è UI –∏ balance) =====
function getUserProfileRaw() {
  // –ë–µ—Ä—ë–º –∫–∞–∫ –µ—Å—Ç—å –∏–∑ Telegram (–±–µ–∑ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π –∫–ª—é—á–µ–π)
  let u = telegram?.initDataUnsafe?.user;
  if (!u) {
    try {
      const saved = localStorage.getItem('tg_user');
      if (saved) u = JSON.parse(saved);
    } catch {}
  }
  return u || null;
}
function getUserId() {
  const u = getUserProfileRaw();
  return u?.id || null;
}

function getDOMElements() {
  return {
    coinBalance: document.getElementById('coinBalance'),
    predictionsContainer: document.getElementById('predictions'),
    userProfilePic: document.getElementById('userProfilePic'),
    userName: document.getElementById('userName'),
    sloganEl: document.querySelector('.logo p'),
    buyBtn: document.querySelector('.buy-btn')
  };
}

function loadUserData() {
  const { userProfilePic, userName, sloganEl, buyBtn } = getDOMElements();
  const u = getUserProfileRaw();

  if (u) {
    userName.textContent = `${translations[lang].hello}, ${u.first_name || translations[lang].guest}`;
    userProfilePic.src = u.photo_url || 'https://dummyimage.com/50x50/000/fff&text=User';
    // —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ (–æ—Ä–∏–≥–∏–Ω–∞–ª) ‚Äî –ø—Ä–∏–≥–æ–¥—è—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
    localStorage.setItem('tg_user', JSON.stringify(u));
  } else {
    userName.textContent = `${translations[lang].hello}, ${translations[lang].guest}`;
    userProfilePic.src = 'https://dummyimage.com/50x50/000/fff&text=User';
  }

  if (sloganEl) sloganEl.textContent = translations[lang].slogan;
  if (buyBtn) buyBtn.textContent = translations[lang].buyCoins;
}

async function loadPredictions() {
  const userId = getUserId();
  if (!userId) return;

  try {
    // 1) –ë–µ—Ä—ë–º –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã (–æ—Ä–∏–≥–∏–Ω–∞–ª –∏–∑ –ë–î)
    const response = await fetch(`/api/predictions?userId=${userId}`);
    predictions = await response.json();

    // 2) –û–±–Ω–æ–≤–ª—è–µ–º/–ø–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å + —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (–Ω–æ —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Ñ–∏–ª—å, –ù–ï –ø—Ä–æ–≥–Ω–æ–∑—ã)
    const u = getUserProfileRaw();
    const balanceResponse = await fetch('/balance', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        userId,
        action: 'get',
        profile: u // —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Ñ–∏–ª—å
      })
    });
    const balanceData = await balanceResponse.json();
    coins = balanceData.coins || 0;

    updateBalance();
    renderPredictions(); // –≤–∏–∑—É–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –¥–µ–ª–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç—É—Ç
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', e);
  }
}

async function unlockPrediction(predictionId) {
  const userId = getUserId();
  if (!userId || coins < 1) return alert(translations[lang].notEnough);

  const res = await fetch('/api/unlock', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ userId, predictionId })
  });

  const result = await res.json();
  if (result.success) {
    coins = result.coins;
    updateBalance();
    await loadPredictions();
  } else {
    alert(result.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ');
  }
}

function updateBalance() {
  const { coinBalance } = getDOMElements();
  if (coinBalance) coinBalance.textContent = coins;
}

/**
 * –†–µ–Ω–¥–µ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫: –û–†–ò–ì–ò–ù–ê–õ –∏–∑ –ë–î –æ—Å—Ç–∞—ë—Ç—Å—è –≤ –¥–∞–Ω–Ω—ã—Ö, –≤ DOM –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥,
 * –∞ –æ—Ä–∏–≥–∏–Ω–∞–ª –∫–ª–∞–¥—ë–º –≤ data-original (–Ω–∞ –±—É–¥—É—â–µ–µ/–æ—Ç–ª–∞–¥–∫—É).
 */
function renderPredictions() {
  const { predictionsContainer } = getDOMElements();
  predictionsContainer.innerHTML = '';

  predictions.forEach(p => {
    const div = document.createElement('div');
    div.className = `prediction ${p.isUnlocked ? 'unlocked' : 'locked'}`;
    div.setAttribute('data-id', p.id);

    const textOriginal = p.predictionText || '';
    const textShown = p.isUnlocked
      ? translatePredictionText(textOriginal, lang) // —Ç–æ–ª—å–∫–æ –≤–∏–∑—É–∞–ª—å–Ω–æ
      : translations[lang].locked;

    div.innerHTML = `
      <div class="teams">
        <span class="tournament">${p.tournament}</span>
        <div class="team-row"><img src="${p.logo1}"> ${p.team1}</div>
        <div class="team-row"><img src="${p.logo2}"> ${p.team2}</div>
      </div>
      <span class="odds">${p.odds}</span>
      <div class="prediction-text" data-original="${textOriginal.replace(/"/g, '&quot;')}">${textShown}</div>
    `;

    if (!p.isUnlocked) {
      const unlockBtn = document.createElement('button');
      unlockBtn.className = 'buy-btn unlock-btn';
      unlockBtn.textContent = translations[lang].unlock;
      unlockBtn.onclick = () => unlockPrediction(p.id);
      div.appendChild(unlockBtn);
    }

    predictionsContainer.appendChild(div);
  });
}

// –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑ –≤ 30 —Å–µ–∫ (—Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ)
setInterval(loadPredictions, 30000);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
loadUserData();
loadPredictions();
