const telegram = window.Telegram?.WebApp;

if (telegram) {
    telegram.ready();
    telegram.expand();
    console.log('‚úÖ Telegram WebApp initialized');
}

// ===== –Ø–∑—ã–∫–æ–≤–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ =====
const lang = localStorage.getItem('app_lang') || 'ru';

const translations = {
    ru: {
        slogan: "–£–º–Ω—ã–µ —Å—Ç–∞–≤–∫–∏. –ë–æ–ª—å—à–∏–µ –≤—ã–∏–≥—Ä—ã—à–∏.",
        hello: "–ü—Ä–∏–≤–µ—Ç",
        guest: "–ì–æ—Å—Ç—å",
        buyCoins: "–ö—É–ø–∏—Ç—å –º–æ–Ω–µ—Ç—ã",
        unlock: "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å",
        locked: "üîí –ü—Ä–æ–≥–Ω–æ–∑ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω",
        notEnough: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç"
    },
    uk: {
        slogan: "–†–æ–∑—É–º–Ω—ñ —Å—Ç–∞–≤–∫–∏. –í–µ–ª–∏–∫—ñ –≤–∏–≥—Ä–∞—à—ñ.",
        hello: "–ü—Ä–∏–≤—ñ—Ç",
        guest: "–ì—ñ—Å—Ç—å",
        buyCoins: "–ö—É–ø–∏—Ç–∏ –º–æ–Ω–µ—Ç–∏",
        unlock: "–†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏",
        locked: "üîí –ü—Ä–æ–≥–Ω–æ–∑ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ",
        notEnough: "–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º–æ–Ω–µ—Ç"
    },
    en: {
        slogan: "Smart bets. Big wins.",
        hello: "Hello",
        guest: "Guest",
        buyCoins: "Buy coins",
        unlock: "Unlock",
        locked: "üîí Prediction locked",
        notEnough: "Not enough coins"
    }
};

// ===== –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ (–†–£ ‚Üí UK/EN) =====
function translatePredictionText(text, lang) {
    if (!text || lang === 'ru') return text; // –æ—Ä–∏–≥–∏–Ω–∞–ª –Ω–∞ —Ä—É—Å ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    const t = text.trim();

    // –ü–æ–º–æ—â–Ω–∏–∫–∏
    const num = '([0-9]+(?:[\\.,][0-9]+)?)';
    const team = '(.+?)';

    // –ü–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω: –æ—Ç –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –∫ –æ–±—â–∏–º
    const patterns = [
        // –û–±–µ –∑–∞–±—å—é—Ç: –¥–∞/–Ω–µ—Ç
        {
            re: new RegExp(`^–û–±–µ\\s+–∑–∞–±—å—é—Ç\\s*[:\\-‚Äì]?\\s*(–¥–∞|–Ω–µ—Ç)$`, 'i'),
            tr: (m) => {
                const yn = m[1].toLowerCase();
                if (lang === 'en') return `Both teams to score ‚Äî ${yn === '–¥–∞' ? 'yes' : 'no'}`;
                return `–û–±–∏–¥–≤—ñ –∑–∞–±'—é—Ç—å ‚Äî ${yn === '–¥–∞' ? '—Ç–∞–∫' : '–Ω—ñ'}`;
            }
        },
        // –û–±–µ –∑–∞–±—å—é—Ç (–±–µ–∑ –¥–∞/–Ω–µ—Ç) ‚Äî —Ç—Ä–∞–∫—Ç—É–µ–º –∫–∞–∫ "–¥–∞"
        {
            re: /^–û–±–µ\s+–∑–∞–±—å—é—Ç$/i,
            tr: () => (lang === 'en' ? 'Both teams to score' : "–û–±–∏–¥–≤—ñ –∑–∞–±'—é—Ç—å")
        },
        // –î–≤–æ–π–Ω–æ–π —à–∞–Ω—Å {TEAM} –∏–ª–∏ –Ω–∏—á—å—è
        {
            re: new RegExp(`^–î–≤–æ–π–Ω–æ–π\\s+—à–∞–Ω—Å\\s+${team}\\s+–∏–ª–∏\\s+–Ω–∏—á—å—è$`, 'i'),
            tr: (m) => {
                const tm = m[1];
                if (lang === 'en') return `Double chance ${tm} or draw`;
                return `–ü–æ–¥–≤—ñ–π–Ω–∏–π —à–∞–Ω—Å ${tm} –∞–±–æ –Ω—ñ—á–∏—è`;
            }
        },
        // –î–≤–æ–π–Ω–æ–π —à–∞–Ω—Å –Ω–∏—á—å—è –∏–ª–∏ {TEAM}
        {
            re: new RegExp(`^–î–≤–æ–π–Ω–æ–π\\s+—à–∞–Ω—Å\\s+–Ω–∏—á—å—è\\s+–∏–ª–∏\\s+${team}$`, 'i'),
            tr: (m) => {
                const tm = m[1];
                if (lang === 'en') return `Double chance draw or ${tm}`;
                return `–ü–æ–¥–≤—ñ–π–Ω–∏–π —à–∞–Ω—Å –Ω—ñ—á–∏—è –∞–±–æ ${tm}`;
            }
        },
        // –¢–æ—Ç–∞–ª –±–æ–ª—å—à–µ X
        {
            re: new RegExp(`^–¢–æ—Ç–∞–ª\\s+–±–æ–ª—å—à–µ\\s+${num}$`, 'i'),
            tr: (m) => {
                const n = m[1].replace(',', '.');
                if (lang === 'en') return `Over ${n} goals`;
                return `–¢–æ—Ç–∞–ª –±—ñ–ª—å—à–µ ${n}`;
            }
        },
        // –¢–æ—Ç–∞–ª –º–µ–Ω—å—à–µ X
        {
            re: new RegExp(`^–¢–æ—Ç–∞–ª\\s+–º–µ–Ω—å—à–µ\\s+${num}$`, 'i'),
            tr: (m) => {
                const n = m[1].replace(',', '.');
                if (lang === 'en') return `Under ${n} goals`;
                return `–¢–æ—Ç–∞–ª –º–µ–Ω—à–µ ${n}`;
            }
        },
        // –§–æ—Ä–∞ ¬±X –Ω–∞ {TEAM}
        {
            re: new RegExp(`^–§–æ—Ä–∞\\s*([\\+\\-]?${num})\\s*–Ω–∞\\s+${team}$`, 'i'),
            tr: (m) => {
                const h = m[1].replace(',', '.');
                const tm = m[2];
                if (lang === 'en') return `Handicap ${tm} ${h}`;
                return `–§–æ—Ä–∞ ${tm} ${h}`;
            }
        },
        // –ü–æ–±–µ–¥–∞ {TEAM}
        {
            re: new RegExp(`^–ü–æ–±–µ–¥–∞\\s+${team}$`, 'i'),
            tr: (m) => {
                const tm = m[1];
                if (lang === 'en') return `Win ${tm}`;
                return `–ü–µ—Ä–µ–º–æ–≥–∞ ${tm}`;
            }
        },
        // –ù–∏—á—å—è
        {
            re: /^–ù–∏—á—å—è$/i,
            tr: () => (lang === 'en' ? 'Draw' : '–ù—ñ—á–∏—è')
        },
    ];

    for (const p of patterns) {
        const m = t.match(p.re);
        if (m) return p.tr(m);
    }
    // –ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏ ‚Äî –æ—Å—Ç–∞–≤–∏–º –∫–∞–∫ –µ—Å—Ç—å (–ª—É—á—à–µ –ø–æ–∫–∞–∑–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª, —á–µ–º –æ—à–∏–±–∏—Ç—å—Å—è)
    return t;
}

let coins = 0;
let predictions = [];

// –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram / localStorage
function getUserProfile() {
    let u = telegram?.initDataUnsafe?.user;
    if (!u) {
        try {
            const saved = localStorage.getItem('tg_user');
            if (saved) u = JSON.parse(saved);
        } catch {}
    }
    if (!u) return null;
    return {
        id: u.id,
        username: u.username || null,
        first_name: u.first_name || null,
        last_name: u.last_name || null,
        photo_url: u.photo_url || null
    };
}

function getUserId() {
    const prof = getUserProfile();
    return prof?.id || null;
}

function getDOMElements() {
    return {
        coinBalance: document.getElementById('coinBalance'),
        predictionsContainer: document.getElementById('predictions'),
        userProfilePic: document.getElementById('userProfilePic'),
        userName: document.getElementById('userName'),
        sloganEl: document.querySelector('.logo p'),
        buyBtn: document.querySelector('.buy-btn')
    };
}

function loadUserData() {
    const { userProfilePic, userName, sloganEl, buyBtn } = getDOMElements();
    const profile = getUserProfile();

    if (profile) {
        userName.textContent = `${translations[lang].hello}, ${profile.first_name || translations[lang].guest}`;
        userProfilePic.src = profile.photo_url || 'https://dummyimage.com/50x50/000/fff&text=User';
        localStorage.setItem('tg_user', JSON.stringify(profile));
    } else {
        userName.textContent = `${translations[lang].hello}, ${translations[lang].guest}`;
        userProfilePic.src = 'https://dummyimage.com/50x50/000/fff&text=User';
    }

    if (sloganEl) sloganEl.textContent = translations[lang].slogan;
    if (buyBtn) buyBtn.textContent = translations[lang].buyCoins;
}

async function loadPredictions() {
    const userId = getUserId();
    if (!userId) return;

    try {
        const response = await fetch(`/api/predictions?userId=${userId}`);
        predictions = await response.json();

        const profile = getUserProfile();
        const balanceResponse = await fetch('/balance', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                userId,
                action: 'get',
                profile
            })
        });
        const balanceData = await balanceResponse.json();
        coins = balanceData.coins || 0;

        updateBalance();
        renderPredictions();
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', e);
    }
}

async function unlockPrediction(predictionId) {
    const userId = getUserId();
    if (!userId || coins < 1) return alert(translations[lang].notEnough);

    const res = await fetch('/api/unlock', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ userId, predictionId })
    });

    const result = await res.json();
    if (result.success) {
        coins = result.coins;
        updateBalance();
        await loadPredictions();
    } else {
        alert(result.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ');
    }
}

function updateBalance() {
    const { coinBalance } = getDOMElements();
    if (coinBalance) coinBalance.textContent = coins;
}

function renderPredictions() {
    const { predictionsContainer } = getDOMElements();
    predictionsContainer.innerHTML = '';

    predictions.forEach(p => {
        const div = document.createElement('div');
        div.className = `prediction ${p.isUnlocked ? 'unlocked' : 'locked'}`;
        div.setAttribute('data-id', p.id);

        const shownText = p.isUnlocked
            ? translatePredictionText(p.predictionText, lang)
            : translations[lang].locked;

        div.innerHTML = `
            <div class="teams">
                <span class="tournament">${p.tournament}</span>
                <div class="team-row"><img src="${p.logo1}"> ${p.team1}</div>
                <div class="team-row"><img src="${p.logo2}"> ${p.team2}</div>
            </div>
            <span class="odds">${p.odds}</span>
            <div class="prediction-text">${shownText}</div>
        `;

        if (!p.isUnlocked) {
            const unlockBtn = document.createElement('button');
            unlockBtn.className = 'buy-btn unlock-btn';
            unlockBtn.textContent = translations[lang].unlock;
            unlockBtn.onclick = () => unlockPrediction(p.id);
            div.appendChild(unlockBtn);
        }

        predictionsContainer.appendChild(div);
    });
}

// –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑ –≤ 30 —Å–µ–∫
setInterval(loadPredictions, 30000);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
loadUserData();
loadPredictions();
