const telegram = window.Telegram?.WebApp;
if (telegram) {
    telegram.ready();
    telegram.expand();
    console.log('Telegram WebApp initialized and expanded');
    loadUserData();
    loadPredictions();
} else {
    console.log('Telegram WebApp not available');
    loadUserData();
    loadPredictions();
}

let predictions = [];
let coins = parseInt(localStorage.getItem('coins')) || 0;
let unlockedPredictions = JSON.parse(localStorage.getItem('unlockedPredictions')) || [];

function initializeCoins() {
    if (!localStorage.getItem('visited')) {
        coins = 5;
        localStorage.setItem('coins', coins);
        localStorage.setItem('visited', 'true');
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ DOM –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
function getDOMElements() {
    return {
        coinBalance: document.getElementById('coinBalance'),
        predictionsContainer: document.getElementById('predictions'),
        userProfilePic: document.getElementById('userProfilePic'),
        userName: document.getElementById('userName')
    };
}

function loadUserData() {
    const { userProfilePic, userName } = getDOMElements();
    if (!userName || !userProfilePic) {
        console.error('DOM elements not found');
        return;
    }

    let user = telegram?.initDataUnsafe?.user;

    // –ï—Å–ª–∏ –Ω–µ—Ç user –∏–∑ Telegram SDK ‚Äî –±–µ—Ä—ë–º –∏–∑ localStorage
    if (!user) {
        const savedUser = localStorage.getItem('tg_user');
        if (savedUser) {
            try {
                user = JSON.parse(savedUser);
                console.log('üë§ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ localStorage:', user);
            } catch (e) {
                console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å tg_user –∏–∑ localStorage:', e);
            }
        }
    }

    if (user) {
        userName.textContent = user.first_name || '–ì–æ—Å—Ç—å';
        userProfilePic.src = user.photo_url || 'https://dummyimage.com/50x50/000000/ffffff?text=User';
    } else {
        console.log('User –Ω–µ –Ω–∞–π–¥–µ–Ω');
        userName.textContent = '–ì–æ—Å—Ç—å (–¢–µ—Å—Ç)';
        userProfilePic.src = 'https://dummyimage.com/50x50/000000/ffffff?text=User';
    }
}

async function loadPredictions() {
    const { predictionsContainer } = getDOMElements();
    if (!predictionsContainer) {
        console.error('predictionsContainer is undefined');
        return;
    }
    console.log('Starting loadPredictions');

    const userId = telegram?.initDataUnsafe?.user?.id || 'default-user';
    console.log('User ID:', userId);
    if (!userId) {
        console.warn('User ID not available. Predictions may not load correctly.');
        predictions = [];
        renderPredictions();
        return;
    }

    try {
        const predictionsResponse = await fetch('/api/predictions');
        console.log('Predictions response status:', predictionsResponse.status);
        if (!predictionsResponse.ok) throw new Error(`HTTP error! Status: ${predictionsResponse.status}`);
        const serverPredictions = await predictionsResponse.json();
        console.log('Server predictions raw:', serverPredictions);
        predictions = Array.isArray(serverPredictions)
            ? serverPredictions.map(p => ({
                ...p,
                id: Number(p.id),
                isUnlocked: unlockedPredictions.map(Number).includes(Number(p.id))
            }))
            : [];
        console.log('Processed predictions:', predictions);

        const balanceResponse = await fetch('/balance', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ userId, action: 'get' })
        });
        console.log('Balance response status:', balanceResponse.status);
        if (!balanceResponse.ok) throw new Error(`HTTP error! Status: ${balanceResponse.status}`);
        const balanceData = await balanceResponse.json();
        console.log('Balance data:', balanceData);
        coins = balanceData.coins || 0;
        localStorage.setItem('coins', coins);
        updateBalance();
        renderPredictions();
    } catch (error) {
        console.error('Error loading predictions or balance:', error);
        predictions = [];
        renderPredictions();
        if (telegram) alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ.');
    }
}

async function updatePredictions() {
    const { predictionsContainer } = getDOMElements();
    if (!predictionsContainer) {
        console.error('predictionsContainer is undefined');
        return;
    }
    console.log('Starting updatePredictions');

    try {
        const response = await fetch('/api/predictions');
        console.log('Update response status:', response.status);
        if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
        const serverPredictions = await response.json();
        console.log('Update server predictions:', serverPredictions);
        predictions = Array.isArray(serverPredictions)
            ? serverPredictions.map(p => ({
                ...p,
                id: Number(p.id),
                isUnlocked: unlockedPredictions.map(Number).includes(Number(p.id))
            }))
            : [];
        console.log('Updated predictions:', predictions);
        renderPredictions();
    } catch (error) {
        console.error('Error updating predictions:', error);
        predictions = [];
        renderPredictions();
    }
}

async function unlockPrediction(id, button) {
    if (coins < 1) {
        alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! –ö—É–ø–∏—Ç–µ –µ—â—ë –∑–∞ Telegram Stars.');
        return;
    }

    const userId = telegram?.initDataUnsafe?.user?.id || 'default-user';
    const url = '/balance';
    console.log('Sending request to:', url);

    try {
        const res = await fetch(url, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ userId, action: 'update', amount: -1 })
        });
        console.log('Unlock balance response status:', res.status);
        if (!res.ok) throw new Error(`HTTP ${res.status}`);

        const data = await res.json();
        console.log('Unlock balance data:', data);
        if (data.coins === undefined || data.coins < 0) {
            coins = 0; // –°–±—Ä–æ—Å –Ω–∞ 0 –ø—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º –æ—Ç–≤–µ—Ç–µ
        } else {
            coins = data.coins;
        }
        localStorage.setItem('coins', coins);

        unlockedPredictions.push(id);
        const prediction = predictions.find(p => Number(p.id) === Number(id));
        if (prediction) prediction.isUnlocked = true;

        localStorage.setItem('unlockedPredictions', JSON.stringify(unlockedPredictions));
        updateBalance();
        renderPredictions();

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ –º–æ–Ω–µ—Ç—ã:', error);
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∏—Å–∞—Ç—å –º–æ–Ω–µ—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
        // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–º –º–æ–Ω–µ—Ç—ã, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        coins = parseInt(localStorage.getItem('coins')) + 1 || 5;
        localStorage.setItem('coins', coins);
        updateBalance();
    }
}

function updateBalance() {
    const { coinBalance } = getDOMElements();
    if (coinBalance) {
        coinBalance.textContent = coins;
    } else {
        console.error('coinBalance element not found');
    }
}

function renderPredictions() {
    const { predictionsContainer } = getDOMElements();
    if (!predictionsContainer) {
        console.error('predictionsContainer is undefined');
        return;
    }
    console.log('Rendering predictions, count:', predictions.length);
    predictionsContainer.innerHTML = '';
    if (predictions.length === 0) {
        predictionsContainer.innerHTML = '<p style="color: #ff6200;">–ù–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.</p>';
        console.log('No predictions to render.');
        return;
    }

    predictions.forEach(p => {
        const div = document.createElement('div');
        div.className = `prediction ${p.isUnlocked ? 'unlocked' : 'locked'}`;
        div.setAttribute('data-id', p.id);
        div.innerHTML = `
            <div class="teams">
                <span class="tournament">${p.tournament || '–ù–µ—Ç —Ç—É—Ä–Ω–∏—Ä–∞'}</span>
                <div class="team-row"><img src="${p.logo1 || 'https://dummyimage.com/30x30'}" alt="${p.team1}"> ${p.team1 || '–ö–æ–º–∞–Ω–¥–∞ 1'}</div>
                <div class="team-row"><img src="${p.logo2 || 'https://dummyimage.com/30x30'}" alt="${p.team2}"> ${p.team2 || '–ö–æ–º–∞–Ω–¥–∞ 2'}</div>
            </div>
            <span class="odds">${p.odds || '0.00'}</span>
            <div class="prediction-text">${p.predictionText || '–ù–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞'}</div>
            <button class="buy-btn unlock-btn" onclick="unlockPrediction(${p.id}, this)">–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å</button>
        `;
        predictionsContainer.appendChild(div);
    });
}

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
setInterval(updatePredictions, 5000);

initializeCoins();
loadUserData();